
F1_IOEXP_SPI_SLAVE_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005438  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000144  0800561c  0800561c  0001561c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005760  08005760  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08005760  08005760  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005760  08005760  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005760  08005760  00015760  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005764  08005764  00015764  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005768  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002be4  20000074  080057dc  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002c58  080057dc  00022c58  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c64f  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003831  00000000  00000000  0003c6ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fa0  00000000  00000000  0003ff20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e40  00000000  00000000  00040ec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d312  00000000  00000000  00041d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000155b9  00000000  00000000  0005f012  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009742a  00000000  00000000  000745cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010b9f5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004304  00000000  00000000  0010ba48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000074 	.word	0x20000074
 8000200:	00000000 	.word	0x00000000
 8000204:	08005604 	.word	0x08005604

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000078 	.word	0x20000078
 8000220:	08005604 	.word	0x08005604

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <__aeabi_fmul>:
 8000234:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000238:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800023c:	bf1e      	ittt	ne
 800023e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000242:	ea92 0f0c 	teqne	r2, ip
 8000246:	ea93 0f0c 	teqne	r3, ip
 800024a:	d06f      	beq.n	800032c <__aeabi_fmul+0xf8>
 800024c:	441a      	add	r2, r3
 800024e:	ea80 0c01 	eor.w	ip, r0, r1
 8000252:	0240      	lsls	r0, r0, #9
 8000254:	bf18      	it	ne
 8000256:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800025a:	d01e      	beq.n	800029a <__aeabi_fmul+0x66>
 800025c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000260:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000264:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000268:	fba0 3101 	umull	r3, r1, r0, r1
 800026c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000270:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000274:	bf3e      	ittt	cc
 8000276:	0049      	lslcc	r1, r1, #1
 8000278:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 800027c:	005b      	lslcc	r3, r3, #1
 800027e:	ea40 0001 	orr.w	r0, r0, r1
 8000282:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000286:	2afd      	cmp	r2, #253	; 0xfd
 8000288:	d81d      	bhi.n	80002c6 <__aeabi_fmul+0x92>
 800028a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800028e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000292:	bf08      	it	eq
 8000294:	f020 0001 	biceq.w	r0, r0, #1
 8000298:	4770      	bx	lr
 800029a:	f090 0f00 	teq	r0, #0
 800029e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80002a2:	bf08      	it	eq
 80002a4:	0249      	lsleq	r1, r1, #9
 80002a6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80002aa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80002ae:	3a7f      	subs	r2, #127	; 0x7f
 80002b0:	bfc2      	ittt	gt
 80002b2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80002b6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80002ba:	4770      	bxgt	lr
 80002bc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002c0:	f04f 0300 	mov.w	r3, #0
 80002c4:	3a01      	subs	r2, #1
 80002c6:	dc5d      	bgt.n	8000384 <__aeabi_fmul+0x150>
 80002c8:	f112 0f19 	cmn.w	r2, #25
 80002cc:	bfdc      	itt	le
 80002ce:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80002d2:	4770      	bxle	lr
 80002d4:	f1c2 0200 	rsb	r2, r2, #0
 80002d8:	0041      	lsls	r1, r0, #1
 80002da:	fa21 f102 	lsr.w	r1, r1, r2
 80002de:	f1c2 0220 	rsb	r2, r2, #32
 80002e2:	fa00 fc02 	lsl.w	ip, r0, r2
 80002e6:	ea5f 0031 	movs.w	r0, r1, rrx
 80002ea:	f140 0000 	adc.w	r0, r0, #0
 80002ee:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80002f2:	bf08      	it	eq
 80002f4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80002f8:	4770      	bx	lr
 80002fa:	f092 0f00 	teq	r2, #0
 80002fe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000302:	bf02      	ittt	eq
 8000304:	0040      	lsleq	r0, r0, #1
 8000306:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800030a:	3a01      	subeq	r2, #1
 800030c:	d0f9      	beq.n	8000302 <__aeabi_fmul+0xce>
 800030e:	ea40 000c 	orr.w	r0, r0, ip
 8000312:	f093 0f00 	teq	r3, #0
 8000316:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800031a:	bf02      	ittt	eq
 800031c:	0049      	lsleq	r1, r1, #1
 800031e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000322:	3b01      	subeq	r3, #1
 8000324:	d0f9      	beq.n	800031a <__aeabi_fmul+0xe6>
 8000326:	ea41 010c 	orr.w	r1, r1, ip
 800032a:	e78f      	b.n	800024c <__aeabi_fmul+0x18>
 800032c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000330:	ea92 0f0c 	teq	r2, ip
 8000334:	bf18      	it	ne
 8000336:	ea93 0f0c 	teqne	r3, ip
 800033a:	d00a      	beq.n	8000352 <__aeabi_fmul+0x11e>
 800033c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000340:	bf18      	it	ne
 8000342:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000346:	d1d8      	bne.n	80002fa <__aeabi_fmul+0xc6>
 8000348:	ea80 0001 	eor.w	r0, r0, r1
 800034c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000350:	4770      	bx	lr
 8000352:	f090 0f00 	teq	r0, #0
 8000356:	bf17      	itett	ne
 8000358:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 800035c:	4608      	moveq	r0, r1
 800035e:	f091 0f00 	teqne	r1, #0
 8000362:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000366:	d014      	beq.n	8000392 <__aeabi_fmul+0x15e>
 8000368:	ea92 0f0c 	teq	r2, ip
 800036c:	d101      	bne.n	8000372 <__aeabi_fmul+0x13e>
 800036e:	0242      	lsls	r2, r0, #9
 8000370:	d10f      	bne.n	8000392 <__aeabi_fmul+0x15e>
 8000372:	ea93 0f0c 	teq	r3, ip
 8000376:	d103      	bne.n	8000380 <__aeabi_fmul+0x14c>
 8000378:	024b      	lsls	r3, r1, #9
 800037a:	bf18      	it	ne
 800037c:	4608      	movne	r0, r1
 800037e:	d108      	bne.n	8000392 <__aeabi_fmul+0x15e>
 8000380:	ea80 0001 	eor.w	r0, r0, r1
 8000384:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000388:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800038c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000390:	4770      	bx	lr
 8000392:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000396:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 800039a:	4770      	bx	lr

0800039c <__gesf2>:
 800039c:	f04f 3cff 	mov.w	ip, #4294967295
 80003a0:	e006      	b.n	80003b0 <__cmpsf2+0x4>
 80003a2:	bf00      	nop

080003a4 <__lesf2>:
 80003a4:	f04f 0c01 	mov.w	ip, #1
 80003a8:	e002      	b.n	80003b0 <__cmpsf2+0x4>
 80003aa:	bf00      	nop

080003ac <__cmpsf2>:
 80003ac:	f04f 0c01 	mov.w	ip, #1
 80003b0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80003b4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80003b8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003bc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003c0:	bf18      	it	ne
 80003c2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003c6:	d011      	beq.n	80003ec <__cmpsf2+0x40>
 80003c8:	b001      	add	sp, #4
 80003ca:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80003ce:	bf18      	it	ne
 80003d0:	ea90 0f01 	teqne	r0, r1
 80003d4:	bf58      	it	pl
 80003d6:	ebb2 0003 	subspl.w	r0, r2, r3
 80003da:	bf88      	it	hi
 80003dc:	17c8      	asrhi	r0, r1, #31
 80003de:	bf38      	it	cc
 80003e0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80003e4:	bf18      	it	ne
 80003e6:	f040 0001 	orrne.w	r0, r0, #1
 80003ea:	4770      	bx	lr
 80003ec:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003f0:	d102      	bne.n	80003f8 <__cmpsf2+0x4c>
 80003f2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80003f6:	d105      	bne.n	8000404 <__cmpsf2+0x58>
 80003f8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80003fc:	d1e4      	bne.n	80003c8 <__cmpsf2+0x1c>
 80003fe:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000402:	d0e1      	beq.n	80003c8 <__cmpsf2+0x1c>
 8000404:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000408:	4770      	bx	lr
 800040a:	bf00      	nop

0800040c <__aeabi_cfrcmple>:
 800040c:	4684      	mov	ip, r0
 800040e:	4608      	mov	r0, r1
 8000410:	4661      	mov	r1, ip
 8000412:	e7ff      	b.n	8000414 <__aeabi_cfcmpeq>

08000414 <__aeabi_cfcmpeq>:
 8000414:	b50f      	push	{r0, r1, r2, r3, lr}
 8000416:	f7ff ffc9 	bl	80003ac <__cmpsf2>
 800041a:	2800      	cmp	r0, #0
 800041c:	bf48      	it	mi
 800041e:	f110 0f00 	cmnmi.w	r0, #0
 8000422:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000424 <__aeabi_fcmpeq>:
 8000424:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000428:	f7ff fff4 	bl	8000414 <__aeabi_cfcmpeq>
 800042c:	bf0c      	ite	eq
 800042e:	2001      	moveq	r0, #1
 8000430:	2000      	movne	r0, #0
 8000432:	f85d fb08 	ldr.w	pc, [sp], #8
 8000436:	bf00      	nop

08000438 <__aeabi_fcmplt>:
 8000438:	f84d ed08 	str.w	lr, [sp, #-8]!
 800043c:	f7ff ffea 	bl	8000414 <__aeabi_cfcmpeq>
 8000440:	bf34      	ite	cc
 8000442:	2001      	movcc	r0, #1
 8000444:	2000      	movcs	r0, #0
 8000446:	f85d fb08 	ldr.w	pc, [sp], #8
 800044a:	bf00      	nop

0800044c <__aeabi_fcmple>:
 800044c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000450:	f7ff ffe0 	bl	8000414 <__aeabi_cfcmpeq>
 8000454:	bf94      	ite	ls
 8000456:	2001      	movls	r0, #1
 8000458:	2000      	movhi	r0, #0
 800045a:	f85d fb08 	ldr.w	pc, [sp], #8
 800045e:	bf00      	nop

08000460 <__aeabi_fcmpge>:
 8000460:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000464:	f7ff ffd2 	bl	800040c <__aeabi_cfrcmple>
 8000468:	bf94      	ite	ls
 800046a:	2001      	movls	r0, #1
 800046c:	2000      	movhi	r0, #0
 800046e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000472:	bf00      	nop

08000474 <__aeabi_fcmpgt>:
 8000474:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000478:	f7ff ffc8 	bl	800040c <__aeabi_cfrcmple>
 800047c:	bf34      	ite	cc
 800047e:	2001      	movcc	r0, #1
 8000480:	2000      	movcs	r0, #0
 8000482:	f85d fb08 	ldr.w	pc, [sp], #8
 8000486:	bf00      	nop

08000488 <__aeabi_f2uiz>:
 8000488:	0042      	lsls	r2, r0, #1
 800048a:	d20e      	bcs.n	80004aa <__aeabi_f2uiz+0x22>
 800048c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000490:	d30b      	bcc.n	80004aa <__aeabi_f2uiz+0x22>
 8000492:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000496:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800049a:	d409      	bmi.n	80004b0 <__aeabi_f2uiz+0x28>
 800049c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80004a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80004a4:	fa23 f002 	lsr.w	r0, r3, r2
 80004a8:	4770      	bx	lr
 80004aa:	f04f 0000 	mov.w	r0, #0
 80004ae:	4770      	bx	lr
 80004b0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80004b4:	d101      	bne.n	80004ba <__aeabi_f2uiz+0x32>
 80004b6:	0242      	lsls	r2, r0, #9
 80004b8:	d102      	bne.n	80004c0 <__aeabi_f2uiz+0x38>
 80004ba:	f04f 30ff 	mov.w	r0, #4294967295
 80004be:	4770      	bx	lr
 80004c0:	f04f 0000 	mov.w	r0, #0
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <LP55231_WriteReg>:
 *
 * @param 	reg_addr	Register Address
 * @param 	data		Register Value
 *
 *******************************************************************************/
void LP55231_WriteReg(uint8_t reg_addr, uint8_t data) {
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b086      	sub	sp, #24
 80004cc:	af04      	add	r7, sp, #16
 80004ce:	4603      	mov	r3, r0
 80004d0:	460a      	mov	r2, r1
 80004d2:	71fb      	strb	r3, [r7, #7]
 80004d4:	4613      	mov	r3, r2
 80004d6:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&LP55231_I2C_PORT, LP55231_I2C_ADDR, reg_addr, 1, &data, 1, HAL_MAX_DELAY);
 80004d8:	79fb      	ldrb	r3, [r7, #7]
 80004da:	b29a      	uxth	r2, r3
 80004dc:	f04f 33ff 	mov.w	r3, #4294967295
 80004e0:	9302      	str	r3, [sp, #8]
 80004e2:	2301      	movs	r3, #1
 80004e4:	9301      	str	r3, [sp, #4]
 80004e6:	1dbb      	adds	r3, r7, #6
 80004e8:	9300      	str	r3, [sp, #0]
 80004ea:	2301      	movs	r3, #1
 80004ec:	2164      	movs	r1, #100	; 0x64
 80004ee:	4803      	ldr	r0, [pc, #12]	; (80004fc <LP55231_WriteReg+0x34>)
 80004f0:	f002 fa8c 	bl	8002a0c <HAL_I2C_Mem_Write>
}
 80004f4:	bf00      	nop
 80004f6:	3708      	adds	r7, #8
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	200004ac 	.word	0x200004ac

08000500 <LP55231_Init>:

/***************************************************************************//**
 * @brief  				Initialize the LP55231
 *
 *******************************************************************************/
void LP55231_Init(void){
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0

	LP55231_Reset();
 8000504:	f000 f818 	bl	8000538 <LP55231_Reset>
	HAL_Delay(500);
 8000508:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800050c:	f001 f9aa 	bl	8001864 <HAL_Delay>
	LP55231_Enable();
 8000510:	f000 f806 	bl	8000520 <LP55231_Enable>
	HAL_Delay(500);
 8000514:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000518:	f001 f9a4 	bl	8001864 <HAL_Delay>
	return;
 800051c:	bf00      	nop
}
 800051e:	bd80      	pop	{r7, pc}

08000520 <LP55231_Enable>:
/***************************************************************************//**
 * @brief  				Enable all led channels
 *
 *******************************************************************************/
void LP55231_Enable()
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
	/* Set enable bit */
	LP55231_WriteReg(REG_CNTRL1, 0x40 );
 8000524:	2140      	movs	r1, #64	; 0x40
 8000526:	2000      	movs	r0, #0
 8000528:	f7ff ffce 	bl	80004c8 <LP55231_WriteReg>

	/* enable internal clock & charge pump & write auto increment */
	LP55231_WriteReg(REG_MISC, 0x53);
 800052c:	2153      	movs	r1, #83	; 0x53
 800052e:	2036      	movs	r0, #54	; 0x36
 8000530:	f7ff ffca 	bl	80004c8 <LP55231_WriteReg>
}
 8000534:	bf00      	nop
 8000536:	bd80      	pop	{r7, pc}

08000538 <LP55231_Reset>:
/***************************************************************************//**
 * @brief  				Reset the LPC55231
 *
 *******************************************************************************/
void LP55231_Reset()
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
	// force reset
	LP55231_WriteReg(REG_RESET, 0xff);
 800053c:	21ff      	movs	r1, #255	; 0xff
 800053e:	203d      	movs	r0, #61	; 0x3d
 8000540:	f7ff ffc2 	bl	80004c8 <LP55231_WriteReg>
}
 8000544:	bf00      	nop
 8000546:	bd80      	pop	{r7, pc}

08000548 <SH1107_Reset>:

/***************************************************************************//**
 * @brief Reset SH1107 with reset pin.
 *
 *******************************************************************************/
void SH1107_Reset(void) {
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
	SH1107_Off();
 800054c:	f000 f814 	bl	8000578 <SH1107_Off>
	HAL_Delay(200);
 8000550:	20c8      	movs	r0, #200	; 0xc8
 8000552:	f001 f987 	bl	8001864 <HAL_Delay>
	SH1107_On();
 8000556:	f000 f803 	bl	8000560 <SH1107_On>
}
 800055a:	bf00      	nop
 800055c:	bd80      	pop	{r7, pc}
	...

08000560 <SH1107_On>:

/***************************************************************************//**
 * @brief SH1107 on with reset pin.
 *
 *******************************************************************************/
void SH1107_On(void) {
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RES_GPIO_Port, LCD_RES_Pin, GPIO_PIN_SET);
 8000564:	2201      	movs	r2, #1
 8000566:	f44f 7180 	mov.w	r1, #256	; 0x100
 800056a:	4802      	ldr	r0, [pc, #8]	; (8000574 <SH1107_On+0x14>)
 800056c:	f002 f8d9 	bl	8002722 <HAL_GPIO_WritePin>
}
 8000570:	bf00      	nop
 8000572:	bd80      	pop	{r7, pc}
 8000574:	40010c00 	.word	0x40010c00

08000578 <SH1107_Off>:

/***************************************************************************//**
 * @brief SH1107 off with reset pin.
 *
 *******************************************************************************/
void SH1107_Off(void) {
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RES_GPIO_Port, LCD_RES_Pin, GPIO_PIN_RESET);
 800057c:	2200      	movs	r2, #0
 800057e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000582:	4802      	ldr	r0, [pc, #8]	; (800058c <SH1107_Off+0x14>)
 8000584:	f002 f8cd 	bl	8002722 <HAL_GPIO_WritePin>
}
 8000588:	bf00      	nop
 800058a:	bd80      	pop	{r7, pc}
 800058c:	40010c00 	.word	0x40010c00

08000590 <SH1107_WriteCommand>:
 * @brief  			Send a byte to the command register
 *
 * @param 	byte	data in byte format for writing
 *
 *******************************************************************************/
void SH1107_WriteCommand(uint8_t byte) {
 8000590:	b580      	push	{r7, lr}
 8000592:	b086      	sub	sp, #24
 8000594:	af04      	add	r7, sp, #16
 8000596:	4603      	mov	r3, r0
 8000598:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&SH1107_I2C_PORT, SH1107_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800059a:	f04f 33ff 	mov.w	r3, #4294967295
 800059e:	9302      	str	r3, [sp, #8]
 80005a0:	2301      	movs	r3, #1
 80005a2:	9301      	str	r3, [sp, #4]
 80005a4:	1dfb      	adds	r3, r7, #7
 80005a6:	9300      	str	r3, [sp, #0]
 80005a8:	2301      	movs	r3, #1
 80005aa:	2200      	movs	r2, #0
 80005ac:	2178      	movs	r1, #120	; 0x78
 80005ae:	4803      	ldr	r0, [pc, #12]	; (80005bc <SH1107_WriteCommand+0x2c>)
 80005b0:	f002 fa2c 	bl	8002a0c <HAL_I2C_Mem_Write>
}
 80005b4:	bf00      	nop
 80005b6:	3708      	adds	r7, #8
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	200004ac 	.word	0x200004ac

080005c0 <SH1107_WriteData>:
 *
 * @param 	buffer		data in pointer format for writing
 * @param 	buff_size	data size in size_t format for writing
 *
 *******************************************************************************/
void SH1107_WriteData(uint8_t* buffer, size_t buff_size) {
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b086      	sub	sp, #24
 80005c4:	af04      	add	r7, sp, #16
 80005c6:	6078      	str	r0, [r7, #4]
 80005c8:	6039      	str	r1, [r7, #0]
	HAL_I2C_Mem_Write(&SH1107_I2C_PORT, SH1107_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80005ca:	683b      	ldr	r3, [r7, #0]
 80005cc:	b29b      	uxth	r3, r3
 80005ce:	f04f 32ff 	mov.w	r2, #4294967295
 80005d2:	9202      	str	r2, [sp, #8]
 80005d4:	9301      	str	r3, [sp, #4]
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	9300      	str	r3, [sp, #0]
 80005da:	2301      	movs	r3, #1
 80005dc:	2240      	movs	r2, #64	; 0x40
 80005de:	2178      	movs	r1, #120	; 0x78
 80005e0:	4803      	ldr	r0, [pc, #12]	; (80005f0 <SH1107_WriteData+0x30>)
 80005e2:	f002 fa13 	bl	8002a0c <HAL_I2C_Mem_Write>
}
 80005e6:	bf00      	nop
 80005e8:	3708      	adds	r7, #8
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	200004ac 	.word	0x200004ac

080005f4 <SH1107_ChangePageAddress>:
 *
 * @param 	add			page address in unsigned char format between 0~SH1107_PAGE
 *
 *******************************************************************************/
void SH1107_ChangePageAddress(unsigned char add)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b086      	sub	sp, #24
 80005f8:	af04      	add	r7, sp, #16
 80005fa:	4603      	mov	r3, r0
 80005fc:	71fb      	strb	r3, [r7, #7]
	add=0xb0|add;
 80005fe:	79fb      	ldrb	r3, [r7, #7]
 8000600:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8000604:	b2db      	uxtb	r3, r3
 8000606:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&SH1107_I2C_PORT, SH1107_I2C_ADDR, 0x80, 1, &add, 1, HAL_MAX_DELAY);
 8000608:	f04f 33ff 	mov.w	r3, #4294967295
 800060c:	9302      	str	r3, [sp, #8]
 800060e:	2301      	movs	r3, #1
 8000610:	9301      	str	r3, [sp, #4]
 8000612:	1dfb      	adds	r3, r7, #7
 8000614:	9300      	str	r3, [sp, #0]
 8000616:	2301      	movs	r3, #1
 8000618:	2280      	movs	r2, #128	; 0x80
 800061a:	2178      	movs	r1, #120	; 0x78
 800061c:	4803      	ldr	r0, [pc, #12]	; (800062c <SH1107_ChangePageAddress+0x38>)
 800061e:	f002 f9f5 	bl	8002a0c <HAL_I2C_Mem_Write>
	return;
 8000622:	bf00      	nop
}
 8000624:	3708      	adds	r7, #8
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	200004ac 	.word	0x200004ac

08000630 <SH1107_ChangeColumnAddress>:
 *
 * @param 	add			Column address in unsigned char format between 0~SH1107_HEIGHT
 *
 *******************************************************************************/
void SH1107_ChangeColumnAddress(unsigned char add)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b084      	sub	sp, #16
 8000634:	af00      	add	r7, sp, #0
 8000636:	4603      	mov	r3, r0
 8000638:	71fb      	strb	r3, [r7, #7]
	uint8_t byte =(0x10|(add>>4));
 800063a:	79fb      	ldrb	r3, [r7, #7]
 800063c:	091b      	lsrs	r3, r3, #4
 800063e:	b2db      	uxtb	r3, r3
 8000640:	f043 0310 	orr.w	r3, r3, #16
 8000644:	73fb      	strb	r3, [r7, #15]
	SH1107_WriteCommand(byte);
 8000646:	7bfb      	ldrb	r3, [r7, #15]
 8000648:	4618      	mov	r0, r3
 800064a:	f7ff ffa1 	bl	8000590 <SH1107_WriteCommand>

	byte =(0x0f&add);
 800064e:	79fb      	ldrb	r3, [r7, #7]
 8000650:	f003 030f 	and.w	r3, r3, #15
 8000654:	73fb      	strb	r3, [r7, #15]
	SH1107_WriteCommand(byte);
 8000656:	7bfb      	ldrb	r3, [r7, #15]
 8000658:	4618      	mov	r0, r3
 800065a:	f7ff ff99 	bl	8000590 <SH1107_WriteCommand>

	return;
 800065e:	bf00      	nop
}
 8000660:	3710      	adds	r7, #16
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
	...

08000668 <SH1107_Init>:

/***************************************************************************//**
 * @brief  				Initialize the oled screen
 *
 *******************************************************************************/
void SH1107_Init(void) {
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0

	/* Reset OLED */
	SH1107_Reset();
 800066c:	f7ff ff6c 	bl	8000548 <SH1107_Reset>
	/* Wait for the screen to boot */
	HAL_Delay(100);
 8000670:	2064      	movs	r0, #100	; 0x64
 8000672:	f001 f8f7 	bl	8001864 <HAL_Delay>

	SH1107_On();
 8000676:	f7ff ff73 	bl	8000560 <SH1107_On>
	HAL_Delay(100);
 800067a:	2064      	movs	r0, #100	; 0x64
 800067c:	f001 f8f2 	bl	8001864 <HAL_Delay>

	/* Init OLED */
	SH1107_WriteCommand(SH1107_DISPLAY_OFF); 			/* display off */
 8000680:	20ae      	movs	r0, #174	; 0xae
 8000682:	f7ff ff85 	bl	8000590 <SH1107_WriteCommand>

	SH1107_WriteCommand(SH1107_SET_DISPLAY_CLOCK); 		/* set display clock divide ratio/oscillator frequency */
 8000686:	20d5      	movs	r0, #213	; 0xd5
 8000688:	f7ff ff82 	bl	8000590 <SH1107_WriteCommand>
	SH1107_WriteCommand(0x51); 							/* set divide ratio F0 */
 800068c:	2051      	movs	r0, #81	; 0x51
 800068e:	f7ff ff7f 	bl	8000590 <SH1107_WriteCommand>

	SH1107_WriteCommand(SH1107_ADDR_MODE); 				/* Set Memory Addressing Mode */
 8000692:	2020      	movs	r0, #32
 8000694:	f7ff ff7c 	bl	8000590 <SH1107_WriteCommand>
	SH1107_WriteCommand(0x00); 							/* 00b,Horizontal Addressing Mode;
 8000698:	2000      	movs	r0, #0
 800069a:	f7ff ff79 	bl	8000590 <SH1107_WriteCommand>
	 * 01b,Vertical Addressing Mode;
	 * 10b,Page Addressing Mode (RESET);
	 * 11b,Invalid */

	SH1107_WriteCommand(SH1107_SET_MULTIPLEX_RATIO); 	/* set multiplex ratio(1 to 64) - CHECK */
 800069e:	20a8      	movs	r0, #168	; 0xa8
 80006a0:	f7ff ff76 	bl	8000590 <SH1107_WriteCommand>
	SH1107_WriteCommand(0x3F);
 80006a4:	203f      	movs	r0, #63	; 0x3f
 80006a6:	f7ff ff73 	bl	8000590 <SH1107_WriteCommand>

	SH1107_WriteCommand(SH1107_SET_START_LINE); 		/* set start line address - CHECK */
 80006aa:	20dc      	movs	r0, #220	; 0xdc
 80006ac:	f7ff ff70 	bl	8000590 <SH1107_WriteCommand>
	SH1107_WriteCommand(0x00);
 80006b0:	2000      	movs	r0, #0
 80006b2:	f7ff ff6d 	bl	8000590 <SH1107_WriteCommand>

	SH1107_WriteCommand(SH1107_SET_DISPLAY_OFFSET); 	/* set display offset - CHECK */
 80006b6:	20d3      	movs	r0, #211	; 0xd3
 80006b8:	f7ff ff6a 	bl	8000590 <SH1107_WriteCommand>
	SH1107_WriteCommand(0x60); 							/* not offset */
 80006bc:	2060      	movs	r0, #96	; 0x60
 80006be:	f7ff ff67 	bl	8000590 <SH1107_WriteCommand>

	SH1107_WriteCommand(SH1107_SET_DCDC_SETTINGS); 		/* Set DC-DC Setting: */
 80006c2:	20ad      	movs	r0, #173	; 0xad
 80006c4:	f7ff ff64 	bl	8000590 <SH1107_WriteCommand>
	SH1107_WriteCommand(0x80); 							/* Set external VPP */
 80006c8:	2080      	movs	r0, #128	; 0x80
 80006ca:	f7ff ff61 	bl	8000590 <SH1107_WriteCommand>

#ifdef SH1107_INVERSE_COLOR
	SH1107_WriteCommand(SH1107_INVERT_ON); 				/* set inverse color */
#else
	SH1107_WriteCommand(SH1107_INVERT_OFF); 			/* set normal color */
 80006ce:	20a6      	movs	r0, #166	; 0xa6
 80006d0:	f7ff ff5e 	bl	8000590 <SH1107_WriteCommand>
#endif

	SH1107_WriteCommand(SH1107_RAM_ON); 				/* 0xa4,Output follows RAM content;
 80006d4:	20a4      	movs	r0, #164	; 0xa4
 80006d6:	f7ff ff5b 	bl	8000590 <SH1107_WriteCommand>
	 * 0xa5,Output ignores RAM content */

#ifdef SH1107_MIRROR_HORIZ
	SH1107_WriteCommand(SH1107_SET_REMAP_L_TO_R); 		/* Mirror horizontally */
#else
	SH1107_WriteCommand(SH1107_SET_REMAP_R_TO_L); 		/* set segment re-map 0 to 127 - CHECK A1 */
 80006da:	20a0      	movs	r0, #160	; 0xa0
 80006dc:	f7ff ff58 	bl	8000590 <SH1107_WriteCommand>
#endif

#ifdef SH1107_MIRROR_VERT
	SH1107_WriteCommand(SH1107_SET_REMAP_T_TO_D); 		/* Mirror vertically */
#else
	SH1107_WriteCommand(SH1107_SET_REMAP_D_TO_T); 		/* Set COM Output Scan Direction */
 80006e0:	20c0      	movs	r0, #192	; 0xc0
 80006e2:	f7ff ff55 	bl	8000590 <SH1107_WriteCommand>
#endif

	SH1107_WriteCommand(SH1107_SET_CONTRAST); 			/* set contrast control register - CHECK */
 80006e6:	2081      	movs	r0, #129	; 0x81
 80006e8:	f7ff ff52 	bl	8000590 <SH1107_WriteCommand>
	SH1107_WriteCommand(0xFF);
 80006ec:	20ff      	movs	r0, #255	; 0xff
 80006ee:	f7ff ff4f 	bl	8000590 <SH1107_WriteCommand>

	SH1107_WriteCommand(SH1107_SET_PRECHARGE_PERIOD); 	/* set pre-charge period */
 80006f2:	20d9      	movs	r0, #217	; 0xd9
 80006f4:	f7ff ff4c 	bl	8000590 <SH1107_WriteCommand>
	SH1107_WriteCommand(0x22);
 80006f8:	2022      	movs	r0, #34	; 0x22
 80006fa:	f7ff ff49 	bl	8000590 <SH1107_WriteCommand>

	SH1107_WriteCommand(SH1107_SET_VCOM_DESELECT); 		/* set vcomh */
 80006fe:	20db      	movs	r0, #219	; 0xdb
 8000700:	f7ff ff46 	bl	8000590 <SH1107_WriteCommand>
	SH1107_WriteCommand(0x20); 							/* 0x20,0.77xVcc */
 8000704:	2020      	movs	r0, #32
 8000706:	f7ff ff43 	bl	8000590 <SH1107_WriteCommand>

	SH1107_WriteCommand(SH1107_DISPLAY_ON); 			/* turn on SH1107 panel */
 800070a:	20af      	movs	r0, #175	; 0xaf
 800070c:	f7ff ff40 	bl	8000590 <SH1107_WriteCommand>

	/* Clear screen */
	SH1107_Fill(Black);
 8000710:	2000      	movs	r0, #0
 8000712:	f000 f80f 	bl	8000734 <SH1107_Fill>

	/* Flush buffer to screen */
	SH1107_UpdateScreen();
 8000716:	f000 f825 	bl	8000764 <SH1107_UpdateScreen>

	/* Set default values for screen object */
	SH1107.CurrentX = 0;
 800071a:	4b05      	ldr	r3, [pc, #20]	; (8000730 <SH1107_Init+0xc8>)
 800071c:	2200      	movs	r2, #0
 800071e:	801a      	strh	r2, [r3, #0]
	SH1107.CurrentY = 0;
 8000720:	4b03      	ldr	r3, [pc, #12]	; (8000730 <SH1107_Init+0xc8>)
 8000722:	2200      	movs	r2, #0
 8000724:	805a      	strh	r2, [r3, #2]

	SH1107.Initialized = 1;
 8000726:	4b02      	ldr	r3, [pc, #8]	; (8000730 <SH1107_Init+0xc8>)
 8000728:	2201      	movs	r2, #1
 800072a:	715a      	strb	r2, [r3, #5]

}
 800072c:	bf00      	nop
 800072e:	bd80      	pop	{r7, pc}
 8000730:	20000490 	.word	0x20000490

08000734 <SH1107_Fill>:
 * @brief  			Fill the whole screen with the given color
 *
 * @param	color	The color of the lines. Color is enumeration with SH1107_COLOR_t. See sh1107.h for more details about color.
 *
 *******************************************************************************/
void SH1107_Fill(SH1107_COLOR_t color) {
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	4603      	mov	r3, r0
 800073c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SH1107_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SH1107_Buffer));
 800073e:	79fb      	ldrb	r3, [r7, #7]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d101      	bne.n	8000748 <SH1107_Fill+0x14>
 8000744:	2300      	movs	r3, #0
 8000746:	e000      	b.n	800074a <SH1107_Fill+0x16>
 8000748:	23ff      	movs	r3, #255	; 0xff
 800074a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800074e:	4619      	mov	r1, r3
 8000750:	4803      	ldr	r0, [pc, #12]	; (8000760 <SH1107_Fill+0x2c>)
 8000752:	f004 fb3d 	bl	8004dd0 <memset>
}
 8000756:	bf00      	nop
 8000758:	3708      	adds	r7, #8
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	20000090 	.word	0x20000090

08000764 <SH1107_UpdateScreen>:

/***************************************************************************//**
 * @brief  			Write the screen buffer with changed to the screen
 *
 *******************************************************************************/
void SH1107_UpdateScreen(void) {
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0

	unsigned char i;
	for(i=0;i<SH1107_PAGE;i++)
 800076a:	2300      	movs	r3, #0
 800076c:	71fb      	strb	r3, [r7, #7]
 800076e:	e011      	b.n	8000794 <SH1107_UpdateScreen+0x30>
	{
		SH1107_ChangePageAddress(i);
 8000770:	79fb      	ldrb	r3, [r7, #7]
 8000772:	4618      	mov	r0, r3
 8000774:	f7ff ff3e 	bl	80005f4 <SH1107_ChangePageAddress>
		SH1107_ChangeColumnAddress(0x00);
 8000778:	2000      	movs	r0, #0
 800077a:	f7ff ff59 	bl	8000630 <SH1107_ChangeColumnAddress>
		SH1107_WriteData(&SH1107_Buffer[i*SH1107_WIDTH], SH1107_WIDTH);
 800077e:	79fb      	ldrb	r3, [r7, #7]
 8000780:	019b      	lsls	r3, r3, #6
 8000782:	4a08      	ldr	r2, [pc, #32]	; (80007a4 <SH1107_UpdateScreen+0x40>)
 8000784:	4413      	add	r3, r2
 8000786:	2140      	movs	r1, #64	; 0x40
 8000788:	4618      	mov	r0, r3
 800078a:	f7ff ff19 	bl	80005c0 <SH1107_WriteData>
	for(i=0;i<SH1107_PAGE;i++)
 800078e:	79fb      	ldrb	r3, [r7, #7]
 8000790:	3301      	adds	r3, #1
 8000792:	71fb      	strb	r3, [r7, #7]
 8000794:	79fb      	ldrb	r3, [r7, #7]
 8000796:	2b0f      	cmp	r3, #15
 8000798:	d9ea      	bls.n	8000770 <SH1107_UpdateScreen+0xc>
	}
	return;
 800079a:	bf00      	nop
}
 800079c:	3708      	adds	r7, #8
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	20000090 	.word	0x20000090

080007a8 <SPI_Write>:
/*============================================================================*/

/*============================================================================*/
/* Implementation of functions                                                */
/*============================================================================*/
HAL_StatusTypeDef SPI_Write(int id, uint8_t *pData, uint16_t Size){
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b086      	sub	sp, #24
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	60f8      	str	r0, [r7, #12]
 80007b0:	60b9      	str	r1, [r7, #8]
 80007b2:	4613      	mov	r3, r2
 80007b4:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef status = HAL_ERROR;
 80007b6:	2301      	movs	r3, #1
 80007b8:	75fb      	strb	r3, [r7, #23]
	uint8_t rData[2];
	HAL_SPI3_ReadWrite(DIGIPOT_SPI3_SLV,pData,&rData[0],Size);
 80007ba:	88fb      	ldrh	r3, [r7, #6]
 80007bc:	f107 0214 	add.w	r2, r7, #20
 80007c0:	68b9      	ldr	r1, [r7, #8]
 80007c2:	2002      	movs	r0, #2
 80007c4:	f000 fdae 	bl	8001324 <HAL_SPI3_ReadWrite>
	/*
	AD529x_CS_LOW();
	status = HAL_SPI_Transmit(&hspi3, pData, Size, 10000);
	HAL_Delay(20);
	AD529x_CS_HIGH();*/
	return status;
 80007c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80007ca:	4618      	mov	r0, r3
 80007cc:	3718      	adds	r7, #24
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}

080007d2 <AD529x_SetRegister>:


void AD529x_SetRegister(unsigned char command, unsigned short data)
{
 80007d2:	b580      	push	{r7, lr}
 80007d4:	b084      	sub	sp, #16
 80007d6:	af00      	add	r7, sp, #0
 80007d8:	4603      	mov	r3, r0
 80007da:	460a      	mov	r2, r1
 80007dc:	71fb      	strb	r3, [r7, #7]
 80007de:	4613      	mov	r3, r2
 80007e0:	80bb      	strh	r3, [r7, #4]
	unsigned char dataBuf[2] = {0, 0};
 80007e2:	2300      	movs	r3, #0
 80007e4:	81bb      	strh	r3, [r7, #12]
	data &= 0x3FF;
 80007e6:	88bb      	ldrh	r3, [r7, #4]
 80007e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80007ec:	80bb      	strh	r3, [r7, #4]
	command &= 0x0F;
 80007ee:	79fb      	ldrb	r3, [r7, #7]
 80007f0:	f003 030f 	and.w	r3, r3, #15
 80007f4:	71fb      	strb	r3, [r7, #7]
	dataBuf[0] = (command << 2) + ((data & 0x0300) >> 8);
 80007f6:	79fb      	ldrb	r3, [r7, #7]
 80007f8:	009b      	lsls	r3, r3, #2
 80007fa:	b2da      	uxtb	r2, r3
 80007fc:	88bb      	ldrh	r3, [r7, #4]
 80007fe:	121b      	asrs	r3, r3, #8
 8000800:	b2db      	uxtb	r3, r3
 8000802:	f003 0303 	and.w	r3, r3, #3
 8000806:	b2db      	uxtb	r3, r3
 8000808:	4413      	add	r3, r2
 800080a:	b2db      	uxtb	r3, r3
 800080c:	733b      	strb	r3, [r7, #12]
	dataBuf[1] = (data & 0x00FF);
 800080e:	88bb      	ldrh	r3, [r7, #4]
 8000810:	b2db      	uxtb	r3, r3
 8000812:	737b      	strb	r3, [r7, #13]
	SPI_Write(AD529x_SLAVE_ID, dataBuf, 2);
 8000814:	f107 030c 	add.w	r3, r7, #12
 8000818:	2202      	movs	r2, #2
 800081a:	4619      	mov	r1, r3
 800081c:	2001      	movs	r0, #1
 800081e:	f7ff ffc3 	bl	80007a8 <SPI_Write>

}
 8000822:	bf00      	nop
 8000824:	3710      	adds	r7, #16
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
	...

0800082c <AD529x_SetResistor>:


void AD529x_SetResistor(uint32_t res)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b084      	sub	sp, #16
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
	uint32_t value = ((MAX_RES_VALUE-res)  * 1024 ) / MAX_RES_VALUE;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	f5c3 3343 	rsb	r3, r3, #199680	; 0x30c00
 800083a:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800083e:	029b      	lsls	r3, r3, #10
 8000840:	099b      	lsrs	r3, r3, #6
 8000842:	4a0a      	ldr	r2, [pc, #40]	; (800086c <AD529x_SetResistor+0x40>)
 8000844:	fba2 2303 	umull	r2, r3, r2, r3
 8000848:	099b      	lsrs	r3, r3, #6
 800084a:	60fb      	str	r3, [r7, #12]
	if(res == 0){
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d102      	bne.n	8000858 <AD529x_SetResistor+0x2c>
		value = 1023;
 8000852:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8000856:	60fb      	str	r3, [r7, #12]
	}
	//dbprintf("*** Write Pot Value : %d (%d ohm)\n\r",value,res);
	AD529x_SetRegister(AD529x_WRITE_RDAC, value);
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	b29b      	uxth	r3, r3
 800085c:	4619      	mov	r1, r3
 800085e:	2001      	movs	r0, #1
 8000860:	f7ff ffb7 	bl	80007d2 <AD529x_SetRegister>

}
 8000864:	bf00      	nop
 8000866:	3710      	adds	r7, #16
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	053e2d63 	.word	0x053e2d63

08000870 <AD529x_Init>:


char AD529x_Init()
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
	char status = -1;
 8000876:	23ff      	movs	r3, #255	; 0xff
 8000878:	71fb      	strb	r3, [r7, #7]
	//AD527x_RESET_OUT;
	//AD527x_RESET_HIGH;

	/* setup AD527x */
	/* Calibration mode set to normal mode. RDAC register write proction closed. */
	AD529x_SetRegister(AD529x_WRITE_CONTENT,(AD529x_C2 | AD529x_C1));
 800087a:	2106      	movs	r1, #6
 800087c:	2006      	movs	r0, #6
 800087e:	f7ff ffa8 	bl	80007d2 <AD529x_SetRegister>

	return status;
 8000882:	79fb      	ldrb	r3, [r7, #7]
}
 8000884:	4618      	mov	r0, r3
 8000886:	3708      	adds	r7, #8
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}

0800088c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000892:	4b14      	ldr	r3, [pc, #80]	; (80008e4 <MX_DMA_Init+0x58>)
 8000894:	695b      	ldr	r3, [r3, #20]
 8000896:	4a13      	ldr	r2, [pc, #76]	; (80008e4 <MX_DMA_Init+0x58>)
 8000898:	f043 0301 	orr.w	r3, r3, #1
 800089c:	6153      	str	r3, [r2, #20]
 800089e:	4b11      	ldr	r3, [pc, #68]	; (80008e4 <MX_DMA_Init+0x58>)
 80008a0:	695b      	ldr	r3, [r3, #20]
 80008a2:	f003 0301 	and.w	r3, r3, #1
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80008aa:	2200      	movs	r2, #0
 80008ac:	2100      	movs	r1, #0
 80008ae:	200c      	movs	r0, #12
 80008b0:	f001 f8d3 	bl	8001a5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80008b4:	200c      	movs	r0, #12
 80008b6:	f001 f8ec 	bl	8001a92 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80008ba:	2200      	movs	r2, #0
 80008bc:	2100      	movs	r1, #0
 80008be:	200d      	movs	r0, #13
 80008c0:	f001 f8cb 	bl	8001a5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80008c4:	200d      	movs	r0, #13
 80008c6:	f001 f8e4 	bl	8001a92 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80008ca:	2200      	movs	r2, #0
 80008cc:	2100      	movs	r1, #0
 80008ce:	200e      	movs	r0, #14
 80008d0:	f001 f8c3 	bl	8001a5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80008d4:	200e      	movs	r0, #14
 80008d6:	f001 f8dc 	bl	8001a92 <HAL_NVIC_EnableIRQ>

}
 80008da:	bf00      	nop
 80008dc:	3708      	adds	r7, #8
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	40021000 	.word	0x40021000

080008e8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b088      	sub	sp, #32
 80008ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ee:	f107 0310 	add.w	r3, r7, #16
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
 80008f6:	605a      	str	r2, [r3, #4]
 80008f8:	609a      	str	r2, [r3, #8]
 80008fa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008fc:	4b5c      	ldr	r3, [pc, #368]	; (8000a70 <MX_GPIO_Init+0x188>)
 80008fe:	699b      	ldr	r3, [r3, #24]
 8000900:	4a5b      	ldr	r2, [pc, #364]	; (8000a70 <MX_GPIO_Init+0x188>)
 8000902:	f043 0310 	orr.w	r3, r3, #16
 8000906:	6193      	str	r3, [r2, #24]
 8000908:	4b59      	ldr	r3, [pc, #356]	; (8000a70 <MX_GPIO_Init+0x188>)
 800090a:	699b      	ldr	r3, [r3, #24]
 800090c:	f003 0310 	and.w	r3, r3, #16
 8000910:	60fb      	str	r3, [r7, #12]
 8000912:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000914:	4b56      	ldr	r3, [pc, #344]	; (8000a70 <MX_GPIO_Init+0x188>)
 8000916:	699b      	ldr	r3, [r3, #24]
 8000918:	4a55      	ldr	r2, [pc, #340]	; (8000a70 <MX_GPIO_Init+0x188>)
 800091a:	f043 0320 	orr.w	r3, r3, #32
 800091e:	6193      	str	r3, [r2, #24]
 8000920:	4b53      	ldr	r3, [pc, #332]	; (8000a70 <MX_GPIO_Init+0x188>)
 8000922:	699b      	ldr	r3, [r3, #24]
 8000924:	f003 0320 	and.w	r3, r3, #32
 8000928:	60bb      	str	r3, [r7, #8]
 800092a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800092c:	4b50      	ldr	r3, [pc, #320]	; (8000a70 <MX_GPIO_Init+0x188>)
 800092e:	699b      	ldr	r3, [r3, #24]
 8000930:	4a4f      	ldr	r2, [pc, #316]	; (8000a70 <MX_GPIO_Init+0x188>)
 8000932:	f043 0304 	orr.w	r3, r3, #4
 8000936:	6193      	str	r3, [r2, #24]
 8000938:	4b4d      	ldr	r3, [pc, #308]	; (8000a70 <MX_GPIO_Init+0x188>)
 800093a:	699b      	ldr	r3, [r3, #24]
 800093c:	f003 0304 	and.w	r3, r3, #4
 8000940:	607b      	str	r3, [r7, #4]
 8000942:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000944:	4b4a      	ldr	r3, [pc, #296]	; (8000a70 <MX_GPIO_Init+0x188>)
 8000946:	699b      	ldr	r3, [r3, #24]
 8000948:	4a49      	ldr	r2, [pc, #292]	; (8000a70 <MX_GPIO_Init+0x188>)
 800094a:	f043 0308 	orr.w	r3, r3, #8
 800094e:	6193      	str	r3, [r2, #24]
 8000950:	4b47      	ldr	r3, [pc, #284]	; (8000a70 <MX_GPIO_Init+0x188>)
 8000952:	699b      	ldr	r3, [r3, #24]
 8000954:	f003 0308 	and.w	r3, r3, #8
 8000958:	603b      	str	r3, [r7, #0]
 800095a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ADC_Current_INP_Ch1_Pin|ADC_Current_INP_Ch3_Pin|ADC_Current_INP_Ch5_Pin|SHIFT_REG_LATCH_Pin
 800095c:	2200      	movs	r2, #0
 800095e:	f641 2107 	movw	r1, #6663	; 0x1a07
 8000962:	4844      	ldr	r0, [pc, #272]	; (8000a74 <MX_GPIO_Init+0x18c>)
 8000964:	f001 fedd 	bl	8002722 <HAL_GPIO_WritePin>
                          |INT_LED1_Pin|INT_LED2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DAC_20mA_SEL_Pin|DAC_40mA_SEL_Pin|DAC_100mA_SEL_Pin|TP6_Pin
 8000968:	2200      	movs	r2, #0
 800096a:	f641 5107 	movw	r1, #7431	; 0x1d07
 800096e:	4842      	ldr	r0, [pc, #264]	; (8000a78 <MX_GPIO_Init+0x190>)
 8000970:	f001 fed7 	bl	8002722 <HAL_GPIO_WritePin>
                          |TP7_Pin|TP8_Pin|LCD_RES_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SHIFT_REG_CS_GPIO_Port, SHIFT_REG_CS_Pin, GPIO_PIN_SET);
 8000974:	2201      	movs	r2, #1
 8000976:	f44f 7180 	mov.w	r1, #256	; 0x100
 800097a:	483e      	ldr	r0, [pc, #248]	; (8000a74 <MX_GPIO_Init+0x18c>)
 800097c:	f001 fed1 	bl	8002722 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LVDT_POT_CS_GPIO_Port, LVDT_POT_CS_Pin, GPIO_PIN_RESET);
 8000980:	2200      	movs	r2, #0
 8000982:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000986:	483d      	ldr	r0, [pc, #244]	; (8000a7c <MX_GPIO_Init+0x194>)
 8000988:	f001 fecb 	bl	8002722 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = ADC_Current_INP_Ch1_Pin|ADC_Current_INP_Ch3_Pin|ADC_Current_INP_Ch5_Pin|SHIFT_REG_CS_Pin
 800098c:	f641 3307 	movw	r3, #6919	; 0x1b07
 8000990:	613b      	str	r3, [r7, #16]
                          |SHIFT_REG_LATCH_Pin|INT_LED1_Pin|INT_LED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000992:	2301      	movs	r3, #1
 8000994:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099a:	2302      	movs	r3, #2
 800099c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800099e:	f107 0310 	add.w	r3, r7, #16
 80009a2:	4619      	mov	r1, r3
 80009a4:	4833      	ldr	r0, [pc, #204]	; (8000a74 <MX_GPIO_Init+0x18c>)
 80009a6:	f001 fd11 	bl	80023cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = Encoder_Phase_A_Pin|Encoder_Phase_B_Pin;
 80009aa:	230a      	movs	r3, #10
 80009ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ae:	2300      	movs	r3, #0
 80009b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009b2:	2301      	movs	r3, #1
 80009b4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b6:	f107 0310 	add.w	r3, r7, #16
 80009ba:	4619      	mov	r1, r3
 80009bc:	482f      	ldr	r0, [pc, #188]	; (8000a7c <MX_GPIO_Init+0x194>)
 80009be:	f001 fd05 	bl	80023cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Encoder_SW_Pin;
 80009c2:	2304      	movs	r3, #4
 80009c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009c6:	4b2e      	ldr	r3, [pc, #184]	; (8000a80 <MX_GPIO_Init+0x198>)
 80009c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009ca:	2301      	movs	r3, #1
 80009cc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Encoder_SW_GPIO_Port, &GPIO_InitStruct);
 80009ce:	f107 0310 	add.w	r3, r7, #16
 80009d2:	4619      	mov	r1, r3
 80009d4:	4829      	ldr	r0, [pc, #164]	; (8000a7c <MX_GPIO_Init+0x194>)
 80009d6:	f001 fcf9 	bl	80023cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STM_MODE_SEL_Pin;
 80009da:	2320      	movs	r3, #32
 80009dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009de:	4b28      	ldr	r3, [pc, #160]	; (8000a80 <MX_GPIO_Init+0x198>)
 80009e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e2:	2300      	movs	r3, #0
 80009e4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(STM_MODE_SEL_GPIO_Port, &GPIO_InitStruct);
 80009e6:	f107 0310 	add.w	r3, r7, #16
 80009ea:	4619      	mov	r1, r3
 80009ec:	4821      	ldr	r0, [pc, #132]	; (8000a74 <MX_GPIO_Init+0x18c>)
 80009ee:	f001 fced 	bl	80023cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DAC_20mA_SEL_Pin|DAC_40mA_SEL_Pin|DAC_100mA_SEL_Pin|TP6_Pin
 80009f2:	f641 5307 	movw	r3, #7431	; 0x1d07
 80009f6:	613b      	str	r3, [r7, #16]
                          |TP7_Pin|TP8_Pin|LCD_RES_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f8:	2301      	movs	r3, #1
 80009fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fc:	2300      	movs	r3, #0
 80009fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a00:	2302      	movs	r3, #2
 8000a02:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a04:	f107 0310 	add.w	r3, r7, #16
 8000a08:	4619      	mov	r1, r3
 8000a0a:	481b      	ldr	r0, [pc, #108]	; (8000a78 <MX_GPIO_Init+0x190>)
 8000a0c:	f001 fcde 	bl	80023cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = EXT_BTN1_Pin|EXT_BTN2_Pin;
 8000a10:	23c0      	movs	r3, #192	; 0xc0
 8000a12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a14:	4b1a      	ldr	r3, [pc, #104]	; (8000a80 <MX_GPIO_Init+0x198>)
 8000a16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a1c:	f107 0310 	add.w	r3, r7, #16
 8000a20:	4619      	mov	r1, r3
 8000a22:	4814      	ldr	r0, [pc, #80]	; (8000a74 <MX_GPIO_Init+0x18c>)
 8000a24:	f001 fcd2 	bl	80023cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LVDT_POT_CS_Pin;
 8000a28:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a2c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a32:	2300      	movs	r3, #0
 8000a34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a36:	2302      	movs	r3, #2
 8000a38:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LVDT_POT_CS_GPIO_Port, &GPIO_InitStruct);
 8000a3a:	f107 0310 	add.w	r3, r7, #16
 8000a3e:	4619      	mov	r1, r3
 8000a40:	480e      	ldr	r0, [pc, #56]	; (8000a7c <MX_GPIO_Init+0x194>)
 8000a42:	f001 fcc3 	bl	80023cc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000a46:	2200      	movs	r2, #0
 8000a48:	2100      	movs	r1, #0
 8000a4a:	2008      	movs	r0, #8
 8000a4c:	f001 f805 	bl	8001a5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000a50:	2008      	movs	r0, #8
 8000a52:	f001 f81e 	bl	8001a92 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000a56:	2200      	movs	r2, #0
 8000a58:	2100      	movs	r1, #0
 8000a5a:	2017      	movs	r0, #23
 8000a5c:	f000 fffd 	bl	8001a5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000a60:	2017      	movs	r0, #23
 8000a62:	f001 f816 	bl	8001a92 <HAL_NVIC_EnableIRQ>

}
 8000a66:	bf00      	nop
 8000a68:	3720      	adds	r7, #32
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	40021000 	.word	0x40021000
 8000a74:	40011000 	.word	0x40011000
 8000a78:	40010c00 	.word	0x40010c00
 8000a7c:	40010800 	.word	0x40010800
 8000a80:	10110000 	.word	0x10110000

08000a84 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000a88:	4b12      	ldr	r3, [pc, #72]	; (8000ad4 <MX_I2C1_Init+0x50>)
 8000a8a:	4a13      	ldr	r2, [pc, #76]	; (8000ad8 <MX_I2C1_Init+0x54>)
 8000a8c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000a8e:	4b11      	ldr	r3, [pc, #68]	; (8000ad4 <MX_I2C1_Init+0x50>)
 8000a90:	4a12      	ldr	r2, [pc, #72]	; (8000adc <MX_I2C1_Init+0x58>)
 8000a92:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a94:	4b0f      	ldr	r3, [pc, #60]	; (8000ad4 <MX_I2C1_Init+0x50>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a9a:	4b0e      	ldr	r3, [pc, #56]	; (8000ad4 <MX_I2C1_Init+0x50>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000aa0:	4b0c      	ldr	r3, [pc, #48]	; (8000ad4 <MX_I2C1_Init+0x50>)
 8000aa2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000aa6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000aa8:	4b0a      	ldr	r3, [pc, #40]	; (8000ad4 <MX_I2C1_Init+0x50>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000aae:	4b09      	ldr	r3, [pc, #36]	; (8000ad4 <MX_I2C1_Init+0x50>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ab4:	4b07      	ldr	r3, [pc, #28]	; (8000ad4 <MX_I2C1_Init+0x50>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000aba:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <MX_I2C1_Init+0x50>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ac0:	4804      	ldr	r0, [pc, #16]	; (8000ad4 <MX_I2C1_Init+0x50>)
 8000ac2:	f001 fe5f 	bl	8002784 <HAL_I2C_Init>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000acc:	f000 f942 	bl	8000d54 <Error_Handler>
  }

}
 8000ad0:	bf00      	nop
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	200004ac 	.word	0x200004ac
 8000ad8:	40005400 	.word	0x40005400
 8000adc:	00061a80 	.word	0x00061a80

08000ae0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b088      	sub	sp, #32
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae8:	f107 0310 	add.w	r3, r7, #16
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
 8000af0:	605a      	str	r2, [r3, #4]
 8000af2:	609a      	str	r2, [r3, #8]
 8000af4:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	4a15      	ldr	r2, [pc, #84]	; (8000b50 <HAL_I2C_MspInit+0x70>)
 8000afc:	4293      	cmp	r3, r2
 8000afe:	d123      	bne.n	8000b48 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b00:	4b14      	ldr	r3, [pc, #80]	; (8000b54 <HAL_I2C_MspInit+0x74>)
 8000b02:	699b      	ldr	r3, [r3, #24]
 8000b04:	4a13      	ldr	r2, [pc, #76]	; (8000b54 <HAL_I2C_MspInit+0x74>)
 8000b06:	f043 0308 	orr.w	r3, r3, #8
 8000b0a:	6193      	str	r3, [r2, #24]
 8000b0c:	4b11      	ldr	r3, [pc, #68]	; (8000b54 <HAL_I2C_MspInit+0x74>)
 8000b0e:	699b      	ldr	r3, [r3, #24]
 8000b10:	f003 0308 	and.w	r3, r3, #8
 8000b14:	60fb      	str	r3, [r7, #12]
 8000b16:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8000b18:	23c0      	movs	r3, #192	; 0xc0
 8000b1a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b1c:	2312      	movs	r3, #18
 8000b1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b20:	2303      	movs	r3, #3
 8000b22:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b24:	f107 0310 	add.w	r3, r7, #16
 8000b28:	4619      	mov	r1, r3
 8000b2a:	480b      	ldr	r0, [pc, #44]	; (8000b58 <HAL_I2C_MspInit+0x78>)
 8000b2c:	f001 fc4e 	bl	80023cc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b30:	4b08      	ldr	r3, [pc, #32]	; (8000b54 <HAL_I2C_MspInit+0x74>)
 8000b32:	69db      	ldr	r3, [r3, #28]
 8000b34:	4a07      	ldr	r2, [pc, #28]	; (8000b54 <HAL_I2C_MspInit+0x74>)
 8000b36:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b3a:	61d3      	str	r3, [r2, #28]
 8000b3c:	4b05      	ldr	r3, [pc, #20]	; (8000b54 <HAL_I2C_MspInit+0x74>)
 8000b3e:	69db      	ldr	r3, [r3, #28]
 8000b40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b44:	60bb      	str	r3, [r7, #8]
 8000b46:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000b48:	bf00      	nop
 8000b4a:	3720      	adds	r7, #32
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	40005400 	.word	0x40005400
 8000b54:	40021000 	.word	0x40021000
 8000b58:	40010c00 	.word	0x40010c00

08000b5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 8000b62:	f000 fe1d 	bl	80017a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b66:	f000 f857 	bl	8000c18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b6a:	f7ff febd 	bl	80008e8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b6e:	f7ff fe8d 	bl	800088c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000b72:	f000 fd11 	bl	8001598 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8000b76:	f000 f95b 	bl	8000e30 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000b7a:	f000 f98d 	bl	8000e98 <MX_SPI2_Init>
  MX_SPI3_Init();
 8000b7e:	f000 f9c3 	bl	8000f08 <MX_SPI3_Init>
  MX_I2C1_Init();
 8000b82:	f7ff ff7f 	bl	8000a84 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
	AD529x_Init();
 8000b86:	f7ff fe73 	bl	8000870 <AD529x_Init>
	SH1107_Init();
 8000b8a:	f7ff fd6d 	bl	8000668 <SH1107_Init>
	LP55231_Init();
 8000b8e:	f7ff fcb7 	bl	8000500 <LP55231_Init>
	memset(gSPI_Tx_Buf,0,SPI_TX_BUF_SIZE);
 8000b92:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b96:	2100      	movs	r1, #0
 8000b98:	4818      	ldr	r0, [pc, #96]	; (8000bfc <main+0xa0>)
 8000b9a:	f004 f919 	bl	8004dd0 <memset>
	//HAL_SPI_TransmitReceive_DMA(&hspi1,gSPI_Tx_Buf, gSPI_Rx_Buf, SPI_TX_BUF_SIZE);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	dbprintf("Rota SPI Test Application");
 8000b9e:	4818      	ldr	r0, [pc, #96]	; (8000c00 <main+0xa4>)
 8000ba0:	f000 fdc6 	bl	8001730 <dbprintf>
			resVal = 0;
		HAL_Delay(20);
	}
#endif
#if 1
	float resVal = 0.0f;
 8000ba4:	f04f 0300 	mov.w	r3, #0
 8000ba8:	607b      	str	r3, [r7, #4]
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		g_PDO.ssi = ssi_read();
 8000baa:	f000 fbe1 	bl	8001370 <ssi_read>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	4a14      	ldr	r2, [pc, #80]	; (8000c04 <main+0xa8>)
 8000bb2:	6053      	str	r3, [r2, #4]
 8000bb4:	4b14      	ldr	r3, [pc, #80]	; (8000c08 <main+0xac>)
 8000bb6:	685b      	ldr	r3, [r3, #4]
		memcpy(&resVal, &g_PDI.resistor,sizeof(float));
 8000bb8:	607b      	str	r3, [r7, #4]
		resVal *= 1000;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	4913      	ldr	r1, [pc, #76]	; (8000c0c <main+0xb0>)
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f7ff fb38 	bl	8000234 <__aeabi_fmul>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	607b      	str	r3, [r7, #4]
		if(resVal > MAX_RES_VALUE)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	4911      	ldr	r1, [pc, #68]	; (8000c10 <main+0xb4>)
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f7ff fc51 	bl	8000474 <__aeabi_fcmpgt>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <main+0x80>
			resVal = MAX_RES_VALUE;
 8000bd8:	4b0d      	ldr	r3, [pc, #52]	; (8000c10 <main+0xb4>)
 8000bda:	607b      	str	r3, [r7, #4]
		AD529x_SetResistor(resVal);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	4618      	mov	r0, r3
 8000be0:	f7ff fc52 	bl	8000488 <__aeabi_f2uiz>
 8000be4:	4603      	mov	r3, r0
 8000be6:	4618      	mov	r0, r3
 8000be8:	f7ff fe20 	bl	800082c <AD529x_SetResistor>
		if(g_comms_mode == COMMS_MODE_PDIO){
 8000bec:	4b09      	ldr	r3, [pc, #36]	; (8000c14 <main+0xb8>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d1da      	bne.n	8000baa <main+0x4e>
			rt_get_io_values();
 8000bf4:	f000 f8e0 	bl	8000db8 <rt_get_io_values>
		g_PDO.ssi = ssi_read();
 8000bf8:	e7d7      	b.n	8000baa <main+0x4e>
 8000bfa:	bf00      	nop
 8000bfc:	20000520 	.word	0x20000520
 8000c00:	0800561c 	.word	0x0800561c
 8000c04:	20000500 	.word	0x20000500
 8000c08:	20000510 	.word	0x20000510
 8000c0c:	447a0000 	.word	0x447a0000
 8000c10:	48435000 	.word	0x48435000
 8000c14:	20000496 	.word	0x20000496

08000c18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b090      	sub	sp, #64	; 0x40
 8000c1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c1e:	f107 0318 	add.w	r3, r7, #24
 8000c22:	2228      	movs	r2, #40	; 0x28
 8000c24:	2100      	movs	r1, #0
 8000c26:	4618      	mov	r0, r3
 8000c28:	f004 f8d2 	bl	8004dd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c2c:	1d3b      	adds	r3, r7, #4
 8000c2e:	2200      	movs	r2, #0
 8000c30:	601a      	str	r2, [r3, #0]
 8000c32:	605a      	str	r2, [r3, #4]
 8000c34:	609a      	str	r2, [r3, #8]
 8000c36:	60da      	str	r2, [r3, #12]
 8000c38:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c3e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c42:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000c44:	2300      	movs	r3, #0
 8000c46:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c54:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000c56:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c5c:	f107 0318 	add.w	r3, r7, #24
 8000c60:	4618      	mov	r0, r3
 8000c62:	f002 f9e9 	bl	8003038 <HAL_RCC_OscConfig>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000c6c:	f000 f872 	bl	8000d54 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c70:	230f      	movs	r3, #15
 8000c72:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c74:	2302      	movs	r3, #2
 8000c76:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c80:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c82:	2300      	movs	r3, #0
 8000c84:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000c86:	1d3b      	adds	r3, r7, #4
 8000c88:	2101      	movs	r1, #1
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f002 fc54 	bl	8003538 <HAL_RCC_ClockConfig>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000c96:	f000 f85d 	bl	8000d54 <Error_Handler>
  }
}
 8000c9a:	bf00      	nop
 8000c9c:	3740      	adds	r7, #64	; 0x40
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
	...

08000ca4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	4603      	mov	r3, r0
 8000cac:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin){
 8000cae:	88fb      	ldrh	r3, [r7, #6]
 8000cb0:	2b80      	cmp	r3, #128	; 0x80
 8000cb2:	d022      	beq.n	8000cfa <HAL_GPIO_EXTI_Callback+0x56>
 8000cb4:	2b80      	cmp	r3, #128	; 0x80
 8000cb6:	dc28      	bgt.n	8000d0a <HAL_GPIO_EXTI_Callback+0x66>
 8000cb8:	2b40      	cmp	r3, #64	; 0x40
 8000cba:	d01a      	beq.n	8000cf2 <HAL_GPIO_EXTI_Callback+0x4e>
 8000cbc:	2b40      	cmp	r3, #64	; 0x40
 8000cbe:	dc24      	bgt.n	8000d0a <HAL_GPIO_EXTI_Callback+0x66>
 8000cc0:	2b04      	cmp	r3, #4
 8000cc2:	d01e      	beq.n	8000d02 <HAL_GPIO_EXTI_Callback+0x5e>
 8000cc4:	2b20      	cmp	r3, #32
 8000cc6:	d120      	bne.n	8000d0a <HAL_GPIO_EXTI_Callback+0x66>
	case STM_MODE_SEL_Pin:
		if(HAL_GPIO_ReadPin(STM_MODE_SEL_GPIO_Port, STM_MODE_SEL_Pin)){
 8000cc8:	2120      	movs	r1, #32
 8000cca:	4812      	ldr	r0, [pc, #72]	; (8000d14 <HAL_GPIO_EXTI_Callback+0x70>)
 8000ccc:	f001 fd12 	bl	80026f4 <HAL_GPIO_ReadPin>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d006      	beq.n	8000ce4 <HAL_GPIO_EXTI_Callback+0x40>
			g_comms_mode = COMMS_MODE_PDIO;
 8000cd6:	4b10      	ldr	r3, [pc, #64]	; (8000d18 <HAL_GPIO_EXTI_Callback+0x74>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	701a      	strb	r2, [r3, #0]
			dbprintf("PDIO Mode");
 8000cdc:	480f      	ldr	r0, [pc, #60]	; (8000d1c <HAL_GPIO_EXTI_Callback+0x78>)
 8000cde:	f000 fd27 	bl	8001730 <dbprintf>
		}else{
			g_comms_mode = COMMS_MODE_CONF;
			dbprintf("CONF Mode");
		}
		break;
 8000ce2:	e012      	b.n	8000d0a <HAL_GPIO_EXTI_Callback+0x66>
			g_comms_mode = COMMS_MODE_CONF;
 8000ce4:	4b0c      	ldr	r3, [pc, #48]	; (8000d18 <HAL_GPIO_EXTI_Callback+0x74>)
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	701a      	strb	r2, [r3, #0]
			dbprintf("CONF Mode");
 8000cea:	480d      	ldr	r0, [pc, #52]	; (8000d20 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000cec:	f000 fd20 	bl	8001730 <dbprintf>
		break;
 8000cf0:	e00b      	b.n	8000d0a <HAL_GPIO_EXTI_Callback+0x66>

	case EXT_BTN1_Pin:
		dbprintf("BTN1 Pressed.");
 8000cf2:	480c      	ldr	r0, [pc, #48]	; (8000d24 <HAL_GPIO_EXTI_Callback+0x80>)
 8000cf4:	f000 fd1c 	bl	8001730 <dbprintf>
		break;
 8000cf8:	e007      	b.n	8000d0a <HAL_GPIO_EXTI_Callback+0x66>
	case EXT_BTN2_Pin:
		dbprintf("BTN2 Pressed.");
 8000cfa:	480b      	ldr	r0, [pc, #44]	; (8000d28 <HAL_GPIO_EXTI_Callback+0x84>)
 8000cfc:	f000 fd18 	bl	8001730 <dbprintf>
		break;
 8000d00:	e003      	b.n	8000d0a <HAL_GPIO_EXTI_Callback+0x66>
	case Encoder_SW_Pin:
		dbprintf("Encoder Button Pressed.");
 8000d02:	480a      	ldr	r0, [pc, #40]	; (8000d2c <HAL_GPIO_EXTI_Callback+0x88>)
 8000d04:	f000 fd14 	bl	8001730 <dbprintf>
		break;
 8000d08:	bf00      	nop
	}
}
 8000d0a:	bf00      	nop
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	40011000 	.word	0x40011000
 8000d18:	20000496 	.word	0x20000496
 8000d1c:	08005638 	.word	0x08005638
 8000d20:	08005644 	.word	0x08005644
 8000d24:	08005650 	.word	0x08005650
 8000d28:	08005660 	.word	0x08005660
 8000d2c:	08005670 	.word	0x08005670

08000d30 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
	dbprintf("%s",__func__);
 8000d38:	4904      	ldr	r1, [pc, #16]	; (8000d4c <HAL_SPI_TxRxCpltCallback+0x1c>)
 8000d3a:	4805      	ldr	r0, [pc, #20]	; (8000d50 <HAL_SPI_TxRxCpltCallback+0x20>)
 8000d3c:	f000 fcf8 	bl	8001730 <dbprintf>
	SPI_DMA_Reset();
 8000d40:	f000 f814 	bl	8000d6c <SPI_DMA_Reset>
}
 8000d44:	bf00      	nop
 8000d46:	3708      	adds	r7, #8
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	080056bc 	.word	0x080056bc
 8000d50:	08005688 	.word	0x08005688

08000d54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	dbprintf("%s",__func__);
 8000d58:	4902      	ldr	r1, [pc, #8]	; (8000d64 <Error_Handler+0x10>)
 8000d5a:	4803      	ldr	r0, [pc, #12]	; (8000d68 <Error_Handler+0x14>)
 8000d5c:	f000 fce8 	bl	8001730 <dbprintf>
  /* USER CODE END Error_Handler_Debug */
}
 8000d60:	bf00      	nop
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	080056d8 	.word	0x080056d8
 8000d68:	08005688 	.word	0x08005688

08000d6c <SPI_DMA_Reset>:

	return RT_PROTO_OK;
}


void SPI_DMA_Reset(){
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
	HAL_SPI_DMAStop(&hspi1);
 8000d70:	480b      	ldr	r0, [pc, #44]	; (8000da0 <SPI_DMA_Reset+0x34>)
 8000d72:	f003 fa99 	bl	80042a8 <HAL_SPI_DMAStop>
	HAL_SPI_TransmitReceive_DMA(&hspi1,gSPI_Tx_Buf, gSPI_Rx_Buf, SPI_RX_BUF_SIZE);
 8000d76:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d7a:	4a0a      	ldr	r2, [pc, #40]	; (8000da4 <SPI_DMA_Reset+0x38>)
 8000d7c:	490a      	ldr	r1, [pc, #40]	; (8000da8 <SPI_DMA_Reset+0x3c>)
 8000d7e:	4808      	ldr	r0, [pc, #32]	; (8000da0 <SPI_DMA_Reset+0x34>)
 8000d80:	f003 f8ac 	bl	8003edc <HAL_SPI_TransmitReceive_DMA>
	prevDMACnt = SPI_RX_BUF_SIZE;
 8000d84:	4b09      	ldr	r3, [pc, #36]	; (8000dac <SPI_DMA_Reset+0x40>)
 8000d86:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d8a:	801a      	strh	r2, [r3, #0]
	rxFrameSize = 0;
 8000d8c:	4b08      	ldr	r3, [pc, #32]	; (8000db0 <SPI_DMA_Reset+0x44>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	601a      	str	r2, [r3, #0]
	prevDMA = SPI_TX_BUF_SIZE;
 8000d92:	4b08      	ldr	r3, [pc, #32]	; (8000db4 <SPI_DMA_Reset+0x48>)
 8000d94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d98:	801a      	strh	r2, [r3, #0]
}
 8000d9a:	bf00      	nop
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	20002ae0 	.word	0x20002ae0
 8000da4:	20002130 	.word	0x20002130
 8000da8:	20000520 	.word	0x20000520
 8000dac:	20000002 	.word	0x20000002
 8000db0:	20000498 	.word	0x20000498
 8000db4:	20000000 	.word	0x20000000

08000db8 <rt_get_io_values>:
	}
}



void rt_get_io_values(void){
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
	//dbprintf("gSPI_Tx_Buf: %02X%02X%02X%02X sizeof(tPDO): %d",gSPI_Tx_Buf[4],gSPI_Tx_Buf[5],gSPI_Tx_Buf[6],gSPI_Tx_Buf[7],sizeof(tPDO));
	uint16_t currentDMACnt = hspi1.hdmarx->Instance->CNDTR;
 8000dbe:	4b15      	ldr	r3, [pc, #84]	; (8000e14 <rt_get_io_values+0x5c>)
 8000dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	80fb      	strh	r3, [r7, #6]
	if((prevDMACnt-currentDMACnt) > 0 && (prevDMACnt-currentDMACnt) != 13){
 8000dc8:	4b13      	ldr	r3, [pc, #76]	; (8000e18 <rt_get_io_values+0x60>)
 8000dca:	881b      	ldrh	r3, [r3, #0]
 8000dcc:	461a      	mov	r2, r3
 8000dce:	88fb      	ldrh	r3, [r7, #6]
 8000dd0:	1ad3      	subs	r3, r2, r3
 8000dd2:	2b00      	cmp	r3, #0
		//dbprintf("diff : %d",(prevDMACnt-currentDMACnt));
	}
	if((prevDMACnt-currentDMACnt) >= (sizeof(tPDI)+1)){
 8000dd4:	4b10      	ldr	r3, [pc, #64]	; (8000e18 <rt_get_io_values+0x60>)
 8000dd6:	881b      	ldrh	r3, [r3, #0]
 8000dd8:	461a      	mov	r2, r3
 8000dda:	88fb      	ldrh	r3, [r7, #6]
 8000ddc:	1ad3      	subs	r3, r2, r3
 8000dde:	2b08      	cmp	r3, #8
 8000de0:	d913      	bls.n	8000e0a <rt_get_io_values+0x52>
		//lastRxTime = HAL_GetTick();
		count++;
 8000de2:	4b0e      	ldr	r3, [pc, #56]	; (8000e1c <rt_get_io_values+0x64>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	3301      	adds	r3, #1
 8000de8:	4a0c      	ldr	r2, [pc, #48]	; (8000e1c <rt_get_io_values+0x64>)
 8000dea:	6013      	str	r3, [r2, #0]
		memcpy(&g_PDI,&gSPI_Rx_Buf[1],sizeof(tPDI));
 8000dec:	2208      	movs	r2, #8
 8000dee:	490c      	ldr	r1, [pc, #48]	; (8000e20 <rt_get_io_values+0x68>)
 8000df0:	480c      	ldr	r0, [pc, #48]	; (8000e24 <rt_get_io_values+0x6c>)
 8000df2:	f003 ffc5 	bl	8004d80 <memcpy>
		//io_update();
		/*g_PDO.ssi = ssi_read();
		memcpy(&gSPI_Tx_Buf[4],&g_PDO.ssi,4);*/
		memcpy(&gSPI_Tx_Buf[0],&g_PDO,8);
 8000df6:	2208      	movs	r2, #8
 8000df8:	490b      	ldr	r1, [pc, #44]	; (8000e28 <rt_get_io_values+0x70>)
 8000dfa:	480c      	ldr	r0, [pc, #48]	; (8000e2c <rt_get_io_values+0x74>)
 8000dfc:	f003 ffc0 	bl	8004d80 <memcpy>
		//dbprintf("SSI RAW: %08X  Din: %08X",g_PDO.ssi,g_PDO.din);

		prevDMACnt = currentDMACnt;
 8000e00:	4a05      	ldr	r2, [pc, #20]	; (8000e18 <rt_get_io_values+0x60>)
 8000e02:	88fb      	ldrh	r3, [r7, #6]
 8000e04:	8013      	strh	r3, [r2, #0]
		SPI_DMA_Reset();
 8000e06:	f7ff ffb1 	bl	8000d6c <SPI_DMA_Reset>
		{
			dbprintf("Timeout resetting  size: %d...",(prevDMACnt-currentDMACnt));
			SPI_DMA_Reset();
		}
	}*/
}
 8000e0a:	bf00      	nop
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	20002ae0 	.word	0x20002ae0
 8000e18:	20000002 	.word	0x20000002
 8000e1c:	2000049c 	.word	0x2000049c
 8000e20:	20002131 	.word	0x20002131
 8000e24:	20000510 	.word	0x20000510
 8000e28:	20000500 	.word	0x20000500
 8000e2c:	20000520 	.word	0x20000520

08000e30 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000e34:	4b16      	ldr	r3, [pc, #88]	; (8000e90 <MX_SPI1_Init+0x60>)
 8000e36:	4a17      	ldr	r2, [pc, #92]	; (8000e94 <MX_SPI1_Init+0x64>)
 8000e38:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000e3a:	4b15      	ldr	r3, [pc, #84]	; (8000e90 <MX_SPI1_Init+0x60>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e40:	4b13      	ldr	r3, [pc, #76]	; (8000e90 <MX_SPI1_Init+0x60>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e46:	4b12      	ldr	r3, [pc, #72]	; (8000e90 <MX_SPI1_Init+0x60>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e4c:	4b10      	ldr	r3, [pc, #64]	; (8000e90 <MX_SPI1_Init+0x60>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e52:	4b0f      	ldr	r3, [pc, #60]	; (8000e90 <MX_SPI1_Init+0x60>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8000e58:	4b0d      	ldr	r3, [pc, #52]	; (8000e90 <MX_SPI1_Init+0x60>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000e5e:	4b0c      	ldr	r3, [pc, #48]	; (8000e90 <MX_SPI1_Init+0x60>)
 8000e60:	2208      	movs	r2, #8
 8000e62:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e64:	4b0a      	ldr	r3, [pc, #40]	; (8000e90 <MX_SPI1_Init+0x60>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e6a:	4b09      	ldr	r3, [pc, #36]	; (8000e90 <MX_SPI1_Init+0x60>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e70:	4b07      	ldr	r3, [pc, #28]	; (8000e90 <MX_SPI1_Init+0x60>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000e76:	4b06      	ldr	r3, [pc, #24]	; (8000e90 <MX_SPI1_Init+0x60>)
 8000e78:	220a      	movs	r2, #10
 8000e7a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e7c:	4804      	ldr	r0, [pc, #16]	; (8000e90 <MX_SPI1_Init+0x60>)
 8000e7e:	f002 fcf5 	bl	800386c <HAL_SPI_Init>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <MX_SPI1_Init+0x5c>
  {
    Error_Handler();
 8000e88:	f7ff ff64 	bl	8000d54 <Error_Handler>
  }

}
 8000e8c:	bf00      	nop
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	20002ae0 	.word	0x20002ae0
 8000e94:	40013000 	.word	0x40013000

08000e98 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8000e9c:	4b18      	ldr	r3, [pc, #96]	; (8000f00 <MX_SPI2_Init+0x68>)
 8000e9e:	4a19      	ldr	r2, [pc, #100]	; (8000f04 <MX_SPI2_Init+0x6c>)
 8000ea0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000ea2:	4b17      	ldr	r3, [pc, #92]	; (8000f00 <MX_SPI2_Init+0x68>)
 8000ea4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ea8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000eaa:	4b15      	ldr	r3, [pc, #84]	; (8000f00 <MX_SPI2_Init+0x68>)
 8000eac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000eb0:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000eb2:	4b13      	ldr	r3, [pc, #76]	; (8000f00 <MX_SPI2_Init+0x68>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000eb8:	4b11      	ldr	r3, [pc, #68]	; (8000f00 <MX_SPI2_Init+0x68>)
 8000eba:	2202      	movs	r2, #2
 8000ebc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ebe:	4b10      	ldr	r3, [pc, #64]	; (8000f00 <MX_SPI2_Init+0x68>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000ec4:	4b0e      	ldr	r3, [pc, #56]	; (8000f00 <MX_SPI2_Init+0x68>)
 8000ec6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000eca:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000ecc:	4b0c      	ldr	r3, [pc, #48]	; (8000f00 <MX_SPI2_Init+0x68>)
 8000ece:	2220      	movs	r2, #32
 8000ed0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ed2:	4b0b      	ldr	r3, [pc, #44]	; (8000f00 <MX_SPI2_Init+0x68>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ed8:	4b09      	ldr	r3, [pc, #36]	; (8000f00 <MX_SPI2_Init+0x68>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ede:	4b08      	ldr	r3, [pc, #32]	; (8000f00 <MX_SPI2_Init+0x68>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000ee4:	4b06      	ldr	r3, [pc, #24]	; (8000f00 <MX_SPI2_Init+0x68>)
 8000ee6:	220a      	movs	r2, #10
 8000ee8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000eea:	4805      	ldr	r0, [pc, #20]	; (8000f00 <MX_SPI2_Init+0x68>)
 8000eec:	f002 fcbe 	bl	800386c <HAL_SPI_Init>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 8000ef6:	f7ff ff2d 	bl	8000d54 <Error_Handler>
  }

}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	20002a30 	.word	0x20002a30
 8000f04:	40003800 	.word	0x40003800

08000f08 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8000f0c:	4b17      	ldr	r3, [pc, #92]	; (8000f6c <MX_SPI3_Init+0x64>)
 8000f0e:	4a18      	ldr	r2, [pc, #96]	; (8000f70 <MX_SPI3_Init+0x68>)
 8000f10:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000f12:	4b16      	ldr	r3, [pc, #88]	; (8000f6c <MX_SPI3_Init+0x64>)
 8000f14:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f18:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000f1a:	4b14      	ldr	r3, [pc, #80]	; (8000f6c <MX_SPI3_Init+0x64>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f20:	4b12      	ldr	r3, [pc, #72]	; (8000f6c <MX_SPI3_Init+0x64>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f26:	4b11      	ldr	r3, [pc, #68]	; (8000f6c <MX_SPI3_Init+0x64>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f2c:	4b0f      	ldr	r3, [pc, #60]	; (8000f6c <MX_SPI3_Init+0x64>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000f32:	4b0e      	ldr	r3, [pc, #56]	; (8000f6c <MX_SPI3_Init+0x64>)
 8000f34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f38:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f3a:	4b0c      	ldr	r3, [pc, #48]	; (8000f6c <MX_SPI3_Init+0x64>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f40:	4b0a      	ldr	r3, [pc, #40]	; (8000f6c <MX_SPI3_Init+0x64>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f46:	4b09      	ldr	r3, [pc, #36]	; (8000f6c <MX_SPI3_Init+0x64>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f4c:	4b07      	ldr	r3, [pc, #28]	; (8000f6c <MX_SPI3_Init+0x64>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000f52:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <MX_SPI3_Init+0x64>)
 8000f54:	220a      	movs	r2, #10
 8000f56:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000f58:	4804      	ldr	r0, [pc, #16]	; (8000f6c <MX_SPI3_Init+0x64>)
 8000f5a:	f002 fc87 	bl	800386c <HAL_SPI_Init>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000f64:	f7ff fef6 	bl	8000d54 <Error_Handler>
  }

}
 8000f68:	bf00      	nop
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	20002a88 	.word	0x20002a88
 8000f70:	40003c00 	.word	0x40003c00

08000f74 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b08c      	sub	sp, #48	; 0x30
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f7c:	f107 0320 	add.w	r3, r7, #32
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
 8000f84:	605a      	str	r2, [r3, #4]
 8000f86:	609a      	str	r2, [r3, #8]
 8000f88:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4a7e      	ldr	r2, [pc, #504]	; (8001188 <HAL_SPI_MspInit+0x214>)
 8000f90:	4293      	cmp	r3, r2
 8000f92:	f040 8087 	bne.w	80010a4 <HAL_SPI_MspInit+0x130>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f96:	4b7d      	ldr	r3, [pc, #500]	; (800118c <HAL_SPI_MspInit+0x218>)
 8000f98:	699b      	ldr	r3, [r3, #24]
 8000f9a:	4a7c      	ldr	r2, [pc, #496]	; (800118c <HAL_SPI_MspInit+0x218>)
 8000f9c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000fa0:	6193      	str	r3, [r2, #24]
 8000fa2:	4b7a      	ldr	r3, [pc, #488]	; (800118c <HAL_SPI_MspInit+0x218>)
 8000fa4:	699b      	ldr	r3, [r3, #24]
 8000fa6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000faa:	61fb      	str	r3, [r7, #28]
 8000fac:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fae:	4b77      	ldr	r3, [pc, #476]	; (800118c <HAL_SPI_MspInit+0x218>)
 8000fb0:	699b      	ldr	r3, [r3, #24]
 8000fb2:	4a76      	ldr	r2, [pc, #472]	; (800118c <HAL_SPI_MspInit+0x218>)
 8000fb4:	f043 0304 	orr.w	r3, r3, #4
 8000fb8:	6193      	str	r3, [r2, #24]
 8000fba:	4b74      	ldr	r3, [pc, #464]	; (800118c <HAL_SPI_MspInit+0x218>)
 8000fbc:	699b      	ldr	r3, [r3, #24]
 8000fbe:	f003 0304 	and.w	r3, r3, #4
 8000fc2:	61bb      	str	r3, [r7, #24]
 8000fc4:	69bb      	ldr	r3, [r7, #24]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8000fc6:	23b0      	movs	r3, #176	; 0xb0
 8000fc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd2:	f107 0320 	add.w	r3, r7, #32
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	486d      	ldr	r0, [pc, #436]	; (8001190 <HAL_SPI_MspInit+0x21c>)
 8000fda:	f001 f9f7 	bl	80023cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000fde:	2340      	movs	r3, #64	; 0x40
 8000fe0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fe6:	2303      	movs	r3, #3
 8000fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fea:	f107 0320 	add.w	r3, r7, #32
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4867      	ldr	r0, [pc, #412]	; (8001190 <HAL_SPI_MspInit+0x21c>)
 8000ff2:	f001 f9eb 	bl	80023cc <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8000ff6:	4b67      	ldr	r3, [pc, #412]	; (8001194 <HAL_SPI_MspInit+0x220>)
 8000ff8:	4a67      	ldr	r2, [pc, #412]	; (8001198 <HAL_SPI_MspInit+0x224>)
 8000ffa:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ffc:	4b65      	ldr	r3, [pc, #404]	; (8001194 <HAL_SPI_MspInit+0x220>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001002:	4b64      	ldr	r3, [pc, #400]	; (8001194 <HAL_SPI_MspInit+0x220>)
 8001004:	2200      	movs	r2, #0
 8001006:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001008:	4b62      	ldr	r3, [pc, #392]	; (8001194 <HAL_SPI_MspInit+0x220>)
 800100a:	2280      	movs	r2, #128	; 0x80
 800100c:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800100e:	4b61      	ldr	r3, [pc, #388]	; (8001194 <HAL_SPI_MspInit+0x220>)
 8001010:	2200      	movs	r2, #0
 8001012:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001014:	4b5f      	ldr	r3, [pc, #380]	; (8001194 <HAL_SPI_MspInit+0x220>)
 8001016:	2200      	movs	r2, #0
 8001018:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 800101a:	4b5e      	ldr	r3, [pc, #376]	; (8001194 <HAL_SPI_MspInit+0x220>)
 800101c:	2220      	movs	r2, #32
 800101e:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001020:	4b5c      	ldr	r3, [pc, #368]	; (8001194 <HAL_SPI_MspInit+0x220>)
 8001022:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001026:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001028:	485a      	ldr	r0, [pc, #360]	; (8001194 <HAL_SPI_MspInit+0x220>)
 800102a:	f000 fd4d 	bl	8001ac8 <HAL_DMA_Init>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <HAL_SPI_MspInit+0xc4>
    {
      Error_Handler();
 8001034:	f7ff fe8e 	bl	8000d54 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	4a56      	ldr	r2, [pc, #344]	; (8001194 <HAL_SPI_MspInit+0x220>)
 800103c:	64da      	str	r2, [r3, #76]	; 0x4c
 800103e:	4a55      	ldr	r2, [pc, #340]	; (8001194 <HAL_SPI_MspInit+0x220>)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8001044:	4b55      	ldr	r3, [pc, #340]	; (800119c <HAL_SPI_MspInit+0x228>)
 8001046:	4a56      	ldr	r2, [pc, #344]	; (80011a0 <HAL_SPI_MspInit+0x22c>)
 8001048:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800104a:	4b54      	ldr	r3, [pc, #336]	; (800119c <HAL_SPI_MspInit+0x228>)
 800104c:	2210      	movs	r2, #16
 800104e:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001050:	4b52      	ldr	r3, [pc, #328]	; (800119c <HAL_SPI_MspInit+0x228>)
 8001052:	2200      	movs	r2, #0
 8001054:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001056:	4b51      	ldr	r3, [pc, #324]	; (800119c <HAL_SPI_MspInit+0x228>)
 8001058:	2280      	movs	r2, #128	; 0x80
 800105a:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800105c:	4b4f      	ldr	r3, [pc, #316]	; (800119c <HAL_SPI_MspInit+0x228>)
 800105e:	2200      	movs	r2, #0
 8001060:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001062:	4b4e      	ldr	r3, [pc, #312]	; (800119c <HAL_SPI_MspInit+0x228>)
 8001064:	2200      	movs	r2, #0
 8001066:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 8001068:	4b4c      	ldr	r3, [pc, #304]	; (800119c <HAL_SPI_MspInit+0x228>)
 800106a:	2220      	movs	r2, #32
 800106c:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800106e:	4b4b      	ldr	r3, [pc, #300]	; (800119c <HAL_SPI_MspInit+0x228>)
 8001070:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001074:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001076:	4849      	ldr	r0, [pc, #292]	; (800119c <HAL_SPI_MspInit+0x228>)
 8001078:	f000 fd26 	bl	8001ac8 <HAL_DMA_Init>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <HAL_SPI_MspInit+0x112>
    {
      Error_Handler();
 8001082:	f7ff fe67 	bl	8000d54 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4a44      	ldr	r2, [pc, #272]	; (800119c <HAL_SPI_MspInit+0x228>)
 800108a:	649a      	str	r2, [r3, #72]	; 0x48
 800108c:	4a43      	ldr	r2, [pc, #268]	; (800119c <HAL_SPI_MspInit+0x228>)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001092:	2200      	movs	r2, #0
 8001094:	2100      	movs	r1, #0
 8001096:	2023      	movs	r0, #35	; 0x23
 8001098:	f000 fcdf 	bl	8001a5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800109c:	2023      	movs	r0, #35	; 0x23
 800109e:	f000 fcf8 	bl	8001a92 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80010a2:	e06c      	b.n	800117e <HAL_SPI_MspInit+0x20a>
  else if(spiHandle->Instance==SPI2)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a3e      	ldr	r2, [pc, #248]	; (80011a4 <HAL_SPI_MspInit+0x230>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d132      	bne.n	8001114 <HAL_SPI_MspInit+0x1a0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80010ae:	4b37      	ldr	r3, [pc, #220]	; (800118c <HAL_SPI_MspInit+0x218>)
 80010b0:	69db      	ldr	r3, [r3, #28]
 80010b2:	4a36      	ldr	r2, [pc, #216]	; (800118c <HAL_SPI_MspInit+0x218>)
 80010b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010b8:	61d3      	str	r3, [r2, #28]
 80010ba:	4b34      	ldr	r3, [pc, #208]	; (800118c <HAL_SPI_MspInit+0x218>)
 80010bc:	69db      	ldr	r3, [r3, #28]
 80010be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010c2:	617b      	str	r3, [r7, #20]
 80010c4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010c6:	4b31      	ldr	r3, [pc, #196]	; (800118c <HAL_SPI_MspInit+0x218>)
 80010c8:	699b      	ldr	r3, [r3, #24]
 80010ca:	4a30      	ldr	r2, [pc, #192]	; (800118c <HAL_SPI_MspInit+0x218>)
 80010cc:	f043 0308 	orr.w	r3, r3, #8
 80010d0:	6193      	str	r3, [r2, #24]
 80010d2:	4b2e      	ldr	r3, [pc, #184]	; (800118c <HAL_SPI_MspInit+0x218>)
 80010d4:	699b      	ldr	r3, [r3, #24]
 80010d6:	f003 0308 	and.w	r3, r3, #8
 80010da:	613b      	str	r3, [r7, #16]
 80010dc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80010de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e4:	2302      	movs	r3, #2
 80010e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010e8:	2303      	movs	r3, #3
 80010ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ec:	f107 0320 	add.w	r3, r7, #32
 80010f0:	4619      	mov	r1, r3
 80010f2:	482d      	ldr	r0, [pc, #180]	; (80011a8 <HAL_SPI_MspInit+0x234>)
 80010f4:	f001 f96a 	bl	80023cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80010f8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80010fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010fe:	2300      	movs	r3, #0
 8001100:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001102:	2300      	movs	r3, #0
 8001104:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001106:	f107 0320 	add.w	r3, r7, #32
 800110a:	4619      	mov	r1, r3
 800110c:	4826      	ldr	r0, [pc, #152]	; (80011a8 <HAL_SPI_MspInit+0x234>)
 800110e:	f001 f95d 	bl	80023cc <HAL_GPIO_Init>
}
 8001112:	e034      	b.n	800117e <HAL_SPI_MspInit+0x20a>
  else if(spiHandle->Instance==SPI3)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a24      	ldr	r2, [pc, #144]	; (80011ac <HAL_SPI_MspInit+0x238>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d12f      	bne.n	800117e <HAL_SPI_MspInit+0x20a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800111e:	4b1b      	ldr	r3, [pc, #108]	; (800118c <HAL_SPI_MspInit+0x218>)
 8001120:	69db      	ldr	r3, [r3, #28]
 8001122:	4a1a      	ldr	r2, [pc, #104]	; (800118c <HAL_SPI_MspInit+0x218>)
 8001124:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001128:	61d3      	str	r3, [r2, #28]
 800112a:	4b18      	ldr	r3, [pc, #96]	; (800118c <HAL_SPI_MspInit+0x218>)
 800112c:	69db      	ldr	r3, [r3, #28]
 800112e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001132:	60fb      	str	r3, [r7, #12]
 8001134:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001136:	4b15      	ldr	r3, [pc, #84]	; (800118c <HAL_SPI_MspInit+0x218>)
 8001138:	699b      	ldr	r3, [r3, #24]
 800113a:	4a14      	ldr	r2, [pc, #80]	; (800118c <HAL_SPI_MspInit+0x218>)
 800113c:	f043 0308 	orr.w	r3, r3, #8
 8001140:	6193      	str	r3, [r2, #24]
 8001142:	4b12      	ldr	r3, [pc, #72]	; (800118c <HAL_SPI_MspInit+0x218>)
 8001144:	699b      	ldr	r3, [r3, #24]
 8001146:	f003 0308 	and.w	r3, r3, #8
 800114a:	60bb      	str	r3, [r7, #8]
 800114c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 800114e:	2328      	movs	r3, #40	; 0x28
 8001150:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001152:	2302      	movs	r3, #2
 8001154:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001156:	2303      	movs	r3, #3
 8001158:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800115a:	f107 0320 	add.w	r3, r7, #32
 800115e:	4619      	mov	r1, r3
 8001160:	4811      	ldr	r0, [pc, #68]	; (80011a8 <HAL_SPI_MspInit+0x234>)
 8001162:	f001 f933 	bl	80023cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001166:	2310      	movs	r3, #16
 8001168:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800116a:	2300      	movs	r3, #0
 800116c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116e:	2300      	movs	r3, #0
 8001170:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001172:	f107 0320 	add.w	r3, r7, #32
 8001176:	4619      	mov	r1, r3
 8001178:	480b      	ldr	r0, [pc, #44]	; (80011a8 <HAL_SPI_MspInit+0x234>)
 800117a:	f001 f927 	bl	80023cc <HAL_GPIO_Init>
}
 800117e:	bf00      	nop
 8001180:	3730      	adds	r7, #48	; 0x30
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	40013000 	.word	0x40013000
 800118c:	40021000 	.word	0x40021000
 8001190:	40010800 	.word	0x40010800
 8001194:	20002b38 	.word	0x20002b38
 8001198:	4002001c 	.word	0x4002001c
 800119c:	20002b7c 	.word	0x20002b7c
 80011a0:	40020030 	.word	0x40020030
 80011a4:	40003800 	.word	0x40003800
 80011a8:	40010c00 	.word	0x40010c00
 80011ac:	40003c00 	.word	0x40003c00

080011b0 <HAL_SPI3_SetMode>:
/*
 * !\brief			SPI3 Set mode function
 * 	\param	mode	SPI mode
 */
void HAL_SPI3_SetMode(uint8_t mode)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4603      	mov	r3, r0
 80011b8:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Abort(&hspi3);
 80011ba:	482d      	ldr	r0, [pc, #180]	; (8001270 <HAL_SPI3_SetMode+0xc0>)
 80011bc:	f002 ff90 	bl	80040e0 <HAL_SPI_Abort>
	hspi3.Instance = SPI3;
 80011c0:	4b2b      	ldr	r3, [pc, #172]	; (8001270 <HAL_SPI3_SetMode+0xc0>)
 80011c2:	4a2c      	ldr	r2, [pc, #176]	; (8001274 <HAL_SPI3_SetMode+0xc4>)
 80011c4:	601a      	str	r2, [r3, #0]
	hspi3.Init.Mode = SPI_MODE_MASTER;
 80011c6:	4b2a      	ldr	r3, [pc, #168]	; (8001270 <HAL_SPI3_SetMode+0xc0>)
 80011c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011cc:	605a      	str	r2, [r3, #4]
	hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80011ce:	4b28      	ldr	r3, [pc, #160]	; (8001270 <HAL_SPI3_SetMode+0xc0>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	609a      	str	r2, [r3, #8]
	hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80011d4:	4b26      	ldr	r3, [pc, #152]	; (8001270 <HAL_SPI3_SetMode+0xc0>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	60da      	str	r2, [r3, #12]
	hspi3.Init.NSS = SPI_NSS_SOFT;
 80011da:	4b25      	ldr	r3, [pc, #148]	; (8001270 <HAL_SPI3_SetMode+0xc0>)
 80011dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011e0:	619a      	str	r2, [r3, #24]
	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80011e2:	4b23      	ldr	r3, [pc, #140]	; (8001270 <HAL_SPI3_SetMode+0xc0>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	61da      	str	r2, [r3, #28]
	hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011e8:	4b21      	ldr	r3, [pc, #132]	; (8001270 <HAL_SPI3_SetMode+0xc0>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	621a      	str	r2, [r3, #32]
	hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80011ee:	4b20      	ldr	r3, [pc, #128]	; (8001270 <HAL_SPI3_SetMode+0xc0>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	625a      	str	r2, [r3, #36]	; 0x24
	hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011f4:	4b1e      	ldr	r3, [pc, #120]	; (8001270 <HAL_SPI3_SetMode+0xc0>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	629a      	str	r2, [r3, #40]	; 0x28
	hspi3.Init.CRCPolynomial = 10;
 80011fa:	4b1d      	ldr	r3, [pc, #116]	; (8001270 <HAL_SPI3_SetMode+0xc0>)
 80011fc:	220a      	movs	r2, #10
 80011fe:	62da      	str	r2, [r3, #44]	; 0x2c
	switch (mode) {
 8001200:	79fb      	ldrb	r3, [r7, #7]
 8001202:	2b03      	cmp	r3, #3
 8001204:	d826      	bhi.n	8001254 <HAL_SPI3_SetMode+0xa4>
 8001206:	a201      	add	r2, pc, #4	; (adr r2, 800120c <HAL_SPI3_SetMode+0x5c>)
 8001208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800120c:	0800121d 	.word	0x0800121d
 8001210:	0800122b 	.word	0x0800122b
 8001214:	08001239 	.word	0x08001239
 8001218:	08001247 	.word	0x08001247
	case SPI_MODE_0:
		hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800121c:	4b14      	ldr	r3, [pc, #80]	; (8001270 <HAL_SPI3_SetMode+0xc0>)
 800121e:	2200      	movs	r2, #0
 8001220:	611a      	str	r2, [r3, #16]
		hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001222:	4b13      	ldr	r3, [pc, #76]	; (8001270 <HAL_SPI3_SetMode+0xc0>)
 8001224:	2200      	movs	r2, #0
 8001226:	615a      	str	r2, [r3, #20]
		break;
 8001228:	e015      	b.n	8001256 <HAL_SPI3_SetMode+0xa6>
	case SPI_MODE_1:
		hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800122a:	4b11      	ldr	r3, [pc, #68]	; (8001270 <HAL_SPI3_SetMode+0xc0>)
 800122c:	2200      	movs	r2, #0
 800122e:	611a      	str	r2, [r3, #16]
		hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001230:	4b0f      	ldr	r3, [pc, #60]	; (8001270 <HAL_SPI3_SetMode+0xc0>)
 8001232:	2201      	movs	r2, #1
 8001234:	615a      	str	r2, [r3, #20]
		break;
 8001236:	e00e      	b.n	8001256 <HAL_SPI3_SetMode+0xa6>
	case SPI_MODE_2:
		hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001238:	4b0d      	ldr	r3, [pc, #52]	; (8001270 <HAL_SPI3_SetMode+0xc0>)
 800123a:	2202      	movs	r2, #2
 800123c:	611a      	str	r2, [r3, #16]
		hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800123e:	4b0c      	ldr	r3, [pc, #48]	; (8001270 <HAL_SPI3_SetMode+0xc0>)
 8001240:	2200      	movs	r2, #0
 8001242:	615a      	str	r2, [r3, #20]
		break;
 8001244:	e007      	b.n	8001256 <HAL_SPI3_SetMode+0xa6>
	case SPI_MODE_3:
		hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001246:	4b0a      	ldr	r3, [pc, #40]	; (8001270 <HAL_SPI3_SetMode+0xc0>)
 8001248:	2202      	movs	r2, #2
 800124a:	611a      	str	r2, [r3, #16]
		hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 800124c:	4b08      	ldr	r3, [pc, #32]	; (8001270 <HAL_SPI3_SetMode+0xc0>)
 800124e:	2201      	movs	r2, #1
 8001250:	615a      	str	r2, [r3, #20]
		break;
 8001252:	e000      	b.n	8001256 <HAL_SPI3_SetMode+0xa6>
	default:
		break;
 8001254:	bf00      	nop
	}

	if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001256:	4806      	ldr	r0, [pc, #24]	; (8001270 <HAL_SPI3_SetMode+0xc0>)
 8001258:	f002 fb08 	bl	800386c <HAL_SPI_Init>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <HAL_SPI3_SetMode+0xb6>
	{
		Error_Handler();
 8001262:	f7ff fd77 	bl	8000d54 <Error_Handler>
	}

}
 8001266:	bf00      	nop
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	20002a88 	.word	0x20002a88
 8001274:	40003c00 	.word	0x40003c00

08001278 <HAL_SPI3_SelectSlave>:
/*! \brief			Select SPI3 slave with chip select pin and predefined SPI mode
 *
 * \param	slave	SPI slave number
 */
void HAL_SPI3_SelectSlave(uint8_t slave)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	4603      	mov	r3, r0
 8001280:	71fb      	strb	r3, [r7, #7]
	switch(slave)
 8001282:	79fb      	ldrb	r3, [r7, #7]
 8001284:	2b01      	cmp	r3, #1
 8001286:	d002      	beq.n	800128e <HAL_SPI3_SelectSlave+0x16>
 8001288:	2b02      	cmp	r3, #2
 800128a:	d004      	beq.n	8001296 <HAL_SPI3_SelectSlave+0x1e>
	case DIGIPOT_SPI3_SLV:
		HAL_SPI3_SetMode(DIGIPOT_MODE);
		HAL_GPIO_WritePin(LVDT_POT_CS_GPIO_Port, LVDT_POT_CS_Pin, GPIO_PIN_RESET);
		break;
	}
}
 800128c:	e00d      	b.n	80012aa <HAL_SPI3_SelectSlave+0x32>
		HAL_SPI3_SetMode(IOEXP_MODE);
 800128e:	2000      	movs	r0, #0
 8001290:	f7ff ff8e 	bl	80011b0 <HAL_SPI3_SetMode>
		break;
 8001294:	e009      	b.n	80012aa <HAL_SPI3_SelectSlave+0x32>
		HAL_SPI3_SetMode(DIGIPOT_MODE);
 8001296:	2001      	movs	r0, #1
 8001298:	f7ff ff8a 	bl	80011b0 <HAL_SPI3_SetMode>
		HAL_GPIO_WritePin(LVDT_POT_CS_GPIO_Port, LVDT_POT_CS_Pin, GPIO_PIN_RESET);
 800129c:	2200      	movs	r2, #0
 800129e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012a2:	4804      	ldr	r0, [pc, #16]	; (80012b4 <HAL_SPI3_SelectSlave+0x3c>)
 80012a4:	f001 fa3d 	bl	8002722 <HAL_GPIO_WritePin>
		break;
 80012a8:	bf00      	nop
}
 80012aa:	bf00      	nop
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	40010800 	.word	0x40010800

080012b8 <HAL_SPI3_DeselectSlave>:
/*! \brief			Deselect SPI3 slave with chip select pin and predefined SPI mode
 *
 * \param	slave	SPI slave number
 */
void HAL_SPI3_DeselectSlave(uint8_t slave)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0
 80012be:	4603      	mov	r3, r0
 80012c0:	71fb      	strb	r3, [r7, #7]
	uint32_t try = 1000;
 80012c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012c6:	60fb      	str	r3, [r7, #12]
	while(hspi3.State != HAL_SPI_STATE_READY && try > 0){
 80012c8:	e002      	b.n	80012d0 <HAL_SPI3_DeselectSlave+0x18>
		try--;
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	3b01      	subs	r3, #1
 80012ce:	60fb      	str	r3, [r7, #12]
	while(hspi3.State != HAL_SPI_STATE_READY && try > 0){
 80012d0:	4b10      	ldr	r3, [pc, #64]	; (8001314 <HAL_SPI3_DeselectSlave+0x5c>)
 80012d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80012d6:	b2db      	uxtb	r3, r3
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d002      	beq.n	80012e2 <HAL_SPI3_DeselectSlave+0x2a>
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d1f3      	bne.n	80012ca <HAL_SPI3_DeselectSlave+0x12>
	}
	if(try == 0){
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d103      	bne.n	80012f0 <HAL_SPI3_DeselectSlave+0x38>
		dbprintf("Timeout in %s",__func__);
 80012e8:	490b      	ldr	r1, [pc, #44]	; (8001318 <HAL_SPI3_DeselectSlave+0x60>)
 80012ea:	480c      	ldr	r0, [pc, #48]	; (800131c <HAL_SPI3_DeselectSlave+0x64>)
 80012ec:	f000 fa20 	bl	8001730 <dbprintf>
	}
	switch(slave)
 80012f0:	79fb      	ldrb	r3, [r7, #7]
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d009      	beq.n	800130a <HAL_SPI3_DeselectSlave+0x52>
 80012f6:	2b02      	cmp	r3, #2
 80012f8:	d000      	beq.n	80012fc <HAL_SPI3_DeselectSlave+0x44>
		break;
	case DIGIPOT_SPI3_SLV:
		HAL_GPIO_WritePin(LVDT_POT_CS_GPIO_Port, LVDT_POT_CS_Pin, GPIO_PIN_SET);
		break;
	}
}
 80012fa:	e007      	b.n	800130c <HAL_SPI3_DeselectSlave+0x54>
		HAL_GPIO_WritePin(LVDT_POT_CS_GPIO_Port, LVDT_POT_CS_Pin, GPIO_PIN_SET);
 80012fc:	2201      	movs	r2, #1
 80012fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001302:	4807      	ldr	r0, [pc, #28]	; (8001320 <HAL_SPI3_DeselectSlave+0x68>)
 8001304:	f001 fa0d 	bl	8002722 <HAL_GPIO_WritePin>
		break;
 8001308:	e000      	b.n	800130c <HAL_SPI3_DeselectSlave+0x54>
		break;
 800130a:	bf00      	nop
}
 800130c:	bf00      	nop
 800130e:	3710      	adds	r7, #16
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	20002a88 	.word	0x20002a88
 8001318:	080056e8 	.word	0x080056e8
 800131c:	0800568c 	.word	0x0800568c
 8001320:	40010800 	.word	0x40010800

08001324 <HAL_SPI3_ReadWrite>:
uint8_t HAL_SPI3_ReadWrite(uint8_t slave, uint8_t *txData, uint8_t *rxData,uint16_t Size){
 8001324:	b580      	push	{r7, lr}
 8001326:	b088      	sub	sp, #32
 8001328:	af02      	add	r7, sp, #8
 800132a:	60b9      	str	r1, [r7, #8]
 800132c:	607a      	str	r2, [r7, #4]
 800132e:	461a      	mov	r2, r3
 8001330:	4603      	mov	r3, r0
 8001332:	73fb      	strb	r3, [r7, #15]
 8001334:	4613      	mov	r3, r2
 8001336:	81bb      	strh	r3, [r7, #12]
	HAL_StatusTypeDef status = HAL_ERROR;
 8001338:	2301      	movs	r3, #1
 800133a:	75fb      	strb	r3, [r7, #23]
	HAL_SPI3_SelectSlave(slave);
 800133c:	7bfb      	ldrb	r3, [r7, #15]
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff ff9a 	bl	8001278 <HAL_SPI3_SelectSlave>
	status = HAL_SPI_TransmitReceive(&hspi3, txData, rxData, Size, 10000);
 8001344:	89bb      	ldrh	r3, [r7, #12]
 8001346:	f242 7210 	movw	r2, #10000	; 0x2710
 800134a:	9200      	str	r2, [sp, #0]
 800134c:	687a      	ldr	r2, [r7, #4]
 800134e:	68b9      	ldr	r1, [r7, #8]
 8001350:	4806      	ldr	r0, [pc, #24]	; (800136c <HAL_SPI3_ReadWrite+0x48>)
 8001352:	f002 fc20 	bl	8003b96 <HAL_SPI_TransmitReceive>
 8001356:	4603      	mov	r3, r0
 8001358:	75fb      	strb	r3, [r7, #23]
	HAL_SPI3_DeselectSlave(slave);
 800135a:	7bfb      	ldrb	r3, [r7, #15]
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff ffab 	bl	80012b8 <HAL_SPI3_DeselectSlave>
	return status;
 8001362:	7dfb      	ldrb	r3, [r7, #23]
}
 8001364:	4618      	mov	r0, r3
 8001366:	3718      	adds	r7, #24
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	20002a88 	.word	0x20002a88

08001370 <ssi_read>:
/* Implementation of functions                                                */
/*============================================================================*/
uint32_t count = 0;
extern uint8_t gSPI_Tx_Buf[2048];
uint32_t ssi_read()
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0

	uint8_t ssiData[5] = {0xFF,0xFF,0xFF,0xFF,0xFF};
 8001376:	4a1c      	ldr	r2, [pc, #112]	; (80013e8 <ssi_read+0x78>)
 8001378:	463b      	mov	r3, r7
 800137a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800137e:	6018      	str	r0, [r3, #0]
 8001380:	3304      	adds	r3, #4
 8001382:	7019      	strb	r1, [r3, #0]
	uint32_t data;
	HAL_StatusTypeDef ret = HAL_SPI_Receive(&hspi2,ssiData,5,1000);
 8001384:	4639      	mov	r1, r7
 8001386:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800138a:	2205      	movs	r2, #5
 800138c:	4817      	ldr	r0, [pc, #92]	; (80013ec <ssi_read+0x7c>)
 800138e:	f002 faf1 	bl	8003974 <HAL_SPI_Receive>
 8001392:	4603      	mov	r3, r0
 8001394:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK){
 8001396:	7bfb      	ldrb	r3, [r7, #15]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d002      	beq.n	80013a2 <ssi_read+0x32>
		return 0xFFFFFFFF;
 800139c:	f04f 33ff 	mov.w	r3, #4294967295
 80013a0:	e01e      	b.n	80013e0 <ssi_read+0x70>
	}

	if(ssiData[0] == 0xFF && ssiData[1] == 0xFF && ssiData[2] == 0xFF && ssiData[3] == 0xFF  && ssiData[4] == 0xFF ){
 80013a2:	783b      	ldrb	r3, [r7, #0]
 80013a4:	2bff      	cmp	r3, #255	; 0xff
 80013a6:	d10e      	bne.n	80013c6 <ssi_read+0x56>
 80013a8:	787b      	ldrb	r3, [r7, #1]
 80013aa:	2bff      	cmp	r3, #255	; 0xff
 80013ac:	d10b      	bne.n	80013c6 <ssi_read+0x56>
 80013ae:	78bb      	ldrb	r3, [r7, #2]
 80013b0:	2bff      	cmp	r3, #255	; 0xff
 80013b2:	d108      	bne.n	80013c6 <ssi_read+0x56>
 80013b4:	78fb      	ldrb	r3, [r7, #3]
 80013b6:	2bff      	cmp	r3, #255	; 0xff
 80013b8:	d105      	bne.n	80013c6 <ssi_read+0x56>
 80013ba:	793b      	ldrb	r3, [r7, #4]
 80013bc:	2bff      	cmp	r3, #255	; 0xff
 80013be:	d102      	bne.n	80013c6 <ssi_read+0x56>
		return 0xFFFFFFFF;
 80013c0:	f04f 33ff 	mov.w	r3, #4294967295
 80013c4:	e00c      	b.n	80013e0 <ssi_read+0x70>
	}else{
		data = (ssiData[4]) | (ssiData[3] << 8)| (ssiData[2] << 16)| (ssiData[1] << 24);
 80013c6:	793b      	ldrb	r3, [r7, #4]
 80013c8:	461a      	mov	r2, r3
 80013ca:	78fb      	ldrb	r3, [r7, #3]
 80013cc:	021b      	lsls	r3, r3, #8
 80013ce:	431a      	orrs	r2, r3
 80013d0:	78bb      	ldrb	r3, [r7, #2]
 80013d2:	041b      	lsls	r3, r3, #16
 80013d4:	431a      	orrs	r2, r3
 80013d6:	787b      	ldrb	r3, [r7, #1]
 80013d8:	061b      	lsls	r3, r3, #24
 80013da:	4313      	orrs	r3, r2
 80013dc:	60bb      	str	r3, [r7, #8]
	}
	return data;
 80013de:	68bb      	ldr	r3, [r7, #8]
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3710      	adds	r7, #16
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	0800569c 	.word	0x0800569c
 80013ec:	20002a30 	.word	0x20002a30

080013f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b085      	sub	sp, #20
 80013f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80013f6:	4b15      	ldr	r3, [pc, #84]	; (800144c <HAL_MspInit+0x5c>)
 80013f8:	699b      	ldr	r3, [r3, #24]
 80013fa:	4a14      	ldr	r2, [pc, #80]	; (800144c <HAL_MspInit+0x5c>)
 80013fc:	f043 0301 	orr.w	r3, r3, #1
 8001400:	6193      	str	r3, [r2, #24]
 8001402:	4b12      	ldr	r3, [pc, #72]	; (800144c <HAL_MspInit+0x5c>)
 8001404:	699b      	ldr	r3, [r3, #24]
 8001406:	f003 0301 	and.w	r3, r3, #1
 800140a:	60bb      	str	r3, [r7, #8]
 800140c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800140e:	4b0f      	ldr	r3, [pc, #60]	; (800144c <HAL_MspInit+0x5c>)
 8001410:	69db      	ldr	r3, [r3, #28]
 8001412:	4a0e      	ldr	r2, [pc, #56]	; (800144c <HAL_MspInit+0x5c>)
 8001414:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001418:	61d3      	str	r3, [r2, #28]
 800141a:	4b0c      	ldr	r3, [pc, #48]	; (800144c <HAL_MspInit+0x5c>)
 800141c:	69db      	ldr	r3, [r3, #28]
 800141e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001422:	607b      	str	r3, [r7, #4]
 8001424:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001426:	4b0a      	ldr	r3, [pc, #40]	; (8001450 <HAL_MspInit+0x60>)
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	60fb      	str	r3, [r7, #12]
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001432:	60fb      	str	r3, [r7, #12]
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800143a:	60fb      	str	r3, [r7, #12]
 800143c:	4a04      	ldr	r2, [pc, #16]	; (8001450 <HAL_MspInit+0x60>)
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001442:	bf00      	nop
 8001444:	3714      	adds	r7, #20
 8001446:	46bd      	mov	sp, r7
 8001448:	bc80      	pop	{r7}
 800144a:	4770      	bx	lr
 800144c:	40021000 	.word	0x40021000
 8001450:	40010000 	.word	0x40010000

08001454 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001458:	bf00      	nop
 800145a:	46bd      	mov	sp, r7
 800145c:	bc80      	pop	{r7}
 800145e:	4770      	bx	lr

08001460 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	dbprintf("%s",__func__);
 8001464:	4902      	ldr	r1, [pc, #8]	; (8001470 <HardFault_Handler+0x10>)
 8001466:	4803      	ldr	r0, [pc, #12]	; (8001474 <HardFault_Handler+0x14>)
 8001468:	f000 f962 	bl	8001730 <dbprintf>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800146c:	e7fe      	b.n	800146c <HardFault_Handler+0xc>
 800146e:	bf00      	nop
 8001470:	08005700 	.word	0x08005700
 8001474:	080056a4 	.word	0x080056a4

08001478 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800147c:	e7fe      	b.n	800147c <MemManage_Handler+0x4>

0800147e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800147e:	b480      	push	{r7}
 8001480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001482:	e7fe      	b.n	8001482 <BusFault_Handler+0x4>

08001484 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001488:	e7fe      	b.n	8001488 <UsageFault_Handler+0x4>

0800148a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800148a:	b480      	push	{r7}
 800148c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800148e:	bf00      	nop
 8001490:	46bd      	mov	sp, r7
 8001492:	bc80      	pop	{r7}
 8001494:	4770      	bx	lr

08001496 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001496:	b480      	push	{r7}
 8001498:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800149a:	bf00      	nop
 800149c:	46bd      	mov	sp, r7
 800149e:	bc80      	pop	{r7}
 80014a0:	4770      	bx	lr

080014a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014a2:	b480      	push	{r7}
 80014a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014a6:	bf00      	nop
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bc80      	pop	{r7}
 80014ac:	4770      	bx	lr

080014ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014ae:	b580      	push	{r7, lr}
 80014b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014b2:	f000 f9bb 	bl	800182c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014b6:	bf00      	nop
 80014b8:	bd80      	pop	{r7, pc}

080014ba <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80014be:	2004      	movs	r0, #4
 80014c0:	f001 f948 	bl	8002754 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80014c4:	bf00      	nop
 80014c6:	bd80      	pop	{r7, pc}

080014c8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80014cc:	4802      	ldr	r0, [pc, #8]	; (80014d8 <DMA1_Channel2_IRQHandler+0x10>)
 80014ce:	f000 fd13 	bl	8001ef8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80014d2:	bf00      	nop
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	20002b38 	.word	0x20002b38

080014dc <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80014e0:	4802      	ldr	r0, [pc, #8]	; (80014ec <DMA1_Channel3_IRQHandler+0x10>)
 80014e2:	f000 fd09 	bl	8001ef8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80014e6:	bf00      	nop
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	20002b7c 	.word	0x20002b7c

080014f0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80014f4:	4802      	ldr	r0, [pc, #8]	; (8001500 <DMA1_Channel4_IRQHandler+0x10>)
 80014f6:	f000 fcff 	bl	8001ef8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80014fa:	bf00      	nop
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	20002bc0 	.word	0x20002bc0

08001504 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001508:	2020      	movs	r0, #32
 800150a:	f001 f923 	bl	8002754 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800150e:	2040      	movs	r0, #64	; 0x40
 8001510:	f001 f920 	bl	8002754 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001514:	2080      	movs	r0, #128	; 0x80
 8001516:	f001 f91d 	bl	8002754 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800151a:	bf00      	nop
 800151c:	bd80      	pop	{r7, pc}
	...

08001520 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001524:	4802      	ldr	r0, [pc, #8]	; (8001530 <SPI1_IRQHandler+0x10>)
 8001526:	f002 feff 	bl	8004328 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */
	//dbprintf("%s",__func__);
  /* USER CODE END SPI1_IRQn 1 */
}
 800152a:	bf00      	nop
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	20002ae0 	.word	0x20002ae0

08001534 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800153c:	4b11      	ldr	r3, [pc, #68]	; (8001584 <_sbrk+0x50>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d102      	bne.n	800154a <_sbrk+0x16>
		heap_end = &end;
 8001544:	4b0f      	ldr	r3, [pc, #60]	; (8001584 <_sbrk+0x50>)
 8001546:	4a10      	ldr	r2, [pc, #64]	; (8001588 <_sbrk+0x54>)
 8001548:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800154a:	4b0e      	ldr	r3, [pc, #56]	; (8001584 <_sbrk+0x50>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001550:	4b0c      	ldr	r3, [pc, #48]	; (8001584 <_sbrk+0x50>)
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	4413      	add	r3, r2
 8001558:	466a      	mov	r2, sp
 800155a:	4293      	cmp	r3, r2
 800155c:	d907      	bls.n	800156e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800155e:	f003 fbe5 	bl	8004d2c <__errno>
 8001562:	4603      	mov	r3, r0
 8001564:	220c      	movs	r2, #12
 8001566:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8001568:	f04f 33ff 	mov.w	r3, #4294967295
 800156c:	e006      	b.n	800157c <_sbrk+0x48>
	}

	heap_end += incr;
 800156e:	4b05      	ldr	r3, [pc, #20]	; (8001584 <_sbrk+0x50>)
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4413      	add	r3, r2
 8001576:	4a03      	ldr	r2, [pc, #12]	; (8001584 <_sbrk+0x50>)
 8001578:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800157a:	68fb      	ldr	r3, [r7, #12]
}
 800157c:	4618      	mov	r0, r3
 800157e:	3710      	adds	r7, #16
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	200004a0 	.word	0x200004a0
 8001588:	20002c58 	.word	0x20002c58

0800158c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001590:	bf00      	nop
 8001592:	46bd      	mov	sp, r7
 8001594:	bc80      	pop	{r7}
 8001596:	4770      	bx	lr

08001598 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 800159c:	4b11      	ldr	r3, [pc, #68]	; (80015e4 <MX_USART1_UART_Init+0x4c>)
 800159e:	4a12      	ldr	r2, [pc, #72]	; (80015e8 <MX_USART1_UART_Init+0x50>)
 80015a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 80015a2:	4b10      	ldr	r3, [pc, #64]	; (80015e4 <MX_USART1_UART_Init+0x4c>)
 80015a4:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 80015a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015aa:	4b0e      	ldr	r3, [pc, #56]	; (80015e4 <MX_USART1_UART_Init+0x4c>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015b0:	4b0c      	ldr	r3, [pc, #48]	; (80015e4 <MX_USART1_UART_Init+0x4c>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015b6:	4b0b      	ldr	r3, [pc, #44]	; (80015e4 <MX_USART1_UART_Init+0x4c>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015bc:	4b09      	ldr	r3, [pc, #36]	; (80015e4 <MX_USART1_UART_Init+0x4c>)
 80015be:	220c      	movs	r2, #12
 80015c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015c2:	4b08      	ldr	r3, [pc, #32]	; (80015e4 <MX_USART1_UART_Init+0x4c>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015c8:	4b06      	ldr	r3, [pc, #24]	; (80015e4 <MX_USART1_UART_Init+0x4c>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015ce:	4805      	ldr	r0, [pc, #20]	; (80015e4 <MX_USART1_UART_Init+0x4c>)
 80015d0:	f003 f9f5 	bl	80049be <HAL_UART_Init>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80015da:	f7ff fbbb 	bl	8000d54 <Error_Handler>
  }

}
 80015de:	bf00      	nop
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	20002c04 	.word	0x20002c04
 80015e8:	40013800 	.word	0x40013800

080015ec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b088      	sub	sp, #32
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f4:	f107 0310 	add.w	r3, r7, #16
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	605a      	str	r2, [r3, #4]
 80015fe:	609a      	str	r2, [r3, #8]
 8001600:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a2f      	ldr	r2, [pc, #188]	; (80016c4 <HAL_UART_MspInit+0xd8>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d157      	bne.n	80016bc <HAL_UART_MspInit+0xd0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800160c:	4b2e      	ldr	r3, [pc, #184]	; (80016c8 <HAL_UART_MspInit+0xdc>)
 800160e:	699b      	ldr	r3, [r3, #24]
 8001610:	4a2d      	ldr	r2, [pc, #180]	; (80016c8 <HAL_UART_MspInit+0xdc>)
 8001612:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001616:	6193      	str	r3, [r2, #24]
 8001618:	4b2b      	ldr	r3, [pc, #172]	; (80016c8 <HAL_UART_MspInit+0xdc>)
 800161a:	699b      	ldr	r3, [r3, #24]
 800161c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001620:	60fb      	str	r3, [r7, #12]
 8001622:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001624:	4b28      	ldr	r3, [pc, #160]	; (80016c8 <HAL_UART_MspInit+0xdc>)
 8001626:	699b      	ldr	r3, [r3, #24]
 8001628:	4a27      	ldr	r2, [pc, #156]	; (80016c8 <HAL_UART_MspInit+0xdc>)
 800162a:	f043 0304 	orr.w	r3, r3, #4
 800162e:	6193      	str	r3, [r2, #24]
 8001630:	4b25      	ldr	r3, [pc, #148]	; (80016c8 <HAL_UART_MspInit+0xdc>)
 8001632:	699b      	ldr	r3, [r3, #24]
 8001634:	f003 0304 	and.w	r3, r3, #4
 8001638:	60bb      	str	r3, [r7, #8]
 800163a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = DBG_TX_Pin;
 800163c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001640:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001642:	2302      	movs	r3, #2
 8001644:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001646:	2303      	movs	r3, #3
 8001648:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DBG_TX_GPIO_Port, &GPIO_InitStruct);
 800164a:	f107 0310 	add.w	r3, r7, #16
 800164e:	4619      	mov	r1, r3
 8001650:	481e      	ldr	r0, [pc, #120]	; (80016cc <HAL_UART_MspInit+0xe0>)
 8001652:	f000 febb 	bl	80023cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DBG_RX_Pin;
 8001656:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800165a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800165c:	2300      	movs	r3, #0
 800165e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001660:	2300      	movs	r3, #0
 8001662:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(DBG_RX_GPIO_Port, &GPIO_InitStruct);
 8001664:	f107 0310 	add.w	r3, r7, #16
 8001668:	4619      	mov	r1, r3
 800166a:	4818      	ldr	r0, [pc, #96]	; (80016cc <HAL_UART_MspInit+0xe0>)
 800166c:	f000 feae 	bl	80023cc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001670:	4b17      	ldr	r3, [pc, #92]	; (80016d0 <HAL_UART_MspInit+0xe4>)
 8001672:	4a18      	ldr	r2, [pc, #96]	; (80016d4 <HAL_UART_MspInit+0xe8>)
 8001674:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001676:	4b16      	ldr	r3, [pc, #88]	; (80016d0 <HAL_UART_MspInit+0xe4>)
 8001678:	2210      	movs	r2, #16
 800167a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800167c:	4b14      	ldr	r3, [pc, #80]	; (80016d0 <HAL_UART_MspInit+0xe4>)
 800167e:	2200      	movs	r2, #0
 8001680:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001682:	4b13      	ldr	r3, [pc, #76]	; (80016d0 <HAL_UART_MspInit+0xe4>)
 8001684:	2280      	movs	r2, #128	; 0x80
 8001686:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001688:	4b11      	ldr	r3, [pc, #68]	; (80016d0 <HAL_UART_MspInit+0xe4>)
 800168a:	2200      	movs	r2, #0
 800168c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800168e:	4b10      	ldr	r3, [pc, #64]	; (80016d0 <HAL_UART_MspInit+0xe4>)
 8001690:	2200      	movs	r2, #0
 8001692:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001694:	4b0e      	ldr	r3, [pc, #56]	; (80016d0 <HAL_UART_MspInit+0xe4>)
 8001696:	2200      	movs	r2, #0
 8001698:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800169a:	4b0d      	ldr	r3, [pc, #52]	; (80016d0 <HAL_UART_MspInit+0xe4>)
 800169c:	2200      	movs	r2, #0
 800169e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80016a0:	480b      	ldr	r0, [pc, #44]	; (80016d0 <HAL_UART_MspInit+0xe4>)
 80016a2:	f000 fa11 	bl	8001ac8 <HAL_DMA_Init>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 80016ac:	f7ff fb52 	bl	8000d54 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	4a07      	ldr	r2, [pc, #28]	; (80016d0 <HAL_UART_MspInit+0xe4>)
 80016b4:	631a      	str	r2, [r3, #48]	; 0x30
 80016b6:	4a06      	ldr	r2, [pc, #24]	; (80016d0 <HAL_UART_MspInit+0xe4>)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80016bc:	bf00      	nop
 80016be:	3720      	adds	r7, #32
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	40013800 	.word	0x40013800
 80016c8:	40021000 	.word	0x40021000
 80016cc:	40010800 	.word	0x40010800
 80016d0:	20002bc0 	.word	0x20002bc0
 80016d4:	40020044 	.word	0x40020044

080016d8 <vprintln>:
        HAL_UART_Transmit(&huart1, (uint8_t*)string, strlen(string), 0xffffff); // send message via UART
    }
}

void vprintln(const char *fmt, va_list argp)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b0b4      	sub	sp, #208	; 0xd0
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	6039      	str	r1, [r7, #0]
    char string[200];
    if(0 < vsprintf(string,fmt,argp)) // build string
 80016e2:	f107 0308 	add.w	r3, r7, #8
 80016e6:	683a      	ldr	r2, [r7, #0]
 80016e8:	6879      	ldr	r1, [r7, #4]
 80016ea:	4618      	mov	r0, r3
 80016ec:	f003 fc44 	bl	8004f78 <vsiprintf>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	dd14      	ble.n	8001720 <vprintln+0x48>
    {
        HAL_UART_Transmit(&huart1, (uint8_t*)string, strlen(string), 0xffffff); // send message via UART
 80016f6:	f107 0308 	add.w	r3, r7, #8
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7fe fd92 	bl	8000224 <strlen>
 8001700:	4603      	mov	r3, r0
 8001702:	b29a      	uxth	r2, r3
 8001704:	f107 0108 	add.w	r1, r7, #8
 8001708:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800170c:	4806      	ldr	r0, [pc, #24]	; (8001728 <vprintln+0x50>)
 800170e:	f003 f9a3 	bl	8004a58 <HAL_UART_Transmit>
        HAL_UART_Transmit(&huart1, (uint8_t*)"\n\r",2, 0xffffff);
 8001712:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8001716:	2202      	movs	r2, #2
 8001718:	4904      	ldr	r1, [pc, #16]	; (800172c <vprintln+0x54>)
 800171a:	4803      	ldr	r0, [pc, #12]	; (8001728 <vprintln+0x50>)
 800171c:	f003 f99c 	bl	8004a58 <HAL_UART_Transmit>
    }
}
 8001720:	bf00      	nop
 8001722:	37d0      	adds	r7, #208	; 0xd0
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	20002c04 	.word	0x20002c04
 800172c:	080056a8 	.word	0x080056a8

08001730 <dbprintf>:

void dbprintf(const char *fmt, ...)
{
 8001730:	b40f      	push	{r0, r1, r2, r3}
 8001732:	b580      	push	{r7, lr}
 8001734:	b082      	sub	sp, #8
 8001736:	af00      	add	r7, sp, #0
    va_list argp;
    va_start(argp, fmt);
 8001738:	f107 0314 	add.w	r3, r7, #20
 800173c:	607b      	str	r3, [r7, #4]
    vprintln((const char *)fmt, argp);
 800173e:	6879      	ldr	r1, [r7, #4]
 8001740:	6938      	ldr	r0, [r7, #16]
 8001742:	f7ff ffc9 	bl	80016d8 <vprintln>
    va_end(argp);
}
 8001746:	bf00      	nop
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001750:	b004      	add	sp, #16
 8001752:	4770      	bx	lr

08001754 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001754:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001756:	e003      	b.n	8001760 <LoopCopyDataInit>

08001758 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001758:	4b0b      	ldr	r3, [pc, #44]	; (8001788 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800175a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800175c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800175e:	3104      	adds	r1, #4

08001760 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001760:	480a      	ldr	r0, [pc, #40]	; (800178c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001762:	4b0b      	ldr	r3, [pc, #44]	; (8001790 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001764:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001766:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001768:	d3f6      	bcc.n	8001758 <CopyDataInit>
  ldr r2, =_sbss
 800176a:	4a0a      	ldr	r2, [pc, #40]	; (8001794 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800176c:	e002      	b.n	8001774 <LoopFillZerobss>

0800176e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800176e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001770:	f842 3b04 	str.w	r3, [r2], #4

08001774 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001774:	4b08      	ldr	r3, [pc, #32]	; (8001798 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001776:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001778:	d3f9      	bcc.n	800176e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800177a:	f7ff ff07 	bl	800158c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800177e:	f003 fadb 	bl	8004d38 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001782:	f7ff f9eb 	bl	8000b5c <main>
  bx lr
 8001786:	4770      	bx	lr
  ldr r3, =_sidata
 8001788:	08005768 	.word	0x08005768
  ldr r0, =_sdata
 800178c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001790:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 8001794:	20000074 	.word	0x20000074
  ldr r3, = _ebss
 8001798:	20002c58 	.word	0x20002c58

0800179c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800179c:	e7fe      	b.n	800179c <ADC1_2_IRQHandler>
	...

080017a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017a4:	4b08      	ldr	r3, [pc, #32]	; (80017c8 <HAL_Init+0x28>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a07      	ldr	r2, [pc, #28]	; (80017c8 <HAL_Init+0x28>)
 80017aa:	f043 0310 	orr.w	r3, r3, #16
 80017ae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017b0:	2003      	movs	r0, #3
 80017b2:	f000 f947 	bl	8001a44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017b6:	2000      	movs	r0, #0
 80017b8:	f000 f808 	bl	80017cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017bc:	f7ff fe18 	bl	80013f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017c0:	2300      	movs	r3, #0
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	40022000 	.word	0x40022000

080017cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017d4:	4b12      	ldr	r3, [pc, #72]	; (8001820 <HAL_InitTick+0x54>)
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	4b12      	ldr	r3, [pc, #72]	; (8001824 <HAL_InitTick+0x58>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	4619      	mov	r1, r3
 80017de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80017e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ea:	4618      	mov	r0, r3
 80017ec:	f000 f95f 	bl	8001aae <HAL_SYSTICK_Config>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e00e      	b.n	8001818 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2b0f      	cmp	r3, #15
 80017fe:	d80a      	bhi.n	8001816 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001800:	2200      	movs	r2, #0
 8001802:	6879      	ldr	r1, [r7, #4]
 8001804:	f04f 30ff 	mov.w	r0, #4294967295
 8001808:	f000 f927 	bl	8001a5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800180c:	4a06      	ldr	r2, [pc, #24]	; (8001828 <HAL_InitTick+0x5c>)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001812:	2300      	movs	r3, #0
 8001814:	e000      	b.n	8001818 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
}
 8001818:	4618      	mov	r0, r3
 800181a:	3708      	adds	r7, #8
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	20000004 	.word	0x20000004
 8001824:	2000000c 	.word	0x2000000c
 8001828:	20000008 	.word	0x20000008

0800182c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001830:	4b05      	ldr	r3, [pc, #20]	; (8001848 <HAL_IncTick+0x1c>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	461a      	mov	r2, r3
 8001836:	4b05      	ldr	r3, [pc, #20]	; (800184c <HAL_IncTick+0x20>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4413      	add	r3, r2
 800183c:	4a03      	ldr	r2, [pc, #12]	; (800184c <HAL_IncTick+0x20>)
 800183e:	6013      	str	r3, [r2, #0]
}
 8001840:	bf00      	nop
 8001842:	46bd      	mov	sp, r7
 8001844:	bc80      	pop	{r7}
 8001846:	4770      	bx	lr
 8001848:	2000000c 	.word	0x2000000c
 800184c:	20002c44 	.word	0x20002c44

08001850 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  return uwTick;
 8001854:	4b02      	ldr	r3, [pc, #8]	; (8001860 <HAL_GetTick+0x10>)
 8001856:	681b      	ldr	r3, [r3, #0]
}
 8001858:	4618      	mov	r0, r3
 800185a:	46bd      	mov	sp, r7
 800185c:	bc80      	pop	{r7}
 800185e:	4770      	bx	lr
 8001860:	20002c44 	.word	0x20002c44

08001864 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800186c:	f7ff fff0 	bl	8001850 <HAL_GetTick>
 8001870:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800187c:	d005      	beq.n	800188a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800187e:	4b0a      	ldr	r3, [pc, #40]	; (80018a8 <HAL_Delay+0x44>)
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	461a      	mov	r2, r3
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	4413      	add	r3, r2
 8001888:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800188a:	bf00      	nop
 800188c:	f7ff ffe0 	bl	8001850 <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	68fa      	ldr	r2, [r7, #12]
 8001898:	429a      	cmp	r2, r3
 800189a:	d8f7      	bhi.n	800188c <HAL_Delay+0x28>
  {
  }
}
 800189c:	bf00      	nop
 800189e:	bf00      	nop
 80018a0:	3710      	adds	r7, #16
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	2000000c 	.word	0x2000000c

080018ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b085      	sub	sp, #20
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f003 0307 	and.w	r3, r3, #7
 80018ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018bc:	4b0c      	ldr	r3, [pc, #48]	; (80018f0 <__NVIC_SetPriorityGrouping+0x44>)
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018c2:	68ba      	ldr	r2, [r7, #8]
 80018c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018c8:	4013      	ands	r3, r2
 80018ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018de:	4a04      	ldr	r2, [pc, #16]	; (80018f0 <__NVIC_SetPriorityGrouping+0x44>)
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	60d3      	str	r3, [r2, #12]
}
 80018e4:	bf00      	nop
 80018e6:	3714      	adds	r7, #20
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bc80      	pop	{r7}
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	e000ed00 	.word	0xe000ed00

080018f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018f8:	4b04      	ldr	r3, [pc, #16]	; (800190c <__NVIC_GetPriorityGrouping+0x18>)
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	0a1b      	lsrs	r3, r3, #8
 80018fe:	f003 0307 	and.w	r3, r3, #7
}
 8001902:	4618      	mov	r0, r3
 8001904:	46bd      	mov	sp, r7
 8001906:	bc80      	pop	{r7}
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	e000ed00 	.word	0xe000ed00

08001910 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	4603      	mov	r3, r0
 8001918:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800191a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191e:	2b00      	cmp	r3, #0
 8001920:	db0b      	blt.n	800193a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001922:	79fb      	ldrb	r3, [r7, #7]
 8001924:	f003 021f 	and.w	r2, r3, #31
 8001928:	4906      	ldr	r1, [pc, #24]	; (8001944 <__NVIC_EnableIRQ+0x34>)
 800192a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800192e:	095b      	lsrs	r3, r3, #5
 8001930:	2001      	movs	r0, #1
 8001932:	fa00 f202 	lsl.w	r2, r0, r2
 8001936:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800193a:	bf00      	nop
 800193c:	370c      	adds	r7, #12
 800193e:	46bd      	mov	sp, r7
 8001940:	bc80      	pop	{r7}
 8001942:	4770      	bx	lr
 8001944:	e000e100 	.word	0xe000e100

08001948 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	4603      	mov	r3, r0
 8001950:	6039      	str	r1, [r7, #0]
 8001952:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001958:	2b00      	cmp	r3, #0
 800195a:	db0a      	blt.n	8001972 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	b2da      	uxtb	r2, r3
 8001960:	490c      	ldr	r1, [pc, #48]	; (8001994 <__NVIC_SetPriority+0x4c>)
 8001962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001966:	0112      	lsls	r2, r2, #4
 8001968:	b2d2      	uxtb	r2, r2
 800196a:	440b      	add	r3, r1
 800196c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001970:	e00a      	b.n	8001988 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	b2da      	uxtb	r2, r3
 8001976:	4908      	ldr	r1, [pc, #32]	; (8001998 <__NVIC_SetPriority+0x50>)
 8001978:	79fb      	ldrb	r3, [r7, #7]
 800197a:	f003 030f 	and.w	r3, r3, #15
 800197e:	3b04      	subs	r3, #4
 8001980:	0112      	lsls	r2, r2, #4
 8001982:	b2d2      	uxtb	r2, r2
 8001984:	440b      	add	r3, r1
 8001986:	761a      	strb	r2, [r3, #24]
}
 8001988:	bf00      	nop
 800198a:	370c      	adds	r7, #12
 800198c:	46bd      	mov	sp, r7
 800198e:	bc80      	pop	{r7}
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	e000e100 	.word	0xe000e100
 8001998:	e000ed00 	.word	0xe000ed00

0800199c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800199c:	b480      	push	{r7}
 800199e:	b089      	sub	sp, #36	; 0x24
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	60f8      	str	r0, [r7, #12]
 80019a4:	60b9      	str	r1, [r7, #8]
 80019a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	f003 0307 	and.w	r3, r3, #7
 80019ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	f1c3 0307 	rsb	r3, r3, #7
 80019b6:	2b04      	cmp	r3, #4
 80019b8:	bf28      	it	cs
 80019ba:	2304      	movcs	r3, #4
 80019bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	3304      	adds	r3, #4
 80019c2:	2b06      	cmp	r3, #6
 80019c4:	d902      	bls.n	80019cc <NVIC_EncodePriority+0x30>
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	3b03      	subs	r3, #3
 80019ca:	e000      	b.n	80019ce <NVIC_EncodePriority+0x32>
 80019cc:	2300      	movs	r3, #0
 80019ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019d0:	f04f 32ff 	mov.w	r2, #4294967295
 80019d4:	69bb      	ldr	r3, [r7, #24]
 80019d6:	fa02 f303 	lsl.w	r3, r2, r3
 80019da:	43da      	mvns	r2, r3
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	401a      	ands	r2, r3
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019e4:	f04f 31ff 	mov.w	r1, #4294967295
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	fa01 f303 	lsl.w	r3, r1, r3
 80019ee:	43d9      	mvns	r1, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019f4:	4313      	orrs	r3, r2
         );
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3724      	adds	r7, #36	; 0x24
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bc80      	pop	{r7}
 80019fe:	4770      	bx	lr

08001a00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	3b01      	subs	r3, #1
 8001a0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a10:	d301      	bcc.n	8001a16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a12:	2301      	movs	r3, #1
 8001a14:	e00f      	b.n	8001a36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a16:	4a0a      	ldr	r2, [pc, #40]	; (8001a40 <SysTick_Config+0x40>)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	3b01      	subs	r3, #1
 8001a1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a1e:	210f      	movs	r1, #15
 8001a20:	f04f 30ff 	mov.w	r0, #4294967295
 8001a24:	f7ff ff90 	bl	8001948 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a28:	4b05      	ldr	r3, [pc, #20]	; (8001a40 <SysTick_Config+0x40>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a2e:	4b04      	ldr	r3, [pc, #16]	; (8001a40 <SysTick_Config+0x40>)
 8001a30:	2207      	movs	r2, #7
 8001a32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a34:	2300      	movs	r3, #0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	e000e010 	.word	0xe000e010

08001a44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f7ff ff2d 	bl	80018ac <__NVIC_SetPriorityGrouping>
}
 8001a52:	bf00      	nop
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}

08001a5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	b086      	sub	sp, #24
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	4603      	mov	r3, r0
 8001a62:	60b9      	str	r1, [r7, #8]
 8001a64:	607a      	str	r2, [r7, #4]
 8001a66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a6c:	f7ff ff42 	bl	80018f4 <__NVIC_GetPriorityGrouping>
 8001a70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a72:	687a      	ldr	r2, [r7, #4]
 8001a74:	68b9      	ldr	r1, [r7, #8]
 8001a76:	6978      	ldr	r0, [r7, #20]
 8001a78:	f7ff ff90 	bl	800199c <NVIC_EncodePriority>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a82:	4611      	mov	r1, r2
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7ff ff5f 	bl	8001948 <__NVIC_SetPriority>
}
 8001a8a:	bf00      	nop
 8001a8c:	3718      	adds	r7, #24
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b082      	sub	sp, #8
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	4603      	mov	r3, r0
 8001a9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7ff ff35 	bl	8001910 <__NVIC_EnableIRQ>
}
 8001aa6:	bf00      	nop
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b082      	sub	sp, #8
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f7ff ffa2 	bl	8001a00 <SysTick_Config>
 8001abc:	4603      	mov	r3, r0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
	...

08001ac8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b085      	sub	sp, #20
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d101      	bne.n	8001ade <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e059      	b.n	8001b92 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	4b2d      	ldr	r3, [pc, #180]	; (8001b9c <HAL_DMA_Init+0xd4>)
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d80f      	bhi.n	8001b0a <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	461a      	mov	r2, r3
 8001af0:	4b2b      	ldr	r3, [pc, #172]	; (8001ba0 <HAL_DMA_Init+0xd8>)
 8001af2:	4413      	add	r3, r2
 8001af4:	4a2b      	ldr	r2, [pc, #172]	; (8001ba4 <HAL_DMA_Init+0xdc>)
 8001af6:	fba2 2303 	umull	r2, r3, r2, r3
 8001afa:	091b      	lsrs	r3, r3, #4
 8001afc:	009a      	lsls	r2, r3, #2
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4a28      	ldr	r2, [pc, #160]	; (8001ba8 <HAL_DMA_Init+0xe0>)
 8001b06:	63da      	str	r2, [r3, #60]	; 0x3c
 8001b08:	e00e      	b.n	8001b28 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	461a      	mov	r2, r3
 8001b10:	4b26      	ldr	r3, [pc, #152]	; (8001bac <HAL_DMA_Init+0xe4>)
 8001b12:	4413      	add	r3, r2
 8001b14:	4a23      	ldr	r2, [pc, #140]	; (8001ba4 <HAL_DMA_Init+0xdc>)
 8001b16:	fba2 2303 	umull	r2, r3, r2, r3
 8001b1a:	091b      	lsrs	r3, r3, #4
 8001b1c:	009a      	lsls	r2, r3, #2
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4a22      	ldr	r2, [pc, #136]	; (8001bb0 <HAL_DMA_Init+0xe8>)
 8001b26:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2202      	movs	r2, #2
 8001b2c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001b3e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001b42:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001b4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	68db      	ldr	r3, [r3, #12]
 8001b52:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b58:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	695b      	ldr	r3, [r3, #20]
 8001b5e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b64:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	69db      	ldr	r3, [r3, #28]
 8001b6a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001b6c:	68fa      	ldr	r2, [r7, #12]
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	68fa      	ldr	r2, [r7, #12]
 8001b78:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2201      	movs	r2, #1
 8001b84:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001b90:	2300      	movs	r3, #0
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3714      	adds	r7, #20
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bc80      	pop	{r7}
 8001b9a:	4770      	bx	lr
 8001b9c:	40020407 	.word	0x40020407
 8001ba0:	bffdfff8 	.word	0xbffdfff8
 8001ba4:	cccccccd 	.word	0xcccccccd
 8001ba8:	40020000 	.word	0x40020000
 8001bac:	bffdfbf8 	.word	0xbffdfbf8
 8001bb0:	40020400 	.word	0x40020400

08001bb4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b086      	sub	sp, #24
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	60f8      	str	r0, [r7, #12]
 8001bbc:	60b9      	str	r1, [r7, #8]
 8001bbe:	607a      	str	r2, [r7, #4]
 8001bc0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d101      	bne.n	8001bd4 <HAL_DMA_Start_IT+0x20>
 8001bd0:	2302      	movs	r3, #2
 8001bd2:	e04a      	b.n	8001c6a <HAL_DMA_Start_IT+0xb6>
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d13a      	bne.n	8001c5c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	2202      	movs	r2, #2
 8001bea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f022 0201 	bic.w	r2, r2, #1
 8001c02:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	68b9      	ldr	r1, [r7, #8]
 8001c0a:	68f8      	ldr	r0, [r7, #12]
 8001c0c:	f000 fbb0 	bl	8002370 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d008      	beq.n	8001c2a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f042 020e 	orr.w	r2, r2, #14
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	e00f      	b.n	8001c4a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f022 0204 	bic.w	r2, r2, #4
 8001c38:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f042 020a 	orr.w	r2, r2, #10
 8001c48:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f042 0201 	orr.w	r2, r2, #1
 8001c58:	601a      	str	r2, [r3, #0]
 8001c5a:	e005      	b.n	8001c68 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001c64:	2302      	movs	r3, #2
 8001c66:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001c68:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3718      	adds	r7, #24
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c72:	b480      	push	{r7}
 8001c74:	b085      	sub	sp, #20
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d008      	beq.n	8001c9a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2204      	movs	r2, #4
 8001c8c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2200      	movs	r2, #0
 8001c92:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e020      	b.n	8001cdc <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f022 020e 	bic.w	r2, r2, #14
 8001ca8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f022 0201 	bic.w	r2, r2, #1
 8001cb8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cc2:	2101      	movs	r1, #1
 8001cc4:	fa01 f202 	lsl.w	r2, r1, r2
 8001cc8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2201      	movs	r2, #1
 8001cce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001cda:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3714      	adds	r7, #20
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bc80      	pop	{r7}
 8001ce4:	4770      	bx	lr
	...

08001ce8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d005      	beq.n	8001d0a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2204      	movs	r2, #4
 8001d02:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	73fb      	strb	r3, [r7, #15]
 8001d08:	e0d6      	b.n	8001eb8 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f022 020e 	bic.w	r2, r2, #14
 8001d18:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f022 0201 	bic.w	r2, r2, #1
 8001d28:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	461a      	mov	r2, r3
 8001d30:	4b64      	ldr	r3, [pc, #400]	; (8001ec4 <HAL_DMA_Abort_IT+0x1dc>)
 8001d32:	429a      	cmp	r2, r3
 8001d34:	d958      	bls.n	8001de8 <HAL_DMA_Abort_IT+0x100>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a63      	ldr	r2, [pc, #396]	; (8001ec8 <HAL_DMA_Abort_IT+0x1e0>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d04f      	beq.n	8001de0 <HAL_DMA_Abort_IT+0xf8>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a61      	ldr	r2, [pc, #388]	; (8001ecc <HAL_DMA_Abort_IT+0x1e4>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d048      	beq.n	8001ddc <HAL_DMA_Abort_IT+0xf4>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a60      	ldr	r2, [pc, #384]	; (8001ed0 <HAL_DMA_Abort_IT+0x1e8>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d040      	beq.n	8001dd6 <HAL_DMA_Abort_IT+0xee>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a5e      	ldr	r2, [pc, #376]	; (8001ed4 <HAL_DMA_Abort_IT+0x1ec>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d038      	beq.n	8001dd0 <HAL_DMA_Abort_IT+0xe8>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a5d      	ldr	r2, [pc, #372]	; (8001ed8 <HAL_DMA_Abort_IT+0x1f0>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d030      	beq.n	8001dca <HAL_DMA_Abort_IT+0xe2>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a5b      	ldr	r2, [pc, #364]	; (8001edc <HAL_DMA_Abort_IT+0x1f4>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d028      	beq.n	8001dc4 <HAL_DMA_Abort_IT+0xdc>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a53      	ldr	r2, [pc, #332]	; (8001ec4 <HAL_DMA_Abort_IT+0x1dc>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d020      	beq.n	8001dbe <HAL_DMA_Abort_IT+0xd6>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a57      	ldr	r2, [pc, #348]	; (8001ee0 <HAL_DMA_Abort_IT+0x1f8>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d019      	beq.n	8001dba <HAL_DMA_Abort_IT+0xd2>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a56      	ldr	r2, [pc, #344]	; (8001ee4 <HAL_DMA_Abort_IT+0x1fc>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d012      	beq.n	8001db6 <HAL_DMA_Abort_IT+0xce>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a54      	ldr	r2, [pc, #336]	; (8001ee8 <HAL_DMA_Abort_IT+0x200>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d00a      	beq.n	8001db0 <HAL_DMA_Abort_IT+0xc8>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a53      	ldr	r2, [pc, #332]	; (8001eec <HAL_DMA_Abort_IT+0x204>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d102      	bne.n	8001daa <HAL_DMA_Abort_IT+0xc2>
 8001da4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001da8:	e01b      	b.n	8001de2 <HAL_DMA_Abort_IT+0xfa>
 8001daa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001dae:	e018      	b.n	8001de2 <HAL_DMA_Abort_IT+0xfa>
 8001db0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001db4:	e015      	b.n	8001de2 <HAL_DMA_Abort_IT+0xfa>
 8001db6:	2310      	movs	r3, #16
 8001db8:	e013      	b.n	8001de2 <HAL_DMA_Abort_IT+0xfa>
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e011      	b.n	8001de2 <HAL_DMA_Abort_IT+0xfa>
 8001dbe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001dc2:	e00e      	b.n	8001de2 <HAL_DMA_Abort_IT+0xfa>
 8001dc4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001dc8:	e00b      	b.n	8001de2 <HAL_DMA_Abort_IT+0xfa>
 8001dca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001dce:	e008      	b.n	8001de2 <HAL_DMA_Abort_IT+0xfa>
 8001dd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dd4:	e005      	b.n	8001de2 <HAL_DMA_Abort_IT+0xfa>
 8001dd6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001dda:	e002      	b.n	8001de2 <HAL_DMA_Abort_IT+0xfa>
 8001ddc:	2310      	movs	r3, #16
 8001dde:	e000      	b.n	8001de2 <HAL_DMA_Abort_IT+0xfa>
 8001de0:	2301      	movs	r3, #1
 8001de2:	4a43      	ldr	r2, [pc, #268]	; (8001ef0 <HAL_DMA_Abort_IT+0x208>)
 8001de4:	6053      	str	r3, [r2, #4]
 8001de6:	e057      	b.n	8001e98 <HAL_DMA_Abort_IT+0x1b0>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a36      	ldr	r2, [pc, #216]	; (8001ec8 <HAL_DMA_Abort_IT+0x1e0>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d04f      	beq.n	8001e92 <HAL_DMA_Abort_IT+0x1aa>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a35      	ldr	r2, [pc, #212]	; (8001ecc <HAL_DMA_Abort_IT+0x1e4>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d048      	beq.n	8001e8e <HAL_DMA_Abort_IT+0x1a6>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a33      	ldr	r2, [pc, #204]	; (8001ed0 <HAL_DMA_Abort_IT+0x1e8>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d040      	beq.n	8001e88 <HAL_DMA_Abort_IT+0x1a0>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a32      	ldr	r2, [pc, #200]	; (8001ed4 <HAL_DMA_Abort_IT+0x1ec>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d038      	beq.n	8001e82 <HAL_DMA_Abort_IT+0x19a>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a30      	ldr	r2, [pc, #192]	; (8001ed8 <HAL_DMA_Abort_IT+0x1f0>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d030      	beq.n	8001e7c <HAL_DMA_Abort_IT+0x194>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a2f      	ldr	r2, [pc, #188]	; (8001edc <HAL_DMA_Abort_IT+0x1f4>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d028      	beq.n	8001e76 <HAL_DMA_Abort_IT+0x18e>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a26      	ldr	r2, [pc, #152]	; (8001ec4 <HAL_DMA_Abort_IT+0x1dc>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d020      	beq.n	8001e70 <HAL_DMA_Abort_IT+0x188>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a2b      	ldr	r2, [pc, #172]	; (8001ee0 <HAL_DMA_Abort_IT+0x1f8>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d019      	beq.n	8001e6c <HAL_DMA_Abort_IT+0x184>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a29      	ldr	r2, [pc, #164]	; (8001ee4 <HAL_DMA_Abort_IT+0x1fc>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d012      	beq.n	8001e68 <HAL_DMA_Abort_IT+0x180>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a28      	ldr	r2, [pc, #160]	; (8001ee8 <HAL_DMA_Abort_IT+0x200>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d00a      	beq.n	8001e62 <HAL_DMA_Abort_IT+0x17a>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a26      	ldr	r2, [pc, #152]	; (8001eec <HAL_DMA_Abort_IT+0x204>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d102      	bne.n	8001e5c <HAL_DMA_Abort_IT+0x174>
 8001e56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e5a:	e01b      	b.n	8001e94 <HAL_DMA_Abort_IT+0x1ac>
 8001e5c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e60:	e018      	b.n	8001e94 <HAL_DMA_Abort_IT+0x1ac>
 8001e62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e66:	e015      	b.n	8001e94 <HAL_DMA_Abort_IT+0x1ac>
 8001e68:	2310      	movs	r3, #16
 8001e6a:	e013      	b.n	8001e94 <HAL_DMA_Abort_IT+0x1ac>
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e011      	b.n	8001e94 <HAL_DMA_Abort_IT+0x1ac>
 8001e70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e74:	e00e      	b.n	8001e94 <HAL_DMA_Abort_IT+0x1ac>
 8001e76:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001e7a:	e00b      	b.n	8001e94 <HAL_DMA_Abort_IT+0x1ac>
 8001e7c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e80:	e008      	b.n	8001e94 <HAL_DMA_Abort_IT+0x1ac>
 8001e82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e86:	e005      	b.n	8001e94 <HAL_DMA_Abort_IT+0x1ac>
 8001e88:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e8c:	e002      	b.n	8001e94 <HAL_DMA_Abort_IT+0x1ac>
 8001e8e:	2310      	movs	r3, #16
 8001e90:	e000      	b.n	8001e94 <HAL_DMA_Abort_IT+0x1ac>
 8001e92:	2301      	movs	r3, #1
 8001e94:	4a17      	ldr	r2, [pc, #92]	; (8001ef4 <HAL_DMA_Abort_IT+0x20c>)
 8001e96:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d003      	beq.n	8001eb8 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	4798      	blx	r3
    } 
  }
  return status;
 8001eb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3710      	adds	r7, #16
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	40020080 	.word	0x40020080
 8001ec8:	40020008 	.word	0x40020008
 8001ecc:	4002001c 	.word	0x4002001c
 8001ed0:	40020030 	.word	0x40020030
 8001ed4:	40020044 	.word	0x40020044
 8001ed8:	40020058 	.word	0x40020058
 8001edc:	4002006c 	.word	0x4002006c
 8001ee0:	40020408 	.word	0x40020408
 8001ee4:	4002041c 	.word	0x4002041c
 8001ee8:	40020430 	.word	0x40020430
 8001eec:	40020444 	.word	0x40020444
 8001ef0:	40020400 	.word	0x40020400
 8001ef4:	40020000 	.word	0x40020000

08001ef8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f14:	2204      	movs	r2, #4
 8001f16:	409a      	lsls	r2, r3
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	f000 80d6 	beq.w	80020ce <HAL_DMA_IRQHandler+0x1d6>
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	f003 0304 	and.w	r3, r3, #4
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	f000 80d0 	beq.w	80020ce <HAL_DMA_IRQHandler+0x1d6>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0320 	and.w	r3, r3, #32
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d107      	bne.n	8001f4c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f022 0204 	bic.w	r2, r2, #4
 8001f4a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	461a      	mov	r2, r3
 8001f52:	4b9b      	ldr	r3, [pc, #620]	; (80021c0 <HAL_DMA_IRQHandler+0x2c8>)
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d958      	bls.n	800200a <HAL_DMA_IRQHandler+0x112>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a99      	ldr	r2, [pc, #612]	; (80021c4 <HAL_DMA_IRQHandler+0x2cc>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d04f      	beq.n	8002002 <HAL_DMA_IRQHandler+0x10a>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a98      	ldr	r2, [pc, #608]	; (80021c8 <HAL_DMA_IRQHandler+0x2d0>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d048      	beq.n	8001ffe <HAL_DMA_IRQHandler+0x106>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a96      	ldr	r2, [pc, #600]	; (80021cc <HAL_DMA_IRQHandler+0x2d4>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d040      	beq.n	8001ff8 <HAL_DMA_IRQHandler+0x100>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a95      	ldr	r2, [pc, #596]	; (80021d0 <HAL_DMA_IRQHandler+0x2d8>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d038      	beq.n	8001ff2 <HAL_DMA_IRQHandler+0xfa>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a93      	ldr	r2, [pc, #588]	; (80021d4 <HAL_DMA_IRQHandler+0x2dc>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d030      	beq.n	8001fec <HAL_DMA_IRQHandler+0xf4>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a92      	ldr	r2, [pc, #584]	; (80021d8 <HAL_DMA_IRQHandler+0x2e0>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d028      	beq.n	8001fe6 <HAL_DMA_IRQHandler+0xee>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a89      	ldr	r2, [pc, #548]	; (80021c0 <HAL_DMA_IRQHandler+0x2c8>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d020      	beq.n	8001fe0 <HAL_DMA_IRQHandler+0xe8>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a8e      	ldr	r2, [pc, #568]	; (80021dc <HAL_DMA_IRQHandler+0x2e4>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d019      	beq.n	8001fdc <HAL_DMA_IRQHandler+0xe4>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a8c      	ldr	r2, [pc, #560]	; (80021e0 <HAL_DMA_IRQHandler+0x2e8>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d012      	beq.n	8001fd8 <HAL_DMA_IRQHandler+0xe0>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a8b      	ldr	r2, [pc, #556]	; (80021e4 <HAL_DMA_IRQHandler+0x2ec>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d00a      	beq.n	8001fd2 <HAL_DMA_IRQHandler+0xda>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a89      	ldr	r2, [pc, #548]	; (80021e8 <HAL_DMA_IRQHandler+0x2f0>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d102      	bne.n	8001fcc <HAL_DMA_IRQHandler+0xd4>
 8001fc6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001fca:	e01b      	b.n	8002004 <HAL_DMA_IRQHandler+0x10c>
 8001fcc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001fd0:	e018      	b.n	8002004 <HAL_DMA_IRQHandler+0x10c>
 8001fd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fd6:	e015      	b.n	8002004 <HAL_DMA_IRQHandler+0x10c>
 8001fd8:	2340      	movs	r3, #64	; 0x40
 8001fda:	e013      	b.n	8002004 <HAL_DMA_IRQHandler+0x10c>
 8001fdc:	2304      	movs	r3, #4
 8001fde:	e011      	b.n	8002004 <HAL_DMA_IRQHandler+0x10c>
 8001fe0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001fe4:	e00e      	b.n	8002004 <HAL_DMA_IRQHandler+0x10c>
 8001fe6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001fea:	e00b      	b.n	8002004 <HAL_DMA_IRQHandler+0x10c>
 8001fec:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001ff0:	e008      	b.n	8002004 <HAL_DMA_IRQHandler+0x10c>
 8001ff2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001ff6:	e005      	b.n	8002004 <HAL_DMA_IRQHandler+0x10c>
 8001ff8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ffc:	e002      	b.n	8002004 <HAL_DMA_IRQHandler+0x10c>
 8001ffe:	2340      	movs	r3, #64	; 0x40
 8002000:	e000      	b.n	8002004 <HAL_DMA_IRQHandler+0x10c>
 8002002:	2304      	movs	r3, #4
 8002004:	4a79      	ldr	r2, [pc, #484]	; (80021ec <HAL_DMA_IRQHandler+0x2f4>)
 8002006:	6053      	str	r3, [r2, #4]
 8002008:	e057      	b.n	80020ba <HAL_DMA_IRQHandler+0x1c2>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a6d      	ldr	r2, [pc, #436]	; (80021c4 <HAL_DMA_IRQHandler+0x2cc>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d04f      	beq.n	80020b4 <HAL_DMA_IRQHandler+0x1bc>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a6b      	ldr	r2, [pc, #428]	; (80021c8 <HAL_DMA_IRQHandler+0x2d0>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d048      	beq.n	80020b0 <HAL_DMA_IRQHandler+0x1b8>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a6a      	ldr	r2, [pc, #424]	; (80021cc <HAL_DMA_IRQHandler+0x2d4>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d040      	beq.n	80020aa <HAL_DMA_IRQHandler+0x1b2>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a68      	ldr	r2, [pc, #416]	; (80021d0 <HAL_DMA_IRQHandler+0x2d8>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d038      	beq.n	80020a4 <HAL_DMA_IRQHandler+0x1ac>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a67      	ldr	r2, [pc, #412]	; (80021d4 <HAL_DMA_IRQHandler+0x2dc>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d030      	beq.n	800209e <HAL_DMA_IRQHandler+0x1a6>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a65      	ldr	r2, [pc, #404]	; (80021d8 <HAL_DMA_IRQHandler+0x2e0>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d028      	beq.n	8002098 <HAL_DMA_IRQHandler+0x1a0>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a5d      	ldr	r2, [pc, #372]	; (80021c0 <HAL_DMA_IRQHandler+0x2c8>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d020      	beq.n	8002092 <HAL_DMA_IRQHandler+0x19a>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a61      	ldr	r2, [pc, #388]	; (80021dc <HAL_DMA_IRQHandler+0x2e4>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d019      	beq.n	800208e <HAL_DMA_IRQHandler+0x196>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a60      	ldr	r2, [pc, #384]	; (80021e0 <HAL_DMA_IRQHandler+0x2e8>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d012      	beq.n	800208a <HAL_DMA_IRQHandler+0x192>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a5e      	ldr	r2, [pc, #376]	; (80021e4 <HAL_DMA_IRQHandler+0x2ec>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d00a      	beq.n	8002084 <HAL_DMA_IRQHandler+0x18c>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a5d      	ldr	r2, [pc, #372]	; (80021e8 <HAL_DMA_IRQHandler+0x2f0>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d102      	bne.n	800207e <HAL_DMA_IRQHandler+0x186>
 8002078:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800207c:	e01b      	b.n	80020b6 <HAL_DMA_IRQHandler+0x1be>
 800207e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002082:	e018      	b.n	80020b6 <HAL_DMA_IRQHandler+0x1be>
 8002084:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002088:	e015      	b.n	80020b6 <HAL_DMA_IRQHandler+0x1be>
 800208a:	2340      	movs	r3, #64	; 0x40
 800208c:	e013      	b.n	80020b6 <HAL_DMA_IRQHandler+0x1be>
 800208e:	2304      	movs	r3, #4
 8002090:	e011      	b.n	80020b6 <HAL_DMA_IRQHandler+0x1be>
 8002092:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002096:	e00e      	b.n	80020b6 <HAL_DMA_IRQHandler+0x1be>
 8002098:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800209c:	e00b      	b.n	80020b6 <HAL_DMA_IRQHandler+0x1be>
 800209e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80020a2:	e008      	b.n	80020b6 <HAL_DMA_IRQHandler+0x1be>
 80020a4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80020a8:	e005      	b.n	80020b6 <HAL_DMA_IRQHandler+0x1be>
 80020aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020ae:	e002      	b.n	80020b6 <HAL_DMA_IRQHandler+0x1be>
 80020b0:	2340      	movs	r3, #64	; 0x40
 80020b2:	e000      	b.n	80020b6 <HAL_DMA_IRQHandler+0x1be>
 80020b4:	2304      	movs	r3, #4
 80020b6:	4a4e      	ldr	r2, [pc, #312]	; (80021f0 <HAL_DMA_IRQHandler+0x2f8>)
 80020b8:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020be:	2b00      	cmp	r3, #0
 80020c0:	f000 8136 	beq.w	8002330 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80020cc:	e130      	b.n	8002330 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d2:	2202      	movs	r2, #2
 80020d4:	409a      	lsls	r2, r3
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	4013      	ands	r3, r2
 80020da:	2b00      	cmp	r3, #0
 80020dc:	f000 80f8 	beq.w	80022d0 <HAL_DMA_IRQHandler+0x3d8>
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	f003 0302 	and.w	r3, r3, #2
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	f000 80f2 	beq.w	80022d0 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0320 	and.w	r3, r3, #32
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d10b      	bne.n	8002112 <HAL_DMA_IRQHandler+0x21a>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f022 020a 	bic.w	r2, r2, #10
 8002108:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2201      	movs	r2, #1
 800210e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	461a      	mov	r2, r3
 8002118:	4b29      	ldr	r3, [pc, #164]	; (80021c0 <HAL_DMA_IRQHandler+0x2c8>)
 800211a:	429a      	cmp	r2, r3
 800211c:	d973      	bls.n	8002206 <HAL_DMA_IRQHandler+0x30e>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a28      	ldr	r2, [pc, #160]	; (80021c4 <HAL_DMA_IRQHandler+0x2cc>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d06a      	beq.n	80021fe <HAL_DMA_IRQHandler+0x306>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a26      	ldr	r2, [pc, #152]	; (80021c8 <HAL_DMA_IRQHandler+0x2d0>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d063      	beq.n	80021fa <HAL_DMA_IRQHandler+0x302>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a25      	ldr	r2, [pc, #148]	; (80021cc <HAL_DMA_IRQHandler+0x2d4>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d05b      	beq.n	80021f4 <HAL_DMA_IRQHandler+0x2fc>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a23      	ldr	r2, [pc, #140]	; (80021d0 <HAL_DMA_IRQHandler+0x2d8>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d038      	beq.n	80021b8 <HAL_DMA_IRQHandler+0x2c0>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a22      	ldr	r2, [pc, #136]	; (80021d4 <HAL_DMA_IRQHandler+0x2dc>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d030      	beq.n	80021b2 <HAL_DMA_IRQHandler+0x2ba>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a20      	ldr	r2, [pc, #128]	; (80021d8 <HAL_DMA_IRQHandler+0x2e0>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d028      	beq.n	80021ac <HAL_DMA_IRQHandler+0x2b4>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a18      	ldr	r2, [pc, #96]	; (80021c0 <HAL_DMA_IRQHandler+0x2c8>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d020      	beq.n	80021a6 <HAL_DMA_IRQHandler+0x2ae>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a1c      	ldr	r2, [pc, #112]	; (80021dc <HAL_DMA_IRQHandler+0x2e4>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d019      	beq.n	80021a2 <HAL_DMA_IRQHandler+0x2aa>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a1b      	ldr	r2, [pc, #108]	; (80021e0 <HAL_DMA_IRQHandler+0x2e8>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d012      	beq.n	800219e <HAL_DMA_IRQHandler+0x2a6>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a19      	ldr	r2, [pc, #100]	; (80021e4 <HAL_DMA_IRQHandler+0x2ec>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d00a      	beq.n	8002198 <HAL_DMA_IRQHandler+0x2a0>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a18      	ldr	r2, [pc, #96]	; (80021e8 <HAL_DMA_IRQHandler+0x2f0>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d102      	bne.n	8002192 <HAL_DMA_IRQHandler+0x29a>
 800218c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002190:	e036      	b.n	8002200 <HAL_DMA_IRQHandler+0x308>
 8002192:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002196:	e033      	b.n	8002200 <HAL_DMA_IRQHandler+0x308>
 8002198:	f44f 7300 	mov.w	r3, #512	; 0x200
 800219c:	e030      	b.n	8002200 <HAL_DMA_IRQHandler+0x308>
 800219e:	2320      	movs	r3, #32
 80021a0:	e02e      	b.n	8002200 <HAL_DMA_IRQHandler+0x308>
 80021a2:	2302      	movs	r3, #2
 80021a4:	e02c      	b.n	8002200 <HAL_DMA_IRQHandler+0x308>
 80021a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021aa:	e029      	b.n	8002200 <HAL_DMA_IRQHandler+0x308>
 80021ac:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80021b0:	e026      	b.n	8002200 <HAL_DMA_IRQHandler+0x308>
 80021b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021b6:	e023      	b.n	8002200 <HAL_DMA_IRQHandler+0x308>
 80021b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021bc:	e020      	b.n	8002200 <HAL_DMA_IRQHandler+0x308>
 80021be:	bf00      	nop
 80021c0:	40020080 	.word	0x40020080
 80021c4:	40020008 	.word	0x40020008
 80021c8:	4002001c 	.word	0x4002001c
 80021cc:	40020030 	.word	0x40020030
 80021d0:	40020044 	.word	0x40020044
 80021d4:	40020058 	.word	0x40020058
 80021d8:	4002006c 	.word	0x4002006c
 80021dc:	40020408 	.word	0x40020408
 80021e0:	4002041c 	.word	0x4002041c
 80021e4:	40020430 	.word	0x40020430
 80021e8:	40020444 	.word	0x40020444
 80021ec:	40020400 	.word	0x40020400
 80021f0:	40020000 	.word	0x40020000
 80021f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021f8:	e002      	b.n	8002200 <HAL_DMA_IRQHandler+0x308>
 80021fa:	2320      	movs	r3, #32
 80021fc:	e000      	b.n	8002200 <HAL_DMA_IRQHandler+0x308>
 80021fe:	2302      	movs	r3, #2
 8002200:	4a4e      	ldr	r2, [pc, #312]	; (800233c <HAL_DMA_IRQHandler+0x444>)
 8002202:	6053      	str	r3, [r2, #4]
 8002204:	e057      	b.n	80022b6 <HAL_DMA_IRQHandler+0x3be>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a4d      	ldr	r2, [pc, #308]	; (8002340 <HAL_DMA_IRQHandler+0x448>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d04f      	beq.n	80022b0 <HAL_DMA_IRQHandler+0x3b8>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a4b      	ldr	r2, [pc, #300]	; (8002344 <HAL_DMA_IRQHandler+0x44c>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d048      	beq.n	80022ac <HAL_DMA_IRQHandler+0x3b4>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a4a      	ldr	r2, [pc, #296]	; (8002348 <HAL_DMA_IRQHandler+0x450>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d040      	beq.n	80022a6 <HAL_DMA_IRQHandler+0x3ae>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a48      	ldr	r2, [pc, #288]	; (800234c <HAL_DMA_IRQHandler+0x454>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d038      	beq.n	80022a0 <HAL_DMA_IRQHandler+0x3a8>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a47      	ldr	r2, [pc, #284]	; (8002350 <HAL_DMA_IRQHandler+0x458>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d030      	beq.n	800229a <HAL_DMA_IRQHandler+0x3a2>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a45      	ldr	r2, [pc, #276]	; (8002354 <HAL_DMA_IRQHandler+0x45c>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d028      	beq.n	8002294 <HAL_DMA_IRQHandler+0x39c>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a44      	ldr	r2, [pc, #272]	; (8002358 <HAL_DMA_IRQHandler+0x460>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d020      	beq.n	800228e <HAL_DMA_IRQHandler+0x396>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a42      	ldr	r2, [pc, #264]	; (800235c <HAL_DMA_IRQHandler+0x464>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d019      	beq.n	800228a <HAL_DMA_IRQHandler+0x392>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a41      	ldr	r2, [pc, #260]	; (8002360 <HAL_DMA_IRQHandler+0x468>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d012      	beq.n	8002286 <HAL_DMA_IRQHandler+0x38e>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a3f      	ldr	r2, [pc, #252]	; (8002364 <HAL_DMA_IRQHandler+0x46c>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d00a      	beq.n	8002280 <HAL_DMA_IRQHandler+0x388>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a3e      	ldr	r2, [pc, #248]	; (8002368 <HAL_DMA_IRQHandler+0x470>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d102      	bne.n	800227a <HAL_DMA_IRQHandler+0x382>
 8002274:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002278:	e01b      	b.n	80022b2 <HAL_DMA_IRQHandler+0x3ba>
 800227a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800227e:	e018      	b.n	80022b2 <HAL_DMA_IRQHandler+0x3ba>
 8002280:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002284:	e015      	b.n	80022b2 <HAL_DMA_IRQHandler+0x3ba>
 8002286:	2320      	movs	r3, #32
 8002288:	e013      	b.n	80022b2 <HAL_DMA_IRQHandler+0x3ba>
 800228a:	2302      	movs	r3, #2
 800228c:	e011      	b.n	80022b2 <HAL_DMA_IRQHandler+0x3ba>
 800228e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002292:	e00e      	b.n	80022b2 <HAL_DMA_IRQHandler+0x3ba>
 8002294:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002298:	e00b      	b.n	80022b2 <HAL_DMA_IRQHandler+0x3ba>
 800229a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800229e:	e008      	b.n	80022b2 <HAL_DMA_IRQHandler+0x3ba>
 80022a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022a4:	e005      	b.n	80022b2 <HAL_DMA_IRQHandler+0x3ba>
 80022a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022aa:	e002      	b.n	80022b2 <HAL_DMA_IRQHandler+0x3ba>
 80022ac:	2320      	movs	r3, #32
 80022ae:	e000      	b.n	80022b2 <HAL_DMA_IRQHandler+0x3ba>
 80022b0:	2302      	movs	r3, #2
 80022b2:	4a2e      	ldr	r2, [pc, #184]	; (800236c <HAL_DMA_IRQHandler+0x474>)
 80022b4:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2200      	movs	r2, #0
 80022ba:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d034      	beq.n	8002330 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80022ce:	e02f      	b.n	8002330 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d4:	2208      	movs	r2, #8
 80022d6:	409a      	lsls	r2, r3
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	4013      	ands	r3, r2
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d028      	beq.n	8002332 <HAL_DMA_IRQHandler+0x43a>
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	f003 0308 	and.w	r3, r3, #8
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d023      	beq.n	8002332 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f022 020e 	bic.w	r2, r2, #14
 80022f8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002302:	2101      	movs	r1, #1
 8002304:	fa01 f202 	lsl.w	r2, r1, r2
 8002308:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2201      	movs	r2, #1
 800230e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2201      	movs	r2, #1
 8002314:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2200      	movs	r2, #0
 800231c:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002324:	2b00      	cmp	r3, #0
 8002326:	d004      	beq.n	8002332 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	4798      	blx	r3
    }
  }
  return;
 8002330:	bf00      	nop
 8002332:	bf00      	nop
}
 8002334:	3710      	adds	r7, #16
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	40020400 	.word	0x40020400
 8002340:	40020008 	.word	0x40020008
 8002344:	4002001c 	.word	0x4002001c
 8002348:	40020030 	.word	0x40020030
 800234c:	40020044 	.word	0x40020044
 8002350:	40020058 	.word	0x40020058
 8002354:	4002006c 	.word	0x4002006c
 8002358:	40020080 	.word	0x40020080
 800235c:	40020408 	.word	0x40020408
 8002360:	4002041c 	.word	0x4002041c
 8002364:	40020430 	.word	0x40020430
 8002368:	40020444 	.word	0x40020444
 800236c:	40020000 	.word	0x40020000

08002370 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002370:	b480      	push	{r7}
 8002372:	b085      	sub	sp, #20
 8002374:	af00      	add	r7, sp, #0
 8002376:	60f8      	str	r0, [r7, #12]
 8002378:	60b9      	str	r1, [r7, #8]
 800237a:	607a      	str	r2, [r7, #4]
 800237c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002386:	2101      	movs	r1, #1
 8002388:	fa01 f202 	lsl.w	r2, r1, r2
 800238c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	683a      	ldr	r2, [r7, #0]
 8002394:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	2b10      	cmp	r3, #16
 800239c:	d108      	bne.n	80023b0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	68ba      	ldr	r2, [r7, #8]
 80023ac:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80023ae:	e007      	b.n	80023c0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	68ba      	ldr	r2, [r7, #8]
 80023b6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	60da      	str	r2, [r3, #12]
}
 80023c0:	bf00      	nop
 80023c2:	3714      	adds	r7, #20
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bc80      	pop	{r7}
 80023c8:	4770      	bx	lr
	...

080023cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b08b      	sub	sp, #44	; 0x2c
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80023d6:	2300      	movs	r3, #0
 80023d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80023da:	2300      	movs	r3, #0
 80023dc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023de:	e179      	b.n	80026d4 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80023e0:	2201      	movs	r2, #1
 80023e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e4:	fa02 f303 	lsl.w	r3, r2, r3
 80023e8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	69fa      	ldr	r2, [r7, #28]
 80023f0:	4013      	ands	r3, r2
 80023f2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	f040 8168 	bne.w	80026ce <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	4aa0      	ldr	r2, [pc, #640]	; (8002684 <HAL_GPIO_Init+0x2b8>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d05e      	beq.n	80024c6 <HAL_GPIO_Init+0xfa>
 8002408:	4a9e      	ldr	r2, [pc, #632]	; (8002684 <HAL_GPIO_Init+0x2b8>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d875      	bhi.n	80024fa <HAL_GPIO_Init+0x12e>
 800240e:	4a9e      	ldr	r2, [pc, #632]	; (8002688 <HAL_GPIO_Init+0x2bc>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d058      	beq.n	80024c6 <HAL_GPIO_Init+0xfa>
 8002414:	4a9c      	ldr	r2, [pc, #624]	; (8002688 <HAL_GPIO_Init+0x2bc>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d86f      	bhi.n	80024fa <HAL_GPIO_Init+0x12e>
 800241a:	4a9c      	ldr	r2, [pc, #624]	; (800268c <HAL_GPIO_Init+0x2c0>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d052      	beq.n	80024c6 <HAL_GPIO_Init+0xfa>
 8002420:	4a9a      	ldr	r2, [pc, #616]	; (800268c <HAL_GPIO_Init+0x2c0>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d869      	bhi.n	80024fa <HAL_GPIO_Init+0x12e>
 8002426:	4a9a      	ldr	r2, [pc, #616]	; (8002690 <HAL_GPIO_Init+0x2c4>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d04c      	beq.n	80024c6 <HAL_GPIO_Init+0xfa>
 800242c:	4a98      	ldr	r2, [pc, #608]	; (8002690 <HAL_GPIO_Init+0x2c4>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d863      	bhi.n	80024fa <HAL_GPIO_Init+0x12e>
 8002432:	4a98      	ldr	r2, [pc, #608]	; (8002694 <HAL_GPIO_Init+0x2c8>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d046      	beq.n	80024c6 <HAL_GPIO_Init+0xfa>
 8002438:	4a96      	ldr	r2, [pc, #600]	; (8002694 <HAL_GPIO_Init+0x2c8>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d85d      	bhi.n	80024fa <HAL_GPIO_Init+0x12e>
 800243e:	2b12      	cmp	r3, #18
 8002440:	d82a      	bhi.n	8002498 <HAL_GPIO_Init+0xcc>
 8002442:	2b12      	cmp	r3, #18
 8002444:	d859      	bhi.n	80024fa <HAL_GPIO_Init+0x12e>
 8002446:	a201      	add	r2, pc, #4	; (adr r2, 800244c <HAL_GPIO_Init+0x80>)
 8002448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800244c:	080024c7 	.word	0x080024c7
 8002450:	080024a1 	.word	0x080024a1
 8002454:	080024b3 	.word	0x080024b3
 8002458:	080024f5 	.word	0x080024f5
 800245c:	080024fb 	.word	0x080024fb
 8002460:	080024fb 	.word	0x080024fb
 8002464:	080024fb 	.word	0x080024fb
 8002468:	080024fb 	.word	0x080024fb
 800246c:	080024fb 	.word	0x080024fb
 8002470:	080024fb 	.word	0x080024fb
 8002474:	080024fb 	.word	0x080024fb
 8002478:	080024fb 	.word	0x080024fb
 800247c:	080024fb 	.word	0x080024fb
 8002480:	080024fb 	.word	0x080024fb
 8002484:	080024fb 	.word	0x080024fb
 8002488:	080024fb 	.word	0x080024fb
 800248c:	080024fb 	.word	0x080024fb
 8002490:	080024a9 	.word	0x080024a9
 8002494:	080024bd 	.word	0x080024bd
 8002498:	4a7f      	ldr	r2, [pc, #508]	; (8002698 <HAL_GPIO_Init+0x2cc>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d013      	beq.n	80024c6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800249e:	e02c      	b.n	80024fa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	623b      	str	r3, [r7, #32]
          break;
 80024a6:	e029      	b.n	80024fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	3304      	adds	r3, #4
 80024ae:	623b      	str	r3, [r7, #32]
          break;
 80024b0:	e024      	b.n	80024fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	68db      	ldr	r3, [r3, #12]
 80024b6:	3308      	adds	r3, #8
 80024b8:	623b      	str	r3, [r7, #32]
          break;
 80024ba:	e01f      	b.n	80024fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	330c      	adds	r3, #12
 80024c2:	623b      	str	r3, [r7, #32]
          break;
 80024c4:	e01a      	b.n	80024fc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d102      	bne.n	80024d4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80024ce:	2304      	movs	r3, #4
 80024d0:	623b      	str	r3, [r7, #32]
          break;
 80024d2:	e013      	b.n	80024fc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d105      	bne.n	80024e8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80024dc:	2308      	movs	r3, #8
 80024de:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	69fa      	ldr	r2, [r7, #28]
 80024e4:	611a      	str	r2, [r3, #16]
          break;
 80024e6:	e009      	b.n	80024fc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80024e8:	2308      	movs	r3, #8
 80024ea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	69fa      	ldr	r2, [r7, #28]
 80024f0:	615a      	str	r2, [r3, #20]
          break;
 80024f2:	e003      	b.n	80024fc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80024f4:	2300      	movs	r3, #0
 80024f6:	623b      	str	r3, [r7, #32]
          break;
 80024f8:	e000      	b.n	80024fc <HAL_GPIO_Init+0x130>
          break;
 80024fa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80024fc:	69bb      	ldr	r3, [r7, #24]
 80024fe:	2bff      	cmp	r3, #255	; 0xff
 8002500:	d801      	bhi.n	8002506 <HAL_GPIO_Init+0x13a>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	e001      	b.n	800250a <HAL_GPIO_Init+0x13e>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	3304      	adds	r3, #4
 800250a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800250c:	69bb      	ldr	r3, [r7, #24]
 800250e:	2bff      	cmp	r3, #255	; 0xff
 8002510:	d802      	bhi.n	8002518 <HAL_GPIO_Init+0x14c>
 8002512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	e002      	b.n	800251e <HAL_GPIO_Init+0x152>
 8002518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251a:	3b08      	subs	r3, #8
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	210f      	movs	r1, #15
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	fa01 f303 	lsl.w	r3, r1, r3
 800252c:	43db      	mvns	r3, r3
 800252e:	401a      	ands	r2, r3
 8002530:	6a39      	ldr	r1, [r7, #32]
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	fa01 f303 	lsl.w	r3, r1, r3
 8002538:	431a      	orrs	r2, r3
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002546:	2b00      	cmp	r3, #0
 8002548:	f000 80c1 	beq.w	80026ce <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800254c:	4b53      	ldr	r3, [pc, #332]	; (800269c <HAL_GPIO_Init+0x2d0>)
 800254e:	699b      	ldr	r3, [r3, #24]
 8002550:	4a52      	ldr	r2, [pc, #328]	; (800269c <HAL_GPIO_Init+0x2d0>)
 8002552:	f043 0301 	orr.w	r3, r3, #1
 8002556:	6193      	str	r3, [r2, #24]
 8002558:	4b50      	ldr	r3, [pc, #320]	; (800269c <HAL_GPIO_Init+0x2d0>)
 800255a:	699b      	ldr	r3, [r3, #24]
 800255c:	f003 0301 	and.w	r3, r3, #1
 8002560:	60bb      	str	r3, [r7, #8]
 8002562:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002564:	4a4e      	ldr	r2, [pc, #312]	; (80026a0 <HAL_GPIO_Init+0x2d4>)
 8002566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002568:	089b      	lsrs	r3, r3, #2
 800256a:	3302      	adds	r3, #2
 800256c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002570:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002574:	f003 0303 	and.w	r3, r3, #3
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	220f      	movs	r2, #15
 800257c:	fa02 f303 	lsl.w	r3, r2, r3
 8002580:	43db      	mvns	r3, r3
 8002582:	68fa      	ldr	r2, [r7, #12]
 8002584:	4013      	ands	r3, r2
 8002586:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	4a46      	ldr	r2, [pc, #280]	; (80026a4 <HAL_GPIO_Init+0x2d8>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d01f      	beq.n	80025d0 <HAL_GPIO_Init+0x204>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	4a45      	ldr	r2, [pc, #276]	; (80026a8 <HAL_GPIO_Init+0x2dc>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d019      	beq.n	80025cc <HAL_GPIO_Init+0x200>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	4a44      	ldr	r2, [pc, #272]	; (80026ac <HAL_GPIO_Init+0x2e0>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d013      	beq.n	80025c8 <HAL_GPIO_Init+0x1fc>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	4a43      	ldr	r2, [pc, #268]	; (80026b0 <HAL_GPIO_Init+0x2e4>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d00d      	beq.n	80025c4 <HAL_GPIO_Init+0x1f8>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	4a42      	ldr	r2, [pc, #264]	; (80026b4 <HAL_GPIO_Init+0x2e8>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d007      	beq.n	80025c0 <HAL_GPIO_Init+0x1f4>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	4a41      	ldr	r2, [pc, #260]	; (80026b8 <HAL_GPIO_Init+0x2ec>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d101      	bne.n	80025bc <HAL_GPIO_Init+0x1f0>
 80025b8:	2305      	movs	r3, #5
 80025ba:	e00a      	b.n	80025d2 <HAL_GPIO_Init+0x206>
 80025bc:	2306      	movs	r3, #6
 80025be:	e008      	b.n	80025d2 <HAL_GPIO_Init+0x206>
 80025c0:	2304      	movs	r3, #4
 80025c2:	e006      	b.n	80025d2 <HAL_GPIO_Init+0x206>
 80025c4:	2303      	movs	r3, #3
 80025c6:	e004      	b.n	80025d2 <HAL_GPIO_Init+0x206>
 80025c8:	2302      	movs	r3, #2
 80025ca:	e002      	b.n	80025d2 <HAL_GPIO_Init+0x206>
 80025cc:	2301      	movs	r3, #1
 80025ce:	e000      	b.n	80025d2 <HAL_GPIO_Init+0x206>
 80025d0:	2300      	movs	r3, #0
 80025d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025d4:	f002 0203 	and.w	r2, r2, #3
 80025d8:	0092      	lsls	r2, r2, #2
 80025da:	4093      	lsls	r3, r2
 80025dc:	68fa      	ldr	r2, [r7, #12]
 80025de:	4313      	orrs	r3, r2
 80025e0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80025e2:	492f      	ldr	r1, [pc, #188]	; (80026a0 <HAL_GPIO_Init+0x2d4>)
 80025e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e6:	089b      	lsrs	r3, r3, #2
 80025e8:	3302      	adds	r3, #2
 80025ea:	68fa      	ldr	r2, [r7, #12]
 80025ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d006      	beq.n	800260a <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80025fc:	4b2f      	ldr	r3, [pc, #188]	; (80026bc <HAL_GPIO_Init+0x2f0>)
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	492e      	ldr	r1, [pc, #184]	; (80026bc <HAL_GPIO_Init+0x2f0>)
 8002602:	69bb      	ldr	r3, [r7, #24]
 8002604:	4313      	orrs	r3, r2
 8002606:	600b      	str	r3, [r1, #0]
 8002608:	e006      	b.n	8002618 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800260a:	4b2c      	ldr	r3, [pc, #176]	; (80026bc <HAL_GPIO_Init+0x2f0>)
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	69bb      	ldr	r3, [r7, #24]
 8002610:	43db      	mvns	r3, r3
 8002612:	492a      	ldr	r1, [pc, #168]	; (80026bc <HAL_GPIO_Init+0x2f0>)
 8002614:	4013      	ands	r3, r2
 8002616:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d006      	beq.n	8002632 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002624:	4b25      	ldr	r3, [pc, #148]	; (80026bc <HAL_GPIO_Init+0x2f0>)
 8002626:	685a      	ldr	r2, [r3, #4]
 8002628:	4924      	ldr	r1, [pc, #144]	; (80026bc <HAL_GPIO_Init+0x2f0>)
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	4313      	orrs	r3, r2
 800262e:	604b      	str	r3, [r1, #4]
 8002630:	e006      	b.n	8002640 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002632:	4b22      	ldr	r3, [pc, #136]	; (80026bc <HAL_GPIO_Init+0x2f0>)
 8002634:	685a      	ldr	r2, [r3, #4]
 8002636:	69bb      	ldr	r3, [r7, #24]
 8002638:	43db      	mvns	r3, r3
 800263a:	4920      	ldr	r1, [pc, #128]	; (80026bc <HAL_GPIO_Init+0x2f0>)
 800263c:	4013      	ands	r3, r2
 800263e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002648:	2b00      	cmp	r3, #0
 800264a:	d006      	beq.n	800265a <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800264c:	4b1b      	ldr	r3, [pc, #108]	; (80026bc <HAL_GPIO_Init+0x2f0>)
 800264e:	689a      	ldr	r2, [r3, #8]
 8002650:	491a      	ldr	r1, [pc, #104]	; (80026bc <HAL_GPIO_Init+0x2f0>)
 8002652:	69bb      	ldr	r3, [r7, #24]
 8002654:	4313      	orrs	r3, r2
 8002656:	608b      	str	r3, [r1, #8]
 8002658:	e006      	b.n	8002668 <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800265a:	4b18      	ldr	r3, [pc, #96]	; (80026bc <HAL_GPIO_Init+0x2f0>)
 800265c:	689a      	ldr	r2, [r3, #8]
 800265e:	69bb      	ldr	r3, [r7, #24]
 8002660:	43db      	mvns	r3, r3
 8002662:	4916      	ldr	r1, [pc, #88]	; (80026bc <HAL_GPIO_Init+0x2f0>)
 8002664:	4013      	ands	r3, r2
 8002666:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d025      	beq.n	80026c0 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002674:	4b11      	ldr	r3, [pc, #68]	; (80026bc <HAL_GPIO_Init+0x2f0>)
 8002676:	68da      	ldr	r2, [r3, #12]
 8002678:	4910      	ldr	r1, [pc, #64]	; (80026bc <HAL_GPIO_Init+0x2f0>)
 800267a:	69bb      	ldr	r3, [r7, #24]
 800267c:	4313      	orrs	r3, r2
 800267e:	60cb      	str	r3, [r1, #12]
 8002680:	e025      	b.n	80026ce <HAL_GPIO_Init+0x302>
 8002682:	bf00      	nop
 8002684:	10320000 	.word	0x10320000
 8002688:	10310000 	.word	0x10310000
 800268c:	10220000 	.word	0x10220000
 8002690:	10210000 	.word	0x10210000
 8002694:	10120000 	.word	0x10120000
 8002698:	10110000 	.word	0x10110000
 800269c:	40021000 	.word	0x40021000
 80026a0:	40010000 	.word	0x40010000
 80026a4:	40010800 	.word	0x40010800
 80026a8:	40010c00 	.word	0x40010c00
 80026ac:	40011000 	.word	0x40011000
 80026b0:	40011400 	.word	0x40011400
 80026b4:	40011800 	.word	0x40011800
 80026b8:	40011c00 	.word	0x40011c00
 80026bc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80026c0:	4b0b      	ldr	r3, [pc, #44]	; (80026f0 <HAL_GPIO_Init+0x324>)
 80026c2:	68da      	ldr	r2, [r3, #12]
 80026c4:	69bb      	ldr	r3, [r7, #24]
 80026c6:	43db      	mvns	r3, r3
 80026c8:	4909      	ldr	r1, [pc, #36]	; (80026f0 <HAL_GPIO_Init+0x324>)
 80026ca:	4013      	ands	r3, r2
 80026cc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80026ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d0:	3301      	adds	r3, #1
 80026d2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026da:	fa22 f303 	lsr.w	r3, r2, r3
 80026de:	2b00      	cmp	r3, #0
 80026e0:	f47f ae7e 	bne.w	80023e0 <HAL_GPIO_Init+0x14>
  }
}
 80026e4:	bf00      	nop
 80026e6:	bf00      	nop
 80026e8:	372c      	adds	r7, #44	; 0x2c
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bc80      	pop	{r7}
 80026ee:	4770      	bx	lr
 80026f0:	40010400 	.word	0x40010400

080026f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b085      	sub	sp, #20
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	460b      	mov	r3, r1
 80026fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	689a      	ldr	r2, [r3, #8]
 8002704:	887b      	ldrh	r3, [r7, #2]
 8002706:	4013      	ands	r3, r2
 8002708:	2b00      	cmp	r3, #0
 800270a:	d002      	beq.n	8002712 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800270c:	2301      	movs	r3, #1
 800270e:	73fb      	strb	r3, [r7, #15]
 8002710:	e001      	b.n	8002716 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002712:	2300      	movs	r3, #0
 8002714:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002716:	7bfb      	ldrb	r3, [r7, #15]
}
 8002718:	4618      	mov	r0, r3
 800271a:	3714      	adds	r7, #20
 800271c:	46bd      	mov	sp, r7
 800271e:	bc80      	pop	{r7}
 8002720:	4770      	bx	lr

08002722 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002722:	b480      	push	{r7}
 8002724:	b083      	sub	sp, #12
 8002726:	af00      	add	r7, sp, #0
 8002728:	6078      	str	r0, [r7, #4]
 800272a:	460b      	mov	r3, r1
 800272c:	807b      	strh	r3, [r7, #2]
 800272e:	4613      	mov	r3, r2
 8002730:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002732:	787b      	ldrb	r3, [r7, #1]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d003      	beq.n	8002740 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002738:	887a      	ldrh	r2, [r7, #2]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800273e:	e003      	b.n	8002748 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002740:	887b      	ldrh	r3, [r7, #2]
 8002742:	041a      	lsls	r2, r3, #16
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	611a      	str	r2, [r3, #16]
}
 8002748:	bf00      	nop
 800274a:	370c      	adds	r7, #12
 800274c:	46bd      	mov	sp, r7
 800274e:	bc80      	pop	{r7}
 8002750:	4770      	bx	lr
	...

08002754 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
 800275a:	4603      	mov	r3, r0
 800275c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800275e:	4b08      	ldr	r3, [pc, #32]	; (8002780 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002760:	695a      	ldr	r2, [r3, #20]
 8002762:	88fb      	ldrh	r3, [r7, #6]
 8002764:	4013      	ands	r3, r2
 8002766:	2b00      	cmp	r3, #0
 8002768:	d006      	beq.n	8002778 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800276a:	4a05      	ldr	r2, [pc, #20]	; (8002780 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800276c:	88fb      	ldrh	r3, [r7, #6]
 800276e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002770:	88fb      	ldrh	r3, [r7, #6]
 8002772:	4618      	mov	r0, r3
 8002774:	f7fe fa96 	bl	8000ca4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002778:	bf00      	nop
 800277a:	3708      	adds	r7, #8
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}
 8002780:	40010400 	.word	0x40010400

08002784 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b084      	sub	sp, #16
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d101      	bne.n	8002796 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e12b      	b.n	80029ee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800279c:	b2db      	uxtb	r3, r3
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d106      	bne.n	80027b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f7fe f998 	bl	8000ae0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2224      	movs	r2, #36	; 0x24
 80027b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f022 0201 	bic.w	r2, r2, #1
 80027c6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80027d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80027e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80027e8:	f000 fffa 	bl	80037e0 <HAL_RCC_GetPCLK1Freq>
 80027ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	4a81      	ldr	r2, [pc, #516]	; (80029f8 <HAL_I2C_Init+0x274>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d807      	bhi.n	8002808 <HAL_I2C_Init+0x84>
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	4a80      	ldr	r2, [pc, #512]	; (80029fc <HAL_I2C_Init+0x278>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	bf94      	ite	ls
 8002800:	2301      	movls	r3, #1
 8002802:	2300      	movhi	r3, #0
 8002804:	b2db      	uxtb	r3, r3
 8002806:	e006      	b.n	8002816 <HAL_I2C_Init+0x92>
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	4a7d      	ldr	r2, [pc, #500]	; (8002a00 <HAL_I2C_Init+0x27c>)
 800280c:	4293      	cmp	r3, r2
 800280e:	bf94      	ite	ls
 8002810:	2301      	movls	r3, #1
 8002812:	2300      	movhi	r3, #0
 8002814:	b2db      	uxtb	r3, r3
 8002816:	2b00      	cmp	r3, #0
 8002818:	d001      	beq.n	800281e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e0e7      	b.n	80029ee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	4a78      	ldr	r2, [pc, #480]	; (8002a04 <HAL_I2C_Init+0x280>)
 8002822:	fba2 2303 	umull	r2, r3, r2, r3
 8002826:	0c9b      	lsrs	r3, r3, #18
 8002828:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	68ba      	ldr	r2, [r7, #8]
 800283a:	430a      	orrs	r2, r1
 800283c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	6a1b      	ldr	r3, [r3, #32]
 8002844:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	4a6a      	ldr	r2, [pc, #424]	; (80029f8 <HAL_I2C_Init+0x274>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d802      	bhi.n	8002858 <HAL_I2C_Init+0xd4>
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	3301      	adds	r3, #1
 8002856:	e009      	b.n	800286c <HAL_I2C_Init+0xe8>
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800285e:	fb02 f303 	mul.w	r3, r2, r3
 8002862:	4a69      	ldr	r2, [pc, #420]	; (8002a08 <HAL_I2C_Init+0x284>)
 8002864:	fba2 2303 	umull	r2, r3, r2, r3
 8002868:	099b      	lsrs	r3, r3, #6
 800286a:	3301      	adds	r3, #1
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	6812      	ldr	r2, [r2, #0]
 8002870:	430b      	orrs	r3, r1
 8002872:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	69db      	ldr	r3, [r3, #28]
 800287a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800287e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	495c      	ldr	r1, [pc, #368]	; (80029f8 <HAL_I2C_Init+0x274>)
 8002888:	428b      	cmp	r3, r1
 800288a:	d819      	bhi.n	80028c0 <HAL_I2C_Init+0x13c>
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	1e59      	subs	r1, r3, #1
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	005b      	lsls	r3, r3, #1
 8002896:	fbb1 f3f3 	udiv	r3, r1, r3
 800289a:	1c59      	adds	r1, r3, #1
 800289c:	f640 73fc 	movw	r3, #4092	; 0xffc
 80028a0:	400b      	ands	r3, r1
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d00a      	beq.n	80028bc <HAL_I2C_Init+0x138>
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	1e59      	subs	r1, r3, #1
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	005b      	lsls	r3, r3, #1
 80028b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80028b4:	3301      	adds	r3, #1
 80028b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028ba:	e051      	b.n	8002960 <HAL_I2C_Init+0x1dc>
 80028bc:	2304      	movs	r3, #4
 80028be:	e04f      	b.n	8002960 <HAL_I2C_Init+0x1dc>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d111      	bne.n	80028ec <HAL_I2C_Init+0x168>
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	1e58      	subs	r0, r3, #1
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6859      	ldr	r1, [r3, #4]
 80028d0:	460b      	mov	r3, r1
 80028d2:	005b      	lsls	r3, r3, #1
 80028d4:	440b      	add	r3, r1
 80028d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80028da:	3301      	adds	r3, #1
 80028dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	bf0c      	ite	eq
 80028e4:	2301      	moveq	r3, #1
 80028e6:	2300      	movne	r3, #0
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	e012      	b.n	8002912 <HAL_I2C_Init+0x18e>
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	1e58      	subs	r0, r3, #1
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6859      	ldr	r1, [r3, #4]
 80028f4:	460b      	mov	r3, r1
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	440b      	add	r3, r1
 80028fa:	0099      	lsls	r1, r3, #2
 80028fc:	440b      	add	r3, r1
 80028fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002902:	3301      	adds	r3, #1
 8002904:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002908:	2b00      	cmp	r3, #0
 800290a:	bf0c      	ite	eq
 800290c:	2301      	moveq	r3, #1
 800290e:	2300      	movne	r3, #0
 8002910:	b2db      	uxtb	r3, r3
 8002912:	2b00      	cmp	r3, #0
 8002914:	d001      	beq.n	800291a <HAL_I2C_Init+0x196>
 8002916:	2301      	movs	r3, #1
 8002918:	e022      	b.n	8002960 <HAL_I2C_Init+0x1dc>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d10e      	bne.n	8002940 <HAL_I2C_Init+0x1bc>
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	1e58      	subs	r0, r3, #1
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6859      	ldr	r1, [r3, #4]
 800292a:	460b      	mov	r3, r1
 800292c:	005b      	lsls	r3, r3, #1
 800292e:	440b      	add	r3, r1
 8002930:	fbb0 f3f3 	udiv	r3, r0, r3
 8002934:	3301      	adds	r3, #1
 8002936:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800293a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800293e:	e00f      	b.n	8002960 <HAL_I2C_Init+0x1dc>
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	1e58      	subs	r0, r3, #1
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6859      	ldr	r1, [r3, #4]
 8002948:	460b      	mov	r3, r1
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	440b      	add	r3, r1
 800294e:	0099      	lsls	r1, r3, #2
 8002950:	440b      	add	r3, r1
 8002952:	fbb0 f3f3 	udiv	r3, r0, r3
 8002956:	3301      	adds	r3, #1
 8002958:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800295c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002960:	6879      	ldr	r1, [r7, #4]
 8002962:	6809      	ldr	r1, [r1, #0]
 8002964:	4313      	orrs	r3, r2
 8002966:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	69da      	ldr	r2, [r3, #28]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6a1b      	ldr	r3, [r3, #32]
 800297a:	431a      	orrs	r2, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	430a      	orrs	r2, r1
 8002982:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800298e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	6911      	ldr	r1, [r2, #16]
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	68d2      	ldr	r2, [r2, #12]
 800299a:	4311      	orrs	r1, r2
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	6812      	ldr	r2, [r2, #0]
 80029a0:	430b      	orrs	r3, r1
 80029a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	68db      	ldr	r3, [r3, #12]
 80029aa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	695a      	ldr	r2, [r3, #20]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	699b      	ldr	r3, [r3, #24]
 80029b6:	431a      	orrs	r2, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	430a      	orrs	r2, r1
 80029be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f042 0201 	orr.w	r2, r2, #1
 80029ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2200      	movs	r2, #0
 80029d4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2220      	movs	r2, #32
 80029da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80029ec:	2300      	movs	r3, #0
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3710      	adds	r7, #16
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	000186a0 	.word	0x000186a0
 80029fc:	001e847f 	.word	0x001e847f
 8002a00:	003d08ff 	.word	0x003d08ff
 8002a04:	431bde83 	.word	0x431bde83
 8002a08:	10624dd3 	.word	0x10624dd3

08002a0c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b088      	sub	sp, #32
 8002a10:	af02      	add	r7, sp, #8
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	4608      	mov	r0, r1
 8002a16:	4611      	mov	r1, r2
 8002a18:	461a      	mov	r2, r3
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	817b      	strh	r3, [r7, #10]
 8002a1e:	460b      	mov	r3, r1
 8002a20:	813b      	strh	r3, [r7, #8]
 8002a22:	4613      	mov	r3, r2
 8002a24:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a26:	f7fe ff13 	bl	8001850 <HAL_GetTick>
 8002a2a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	2b20      	cmp	r3, #32
 8002a36:	f040 80d9 	bne.w	8002bec <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	9300      	str	r3, [sp, #0]
 8002a3e:	2319      	movs	r3, #25
 8002a40:	2201      	movs	r2, #1
 8002a42:	496d      	ldr	r1, [pc, #436]	; (8002bf8 <HAL_I2C_Mem_Write+0x1ec>)
 8002a44:	68f8      	ldr	r0, [r7, #12]
 8002a46:	f000 f971 	bl	8002d2c <I2C_WaitOnFlagUntilTimeout>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d001      	beq.n	8002a54 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002a50:	2302      	movs	r3, #2
 8002a52:	e0cc      	b.n	8002bee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d101      	bne.n	8002a62 <HAL_I2C_Mem_Write+0x56>
 8002a5e:	2302      	movs	r3, #2
 8002a60:	e0c5      	b.n	8002bee <HAL_I2C_Mem_Write+0x1e2>
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2201      	movs	r2, #1
 8002a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0301 	and.w	r3, r3, #1
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d007      	beq.n	8002a88 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f042 0201 	orr.w	r2, r2, #1
 8002a86:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a96:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2221      	movs	r2, #33	; 0x21
 8002a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2240      	movs	r2, #64	; 0x40
 8002aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	6a3a      	ldr	r2, [r7, #32]
 8002ab2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002ab8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002abe:	b29a      	uxth	r2, r3
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	4a4d      	ldr	r2, [pc, #308]	; (8002bfc <HAL_I2C_Mem_Write+0x1f0>)
 8002ac8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002aca:	88f8      	ldrh	r0, [r7, #6]
 8002acc:	893a      	ldrh	r2, [r7, #8]
 8002ace:	8979      	ldrh	r1, [r7, #10]
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	9301      	str	r3, [sp, #4]
 8002ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ad6:	9300      	str	r3, [sp, #0]
 8002ad8:	4603      	mov	r3, r0
 8002ada:	68f8      	ldr	r0, [r7, #12]
 8002adc:	f000 f890 	bl	8002c00 <I2C_RequestMemoryWrite>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d052      	beq.n	8002b8c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e081      	b.n	8002bee <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002aea:	697a      	ldr	r2, [r7, #20]
 8002aec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002aee:	68f8      	ldr	r0, [r7, #12]
 8002af0:	f000 f9f2 	bl	8002ed8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d00d      	beq.n	8002b16 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afe:	2b04      	cmp	r3, #4
 8002b00:	d107      	bne.n	8002b12 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b10:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e06b      	b.n	8002bee <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1a:	781a      	ldrb	r2, [r3, #0]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b26:	1c5a      	adds	r2, r3, #1
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b30:	3b01      	subs	r3, #1
 8002b32:	b29a      	uxth	r2, r3
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	3b01      	subs	r3, #1
 8002b40:	b29a      	uxth	r2, r3
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	695b      	ldr	r3, [r3, #20]
 8002b4c:	f003 0304 	and.w	r3, r3, #4
 8002b50:	2b04      	cmp	r3, #4
 8002b52:	d11b      	bne.n	8002b8c <HAL_I2C_Mem_Write+0x180>
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d017      	beq.n	8002b8c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b60:	781a      	ldrb	r2, [r3, #0]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6c:	1c5a      	adds	r2, r3, #1
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b76:	3b01      	subs	r3, #1
 8002b78:	b29a      	uxth	r2, r3
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	3b01      	subs	r3, #1
 8002b86:	b29a      	uxth	r2, r3
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d1aa      	bne.n	8002aea <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b94:	697a      	ldr	r2, [r7, #20]
 8002b96:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b98:	68f8      	ldr	r0, [r7, #12]
 8002b9a:	f000 f9de 	bl	8002f5a <I2C_WaitOnBTFFlagUntilTimeout>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d00d      	beq.n	8002bc0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba8:	2b04      	cmp	r3, #4
 8002baa:	d107      	bne.n	8002bbc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bba:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e016      	b.n	8002bee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2220      	movs	r2, #32
 8002bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2200      	movs	r2, #0
 8002be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002be8:	2300      	movs	r3, #0
 8002bea:	e000      	b.n	8002bee <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002bec:	2302      	movs	r3, #2
  }
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3718      	adds	r7, #24
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	00100002 	.word	0x00100002
 8002bfc:	ffff0000 	.word	0xffff0000

08002c00 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b088      	sub	sp, #32
 8002c04:	af02      	add	r7, sp, #8
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	4608      	mov	r0, r1
 8002c0a:	4611      	mov	r1, r2
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	4603      	mov	r3, r0
 8002c10:	817b      	strh	r3, [r7, #10]
 8002c12:	460b      	mov	r3, r1
 8002c14:	813b      	strh	r3, [r7, #8]
 8002c16:	4613      	mov	r3, r2
 8002c18:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c28:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2c:	9300      	str	r3, [sp, #0]
 8002c2e:	6a3b      	ldr	r3, [r7, #32]
 8002c30:	2200      	movs	r2, #0
 8002c32:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c36:	68f8      	ldr	r0, [r7, #12]
 8002c38:	f000 f878 	bl	8002d2c <I2C_WaitOnFlagUntilTimeout>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d00d      	beq.n	8002c5e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c50:	d103      	bne.n	8002c5a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c58:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e05f      	b.n	8002d1e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c5e:	897b      	ldrh	r3, [r7, #10]
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	461a      	mov	r2, r3
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002c6c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c70:	6a3a      	ldr	r2, [r7, #32]
 8002c72:	492d      	ldr	r1, [pc, #180]	; (8002d28 <I2C_RequestMemoryWrite+0x128>)
 8002c74:	68f8      	ldr	r0, [r7, #12]
 8002c76:	f000 f8b0 	bl	8002dda <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d001      	beq.n	8002c84 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e04c      	b.n	8002d1e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c84:	2300      	movs	r3, #0
 8002c86:	617b      	str	r3, [r7, #20]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	695b      	ldr	r3, [r3, #20]
 8002c8e:	617b      	str	r3, [r7, #20]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	699b      	ldr	r3, [r3, #24]
 8002c96:	617b      	str	r3, [r7, #20]
 8002c98:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c9c:	6a39      	ldr	r1, [r7, #32]
 8002c9e:	68f8      	ldr	r0, [r7, #12]
 8002ca0:	f000 f91a 	bl	8002ed8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d00d      	beq.n	8002cc6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cae:	2b04      	cmp	r3, #4
 8002cb0:	d107      	bne.n	8002cc2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cc0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e02b      	b.n	8002d1e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002cc6:	88fb      	ldrh	r3, [r7, #6]
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d105      	bne.n	8002cd8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ccc:	893b      	ldrh	r3, [r7, #8]
 8002cce:	b2da      	uxtb	r2, r3
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	611a      	str	r2, [r3, #16]
 8002cd6:	e021      	b.n	8002d1c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002cd8:	893b      	ldrh	r3, [r7, #8]
 8002cda:	0a1b      	lsrs	r3, r3, #8
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	b2da      	uxtb	r2, r3
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ce6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ce8:	6a39      	ldr	r1, [r7, #32]
 8002cea:	68f8      	ldr	r0, [r7, #12]
 8002cec:	f000 f8f4 	bl	8002ed8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d00d      	beq.n	8002d12 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfa:	2b04      	cmp	r3, #4
 8002cfc:	d107      	bne.n	8002d0e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d0c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e005      	b.n	8002d1e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d12:	893b      	ldrh	r3, [r7, #8]
 8002d14:	b2da      	uxtb	r2, r3
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002d1c:	2300      	movs	r3, #0
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3718      	adds	r7, #24
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	00010002 	.word	0x00010002

08002d2c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	60b9      	str	r1, [r7, #8]
 8002d36:	603b      	str	r3, [r7, #0]
 8002d38:	4613      	mov	r3, r2
 8002d3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d3c:	e025      	b.n	8002d8a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d44:	d021      	beq.n	8002d8a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d46:	f7fe fd83 	bl	8001850 <HAL_GetTick>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	69bb      	ldr	r3, [r7, #24]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	683a      	ldr	r2, [r7, #0]
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d302      	bcc.n	8002d5c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d116      	bne.n	8002d8a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2220      	movs	r2, #32
 8002d66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d76:	f043 0220 	orr.w	r2, r3, #32
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2200      	movs	r2, #0
 8002d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e023      	b.n	8002dd2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	0c1b      	lsrs	r3, r3, #16
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d10d      	bne.n	8002db0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	695b      	ldr	r3, [r3, #20]
 8002d9a:	43da      	mvns	r2, r3
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	4013      	ands	r3, r2
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	bf0c      	ite	eq
 8002da6:	2301      	moveq	r3, #1
 8002da8:	2300      	movne	r3, #0
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	461a      	mov	r2, r3
 8002dae:	e00c      	b.n	8002dca <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	699b      	ldr	r3, [r3, #24]
 8002db6:	43da      	mvns	r2, r3
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	4013      	ands	r3, r2
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	bf0c      	ite	eq
 8002dc2:	2301      	moveq	r3, #1
 8002dc4:	2300      	movne	r3, #0
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	461a      	mov	r2, r3
 8002dca:	79fb      	ldrb	r3, [r7, #7]
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d0b6      	beq.n	8002d3e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002dd0:	2300      	movs	r3, #0
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3710      	adds	r7, #16
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}

08002dda <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002dda:	b580      	push	{r7, lr}
 8002ddc:	b084      	sub	sp, #16
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	60f8      	str	r0, [r7, #12]
 8002de2:	60b9      	str	r1, [r7, #8]
 8002de4:	607a      	str	r2, [r7, #4]
 8002de6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002de8:	e051      	b.n	8002e8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	695b      	ldr	r3, [r3, #20]
 8002df0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002df4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002df8:	d123      	bne.n	8002e42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e08:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e12:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2200      	movs	r2, #0
 8002e18:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2220      	movs	r2, #32
 8002e1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2200      	movs	r2, #0
 8002e26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2e:	f043 0204 	orr.w	r2, r3, #4
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e046      	b.n	8002ed0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e48:	d021      	beq.n	8002e8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e4a:	f7fe fd01 	bl	8001850 <HAL_GetTick>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d302      	bcc.n	8002e60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d116      	bne.n	8002e8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2200      	movs	r2, #0
 8002e64:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2220      	movs	r2, #32
 8002e6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2200      	movs	r2, #0
 8002e72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7a:	f043 0220 	orr.w	r2, r3, #32
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2200      	movs	r2, #0
 8002e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e020      	b.n	8002ed0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	0c1b      	lsrs	r3, r3, #16
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d10c      	bne.n	8002eb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	695b      	ldr	r3, [r3, #20]
 8002e9e:	43da      	mvns	r2, r3
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	bf14      	ite	ne
 8002eaa:	2301      	movne	r3, #1
 8002eac:	2300      	moveq	r3, #0
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	e00b      	b.n	8002eca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	699b      	ldr	r3, [r3, #24]
 8002eb8:	43da      	mvns	r2, r3
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	bf14      	ite	ne
 8002ec4:	2301      	movne	r3, #1
 8002ec6:	2300      	moveq	r3, #0
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d18d      	bne.n	8002dea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002ece:	2300      	movs	r3, #0
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3710      	adds	r7, #16
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}

08002ed8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b084      	sub	sp, #16
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	60f8      	str	r0, [r7, #12]
 8002ee0:	60b9      	str	r1, [r7, #8]
 8002ee2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ee4:	e02d      	b.n	8002f42 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ee6:	68f8      	ldr	r0, [r7, #12]
 8002ee8:	f000 f878 	bl	8002fdc <I2C_IsAcknowledgeFailed>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d001      	beq.n	8002ef6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e02d      	b.n	8002f52 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002efc:	d021      	beq.n	8002f42 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002efe:	f7fe fca7 	bl	8001850 <HAL_GetTick>
 8002f02:	4602      	mov	r2, r0
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	68ba      	ldr	r2, [r7, #8]
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d302      	bcc.n	8002f14 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d116      	bne.n	8002f42 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2200      	movs	r2, #0
 8002f18:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2220      	movs	r2, #32
 8002f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2e:	f043 0220 	orr.w	r2, r3, #32
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e007      	b.n	8002f52 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	695b      	ldr	r3, [r3, #20]
 8002f48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f4c:	2b80      	cmp	r3, #128	; 0x80
 8002f4e:	d1ca      	bne.n	8002ee6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f50:	2300      	movs	r3, #0
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3710      	adds	r7, #16
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}

08002f5a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f5a:	b580      	push	{r7, lr}
 8002f5c:	b084      	sub	sp, #16
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	60f8      	str	r0, [r7, #12]
 8002f62:	60b9      	str	r1, [r7, #8]
 8002f64:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f66:	e02d      	b.n	8002fc4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f68:	68f8      	ldr	r0, [r7, #12]
 8002f6a:	f000 f837 	bl	8002fdc <I2C_IsAcknowledgeFailed>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d001      	beq.n	8002f78 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e02d      	b.n	8002fd4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f7e:	d021      	beq.n	8002fc4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f80:	f7fe fc66 	bl	8001850 <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	68ba      	ldr	r2, [r7, #8]
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d302      	bcc.n	8002f96 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d116      	bne.n	8002fc4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2220      	movs	r2, #32
 8002fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb0:	f043 0220 	orr.w	r2, r3, #32
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e007      	b.n	8002fd4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	695b      	ldr	r3, [r3, #20]
 8002fca:	f003 0304 	and.w	r3, r3, #4
 8002fce:	2b04      	cmp	r3, #4
 8002fd0:	d1ca      	bne.n	8002f68 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002fd2:	2300      	movs	r3, #0
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3710      	adds	r7, #16
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}

08002fdc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	695b      	ldr	r3, [r3, #20]
 8002fea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ff2:	d11b      	bne.n	800302c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ffc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2200      	movs	r2, #0
 8003002:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2220      	movs	r2, #32
 8003008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2200      	movs	r2, #0
 8003010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003018:	f043 0204 	orr.w	r2, r3, #4
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e000      	b.n	800302e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800302c:	2300      	movs	r3, #0
}
 800302e:	4618      	mov	r0, r3
 8003030:	370c      	adds	r7, #12
 8003032:	46bd      	mov	sp, r7
 8003034:	bc80      	pop	{r7}
 8003036:	4770      	bx	lr

08003038 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b086      	sub	sp, #24
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d101      	bne.n	800304a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e26c      	b.n	8003524 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0301 	and.w	r3, r3, #1
 8003052:	2b00      	cmp	r3, #0
 8003054:	f000 8087 	beq.w	8003166 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003058:	4b92      	ldr	r3, [pc, #584]	; (80032a4 <HAL_RCC_OscConfig+0x26c>)
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f003 030c 	and.w	r3, r3, #12
 8003060:	2b04      	cmp	r3, #4
 8003062:	d00c      	beq.n	800307e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003064:	4b8f      	ldr	r3, [pc, #572]	; (80032a4 <HAL_RCC_OscConfig+0x26c>)
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f003 030c 	and.w	r3, r3, #12
 800306c:	2b08      	cmp	r3, #8
 800306e:	d112      	bne.n	8003096 <HAL_RCC_OscConfig+0x5e>
 8003070:	4b8c      	ldr	r3, [pc, #560]	; (80032a4 <HAL_RCC_OscConfig+0x26c>)
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003078:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800307c:	d10b      	bne.n	8003096 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800307e:	4b89      	ldr	r3, [pc, #548]	; (80032a4 <HAL_RCC_OscConfig+0x26c>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d06c      	beq.n	8003164 <HAL_RCC_OscConfig+0x12c>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d168      	bne.n	8003164 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e246      	b.n	8003524 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800309e:	d106      	bne.n	80030ae <HAL_RCC_OscConfig+0x76>
 80030a0:	4b80      	ldr	r3, [pc, #512]	; (80032a4 <HAL_RCC_OscConfig+0x26c>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a7f      	ldr	r2, [pc, #508]	; (80032a4 <HAL_RCC_OscConfig+0x26c>)
 80030a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030aa:	6013      	str	r3, [r2, #0]
 80030ac:	e02e      	b.n	800310c <HAL_RCC_OscConfig+0xd4>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d10c      	bne.n	80030d0 <HAL_RCC_OscConfig+0x98>
 80030b6:	4b7b      	ldr	r3, [pc, #492]	; (80032a4 <HAL_RCC_OscConfig+0x26c>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a7a      	ldr	r2, [pc, #488]	; (80032a4 <HAL_RCC_OscConfig+0x26c>)
 80030bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030c0:	6013      	str	r3, [r2, #0]
 80030c2:	4b78      	ldr	r3, [pc, #480]	; (80032a4 <HAL_RCC_OscConfig+0x26c>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a77      	ldr	r2, [pc, #476]	; (80032a4 <HAL_RCC_OscConfig+0x26c>)
 80030c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030cc:	6013      	str	r3, [r2, #0]
 80030ce:	e01d      	b.n	800310c <HAL_RCC_OscConfig+0xd4>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030d8:	d10c      	bne.n	80030f4 <HAL_RCC_OscConfig+0xbc>
 80030da:	4b72      	ldr	r3, [pc, #456]	; (80032a4 <HAL_RCC_OscConfig+0x26c>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a71      	ldr	r2, [pc, #452]	; (80032a4 <HAL_RCC_OscConfig+0x26c>)
 80030e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030e4:	6013      	str	r3, [r2, #0]
 80030e6:	4b6f      	ldr	r3, [pc, #444]	; (80032a4 <HAL_RCC_OscConfig+0x26c>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a6e      	ldr	r2, [pc, #440]	; (80032a4 <HAL_RCC_OscConfig+0x26c>)
 80030ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030f0:	6013      	str	r3, [r2, #0]
 80030f2:	e00b      	b.n	800310c <HAL_RCC_OscConfig+0xd4>
 80030f4:	4b6b      	ldr	r3, [pc, #428]	; (80032a4 <HAL_RCC_OscConfig+0x26c>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a6a      	ldr	r2, [pc, #424]	; (80032a4 <HAL_RCC_OscConfig+0x26c>)
 80030fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030fe:	6013      	str	r3, [r2, #0]
 8003100:	4b68      	ldr	r3, [pc, #416]	; (80032a4 <HAL_RCC_OscConfig+0x26c>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a67      	ldr	r2, [pc, #412]	; (80032a4 <HAL_RCC_OscConfig+0x26c>)
 8003106:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800310a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d013      	beq.n	800313c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003114:	f7fe fb9c 	bl	8001850 <HAL_GetTick>
 8003118:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800311a:	e008      	b.n	800312e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800311c:	f7fe fb98 	bl	8001850 <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	2b64      	cmp	r3, #100	; 0x64
 8003128:	d901      	bls.n	800312e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	e1fa      	b.n	8003524 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800312e:	4b5d      	ldr	r3, [pc, #372]	; (80032a4 <HAL_RCC_OscConfig+0x26c>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d0f0      	beq.n	800311c <HAL_RCC_OscConfig+0xe4>
 800313a:	e014      	b.n	8003166 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800313c:	f7fe fb88 	bl	8001850 <HAL_GetTick>
 8003140:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003142:	e008      	b.n	8003156 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003144:	f7fe fb84 	bl	8001850 <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	2b64      	cmp	r3, #100	; 0x64
 8003150:	d901      	bls.n	8003156 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e1e6      	b.n	8003524 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003156:	4b53      	ldr	r3, [pc, #332]	; (80032a4 <HAL_RCC_OscConfig+0x26c>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d1f0      	bne.n	8003144 <HAL_RCC_OscConfig+0x10c>
 8003162:	e000      	b.n	8003166 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003164:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0302 	and.w	r3, r3, #2
 800316e:	2b00      	cmp	r3, #0
 8003170:	d063      	beq.n	800323a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003172:	4b4c      	ldr	r3, [pc, #304]	; (80032a4 <HAL_RCC_OscConfig+0x26c>)
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f003 030c 	and.w	r3, r3, #12
 800317a:	2b00      	cmp	r3, #0
 800317c:	d00b      	beq.n	8003196 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800317e:	4b49      	ldr	r3, [pc, #292]	; (80032a4 <HAL_RCC_OscConfig+0x26c>)
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	f003 030c 	and.w	r3, r3, #12
 8003186:	2b08      	cmp	r3, #8
 8003188:	d11c      	bne.n	80031c4 <HAL_RCC_OscConfig+0x18c>
 800318a:	4b46      	ldr	r3, [pc, #280]	; (80032a4 <HAL_RCC_OscConfig+0x26c>)
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d116      	bne.n	80031c4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003196:	4b43      	ldr	r3, [pc, #268]	; (80032a4 <HAL_RCC_OscConfig+0x26c>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0302 	and.w	r3, r3, #2
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d005      	beq.n	80031ae <HAL_RCC_OscConfig+0x176>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	691b      	ldr	r3, [r3, #16]
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d001      	beq.n	80031ae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e1ba      	b.n	8003524 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031ae:	4b3d      	ldr	r3, [pc, #244]	; (80032a4 <HAL_RCC_OscConfig+0x26c>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	695b      	ldr	r3, [r3, #20]
 80031ba:	00db      	lsls	r3, r3, #3
 80031bc:	4939      	ldr	r1, [pc, #228]	; (80032a4 <HAL_RCC_OscConfig+0x26c>)
 80031be:	4313      	orrs	r3, r2
 80031c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031c2:	e03a      	b.n	800323a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	691b      	ldr	r3, [r3, #16]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d020      	beq.n	800320e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031cc:	4b36      	ldr	r3, [pc, #216]	; (80032a8 <HAL_RCC_OscConfig+0x270>)
 80031ce:	2201      	movs	r2, #1
 80031d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031d2:	f7fe fb3d 	bl	8001850 <HAL_GetTick>
 80031d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031d8:	e008      	b.n	80031ec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031da:	f7fe fb39 	bl	8001850 <HAL_GetTick>
 80031de:	4602      	mov	r2, r0
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d901      	bls.n	80031ec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80031e8:	2303      	movs	r3, #3
 80031ea:	e19b      	b.n	8003524 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031ec:	4b2d      	ldr	r3, [pc, #180]	; (80032a4 <HAL_RCC_OscConfig+0x26c>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0302 	and.w	r3, r3, #2
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d0f0      	beq.n	80031da <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031f8:	4b2a      	ldr	r3, [pc, #168]	; (80032a4 <HAL_RCC_OscConfig+0x26c>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	695b      	ldr	r3, [r3, #20]
 8003204:	00db      	lsls	r3, r3, #3
 8003206:	4927      	ldr	r1, [pc, #156]	; (80032a4 <HAL_RCC_OscConfig+0x26c>)
 8003208:	4313      	orrs	r3, r2
 800320a:	600b      	str	r3, [r1, #0]
 800320c:	e015      	b.n	800323a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800320e:	4b26      	ldr	r3, [pc, #152]	; (80032a8 <HAL_RCC_OscConfig+0x270>)
 8003210:	2200      	movs	r2, #0
 8003212:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003214:	f7fe fb1c 	bl	8001850 <HAL_GetTick>
 8003218:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800321a:	e008      	b.n	800322e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800321c:	f7fe fb18 	bl	8001850 <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	2b02      	cmp	r3, #2
 8003228:	d901      	bls.n	800322e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e17a      	b.n	8003524 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800322e:	4b1d      	ldr	r3, [pc, #116]	; (80032a4 <HAL_RCC_OscConfig+0x26c>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0302 	and.w	r3, r3, #2
 8003236:	2b00      	cmp	r3, #0
 8003238:	d1f0      	bne.n	800321c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0308 	and.w	r3, r3, #8
 8003242:	2b00      	cmp	r3, #0
 8003244:	d03a      	beq.n	80032bc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	699b      	ldr	r3, [r3, #24]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d019      	beq.n	8003282 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800324e:	4b17      	ldr	r3, [pc, #92]	; (80032ac <HAL_RCC_OscConfig+0x274>)
 8003250:	2201      	movs	r2, #1
 8003252:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003254:	f7fe fafc 	bl	8001850 <HAL_GetTick>
 8003258:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800325a:	e008      	b.n	800326e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800325c:	f7fe faf8 	bl	8001850 <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	2b02      	cmp	r3, #2
 8003268:	d901      	bls.n	800326e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	e15a      	b.n	8003524 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800326e:	4b0d      	ldr	r3, [pc, #52]	; (80032a4 <HAL_RCC_OscConfig+0x26c>)
 8003270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003272:	f003 0302 	and.w	r3, r3, #2
 8003276:	2b00      	cmp	r3, #0
 8003278:	d0f0      	beq.n	800325c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800327a:	2001      	movs	r0, #1
 800327c:	f000 fad8 	bl	8003830 <RCC_Delay>
 8003280:	e01c      	b.n	80032bc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003282:	4b0a      	ldr	r3, [pc, #40]	; (80032ac <HAL_RCC_OscConfig+0x274>)
 8003284:	2200      	movs	r2, #0
 8003286:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003288:	f7fe fae2 	bl	8001850 <HAL_GetTick>
 800328c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800328e:	e00f      	b.n	80032b0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003290:	f7fe fade 	bl	8001850 <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	2b02      	cmp	r3, #2
 800329c:	d908      	bls.n	80032b0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e140      	b.n	8003524 <HAL_RCC_OscConfig+0x4ec>
 80032a2:	bf00      	nop
 80032a4:	40021000 	.word	0x40021000
 80032a8:	42420000 	.word	0x42420000
 80032ac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032b0:	4b9e      	ldr	r3, [pc, #632]	; (800352c <HAL_RCC_OscConfig+0x4f4>)
 80032b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b4:	f003 0302 	and.w	r3, r3, #2
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d1e9      	bne.n	8003290 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 0304 	and.w	r3, r3, #4
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	f000 80a6 	beq.w	8003416 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032ca:	2300      	movs	r3, #0
 80032cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032ce:	4b97      	ldr	r3, [pc, #604]	; (800352c <HAL_RCC_OscConfig+0x4f4>)
 80032d0:	69db      	ldr	r3, [r3, #28]
 80032d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d10d      	bne.n	80032f6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032da:	4b94      	ldr	r3, [pc, #592]	; (800352c <HAL_RCC_OscConfig+0x4f4>)
 80032dc:	69db      	ldr	r3, [r3, #28]
 80032de:	4a93      	ldr	r2, [pc, #588]	; (800352c <HAL_RCC_OscConfig+0x4f4>)
 80032e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032e4:	61d3      	str	r3, [r2, #28]
 80032e6:	4b91      	ldr	r3, [pc, #580]	; (800352c <HAL_RCC_OscConfig+0x4f4>)
 80032e8:	69db      	ldr	r3, [r3, #28]
 80032ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ee:	60bb      	str	r3, [r7, #8]
 80032f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032f2:	2301      	movs	r3, #1
 80032f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032f6:	4b8e      	ldr	r3, [pc, #568]	; (8003530 <HAL_RCC_OscConfig+0x4f8>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d118      	bne.n	8003334 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003302:	4b8b      	ldr	r3, [pc, #556]	; (8003530 <HAL_RCC_OscConfig+0x4f8>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a8a      	ldr	r2, [pc, #552]	; (8003530 <HAL_RCC_OscConfig+0x4f8>)
 8003308:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800330c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800330e:	f7fe fa9f 	bl	8001850 <HAL_GetTick>
 8003312:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003314:	e008      	b.n	8003328 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003316:	f7fe fa9b 	bl	8001850 <HAL_GetTick>
 800331a:	4602      	mov	r2, r0
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	1ad3      	subs	r3, r2, r3
 8003320:	2b64      	cmp	r3, #100	; 0x64
 8003322:	d901      	bls.n	8003328 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003324:	2303      	movs	r3, #3
 8003326:	e0fd      	b.n	8003524 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003328:	4b81      	ldr	r3, [pc, #516]	; (8003530 <HAL_RCC_OscConfig+0x4f8>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003330:	2b00      	cmp	r3, #0
 8003332:	d0f0      	beq.n	8003316 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	2b01      	cmp	r3, #1
 800333a:	d106      	bne.n	800334a <HAL_RCC_OscConfig+0x312>
 800333c:	4b7b      	ldr	r3, [pc, #492]	; (800352c <HAL_RCC_OscConfig+0x4f4>)
 800333e:	6a1b      	ldr	r3, [r3, #32]
 8003340:	4a7a      	ldr	r2, [pc, #488]	; (800352c <HAL_RCC_OscConfig+0x4f4>)
 8003342:	f043 0301 	orr.w	r3, r3, #1
 8003346:	6213      	str	r3, [r2, #32]
 8003348:	e02d      	b.n	80033a6 <HAL_RCC_OscConfig+0x36e>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d10c      	bne.n	800336c <HAL_RCC_OscConfig+0x334>
 8003352:	4b76      	ldr	r3, [pc, #472]	; (800352c <HAL_RCC_OscConfig+0x4f4>)
 8003354:	6a1b      	ldr	r3, [r3, #32]
 8003356:	4a75      	ldr	r2, [pc, #468]	; (800352c <HAL_RCC_OscConfig+0x4f4>)
 8003358:	f023 0301 	bic.w	r3, r3, #1
 800335c:	6213      	str	r3, [r2, #32]
 800335e:	4b73      	ldr	r3, [pc, #460]	; (800352c <HAL_RCC_OscConfig+0x4f4>)
 8003360:	6a1b      	ldr	r3, [r3, #32]
 8003362:	4a72      	ldr	r2, [pc, #456]	; (800352c <HAL_RCC_OscConfig+0x4f4>)
 8003364:	f023 0304 	bic.w	r3, r3, #4
 8003368:	6213      	str	r3, [r2, #32]
 800336a:	e01c      	b.n	80033a6 <HAL_RCC_OscConfig+0x36e>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	2b05      	cmp	r3, #5
 8003372:	d10c      	bne.n	800338e <HAL_RCC_OscConfig+0x356>
 8003374:	4b6d      	ldr	r3, [pc, #436]	; (800352c <HAL_RCC_OscConfig+0x4f4>)
 8003376:	6a1b      	ldr	r3, [r3, #32]
 8003378:	4a6c      	ldr	r2, [pc, #432]	; (800352c <HAL_RCC_OscConfig+0x4f4>)
 800337a:	f043 0304 	orr.w	r3, r3, #4
 800337e:	6213      	str	r3, [r2, #32]
 8003380:	4b6a      	ldr	r3, [pc, #424]	; (800352c <HAL_RCC_OscConfig+0x4f4>)
 8003382:	6a1b      	ldr	r3, [r3, #32]
 8003384:	4a69      	ldr	r2, [pc, #420]	; (800352c <HAL_RCC_OscConfig+0x4f4>)
 8003386:	f043 0301 	orr.w	r3, r3, #1
 800338a:	6213      	str	r3, [r2, #32]
 800338c:	e00b      	b.n	80033a6 <HAL_RCC_OscConfig+0x36e>
 800338e:	4b67      	ldr	r3, [pc, #412]	; (800352c <HAL_RCC_OscConfig+0x4f4>)
 8003390:	6a1b      	ldr	r3, [r3, #32]
 8003392:	4a66      	ldr	r2, [pc, #408]	; (800352c <HAL_RCC_OscConfig+0x4f4>)
 8003394:	f023 0301 	bic.w	r3, r3, #1
 8003398:	6213      	str	r3, [r2, #32]
 800339a:	4b64      	ldr	r3, [pc, #400]	; (800352c <HAL_RCC_OscConfig+0x4f4>)
 800339c:	6a1b      	ldr	r3, [r3, #32]
 800339e:	4a63      	ldr	r2, [pc, #396]	; (800352c <HAL_RCC_OscConfig+0x4f4>)
 80033a0:	f023 0304 	bic.w	r3, r3, #4
 80033a4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	68db      	ldr	r3, [r3, #12]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d015      	beq.n	80033da <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033ae:	f7fe fa4f 	bl	8001850 <HAL_GetTick>
 80033b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033b4:	e00a      	b.n	80033cc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033b6:	f7fe fa4b 	bl	8001850 <HAL_GetTick>
 80033ba:	4602      	mov	r2, r0
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	1ad3      	subs	r3, r2, r3
 80033c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d901      	bls.n	80033cc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80033c8:	2303      	movs	r3, #3
 80033ca:	e0ab      	b.n	8003524 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033cc:	4b57      	ldr	r3, [pc, #348]	; (800352c <HAL_RCC_OscConfig+0x4f4>)
 80033ce:	6a1b      	ldr	r3, [r3, #32]
 80033d0:	f003 0302 	and.w	r3, r3, #2
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d0ee      	beq.n	80033b6 <HAL_RCC_OscConfig+0x37e>
 80033d8:	e014      	b.n	8003404 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033da:	f7fe fa39 	bl	8001850 <HAL_GetTick>
 80033de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033e0:	e00a      	b.n	80033f8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033e2:	f7fe fa35 	bl	8001850 <HAL_GetTick>
 80033e6:	4602      	mov	r2, r0
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d901      	bls.n	80033f8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80033f4:	2303      	movs	r3, #3
 80033f6:	e095      	b.n	8003524 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033f8:	4b4c      	ldr	r3, [pc, #304]	; (800352c <HAL_RCC_OscConfig+0x4f4>)
 80033fa:	6a1b      	ldr	r3, [r3, #32]
 80033fc:	f003 0302 	and.w	r3, r3, #2
 8003400:	2b00      	cmp	r3, #0
 8003402:	d1ee      	bne.n	80033e2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003404:	7dfb      	ldrb	r3, [r7, #23]
 8003406:	2b01      	cmp	r3, #1
 8003408:	d105      	bne.n	8003416 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800340a:	4b48      	ldr	r3, [pc, #288]	; (800352c <HAL_RCC_OscConfig+0x4f4>)
 800340c:	69db      	ldr	r3, [r3, #28]
 800340e:	4a47      	ldr	r2, [pc, #284]	; (800352c <HAL_RCC_OscConfig+0x4f4>)
 8003410:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003414:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	69db      	ldr	r3, [r3, #28]
 800341a:	2b00      	cmp	r3, #0
 800341c:	f000 8081 	beq.w	8003522 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003420:	4b42      	ldr	r3, [pc, #264]	; (800352c <HAL_RCC_OscConfig+0x4f4>)
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f003 030c 	and.w	r3, r3, #12
 8003428:	2b08      	cmp	r3, #8
 800342a:	d061      	beq.n	80034f0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	69db      	ldr	r3, [r3, #28]
 8003430:	2b02      	cmp	r3, #2
 8003432:	d146      	bne.n	80034c2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003434:	4b3f      	ldr	r3, [pc, #252]	; (8003534 <HAL_RCC_OscConfig+0x4fc>)
 8003436:	2200      	movs	r2, #0
 8003438:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800343a:	f7fe fa09 	bl	8001850 <HAL_GetTick>
 800343e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003440:	e008      	b.n	8003454 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003442:	f7fe fa05 	bl	8001850 <HAL_GetTick>
 8003446:	4602      	mov	r2, r0
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	2b02      	cmp	r3, #2
 800344e:	d901      	bls.n	8003454 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003450:	2303      	movs	r3, #3
 8003452:	e067      	b.n	8003524 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003454:	4b35      	ldr	r3, [pc, #212]	; (800352c <HAL_RCC_OscConfig+0x4f4>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800345c:	2b00      	cmp	r3, #0
 800345e:	d1f0      	bne.n	8003442 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6a1b      	ldr	r3, [r3, #32]
 8003464:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003468:	d108      	bne.n	800347c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800346a:	4b30      	ldr	r3, [pc, #192]	; (800352c <HAL_RCC_OscConfig+0x4f4>)
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	492d      	ldr	r1, [pc, #180]	; (800352c <HAL_RCC_OscConfig+0x4f4>)
 8003478:	4313      	orrs	r3, r2
 800347a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800347c:	4b2b      	ldr	r3, [pc, #172]	; (800352c <HAL_RCC_OscConfig+0x4f4>)
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6a19      	ldr	r1, [r3, #32]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348c:	430b      	orrs	r3, r1
 800348e:	4927      	ldr	r1, [pc, #156]	; (800352c <HAL_RCC_OscConfig+0x4f4>)
 8003490:	4313      	orrs	r3, r2
 8003492:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003494:	4b27      	ldr	r3, [pc, #156]	; (8003534 <HAL_RCC_OscConfig+0x4fc>)
 8003496:	2201      	movs	r2, #1
 8003498:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800349a:	f7fe f9d9 	bl	8001850 <HAL_GetTick>
 800349e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034a0:	e008      	b.n	80034b4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034a2:	f7fe f9d5 	bl	8001850 <HAL_GetTick>
 80034a6:	4602      	mov	r2, r0
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	2b02      	cmp	r3, #2
 80034ae:	d901      	bls.n	80034b4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80034b0:	2303      	movs	r3, #3
 80034b2:	e037      	b.n	8003524 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034b4:	4b1d      	ldr	r3, [pc, #116]	; (800352c <HAL_RCC_OscConfig+0x4f4>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d0f0      	beq.n	80034a2 <HAL_RCC_OscConfig+0x46a>
 80034c0:	e02f      	b.n	8003522 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034c2:	4b1c      	ldr	r3, [pc, #112]	; (8003534 <HAL_RCC_OscConfig+0x4fc>)
 80034c4:	2200      	movs	r2, #0
 80034c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034c8:	f7fe f9c2 	bl	8001850 <HAL_GetTick>
 80034cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034ce:	e008      	b.n	80034e2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034d0:	f7fe f9be 	bl	8001850 <HAL_GetTick>
 80034d4:	4602      	mov	r2, r0
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d901      	bls.n	80034e2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e020      	b.n	8003524 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034e2:	4b12      	ldr	r3, [pc, #72]	; (800352c <HAL_RCC_OscConfig+0x4f4>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d1f0      	bne.n	80034d0 <HAL_RCC_OscConfig+0x498>
 80034ee:	e018      	b.n	8003522 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	69db      	ldr	r3, [r3, #28]
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d101      	bne.n	80034fc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e013      	b.n	8003524 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80034fc:	4b0b      	ldr	r3, [pc, #44]	; (800352c <HAL_RCC_OscConfig+0x4f4>)
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6a1b      	ldr	r3, [r3, #32]
 800350c:	429a      	cmp	r2, r3
 800350e:	d106      	bne.n	800351e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800351a:	429a      	cmp	r2, r3
 800351c:	d001      	beq.n	8003522 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e000      	b.n	8003524 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003522:	2300      	movs	r3, #0
}
 8003524:	4618      	mov	r0, r3
 8003526:	3718      	adds	r7, #24
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}
 800352c:	40021000 	.word	0x40021000
 8003530:	40007000 	.word	0x40007000
 8003534:	42420060 	.word	0x42420060

08003538 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b084      	sub	sp, #16
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d101      	bne.n	800354c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e0d0      	b.n	80036ee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800354c:	4b6a      	ldr	r3, [pc, #424]	; (80036f8 <HAL_RCC_ClockConfig+0x1c0>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0307 	and.w	r3, r3, #7
 8003554:	683a      	ldr	r2, [r7, #0]
 8003556:	429a      	cmp	r2, r3
 8003558:	d910      	bls.n	800357c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800355a:	4b67      	ldr	r3, [pc, #412]	; (80036f8 <HAL_RCC_ClockConfig+0x1c0>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f023 0207 	bic.w	r2, r3, #7
 8003562:	4965      	ldr	r1, [pc, #404]	; (80036f8 <HAL_RCC_ClockConfig+0x1c0>)
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	4313      	orrs	r3, r2
 8003568:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800356a:	4b63      	ldr	r3, [pc, #396]	; (80036f8 <HAL_RCC_ClockConfig+0x1c0>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0307 	and.w	r3, r3, #7
 8003572:	683a      	ldr	r2, [r7, #0]
 8003574:	429a      	cmp	r2, r3
 8003576:	d001      	beq.n	800357c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e0b8      	b.n	80036ee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0302 	and.w	r3, r3, #2
 8003584:	2b00      	cmp	r3, #0
 8003586:	d020      	beq.n	80035ca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0304 	and.w	r3, r3, #4
 8003590:	2b00      	cmp	r3, #0
 8003592:	d005      	beq.n	80035a0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003594:	4b59      	ldr	r3, [pc, #356]	; (80036fc <HAL_RCC_ClockConfig+0x1c4>)
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	4a58      	ldr	r2, [pc, #352]	; (80036fc <HAL_RCC_ClockConfig+0x1c4>)
 800359a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800359e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0308 	and.w	r3, r3, #8
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d005      	beq.n	80035b8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035ac:	4b53      	ldr	r3, [pc, #332]	; (80036fc <HAL_RCC_ClockConfig+0x1c4>)
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	4a52      	ldr	r2, [pc, #328]	; (80036fc <HAL_RCC_ClockConfig+0x1c4>)
 80035b2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80035b6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035b8:	4b50      	ldr	r3, [pc, #320]	; (80036fc <HAL_RCC_ClockConfig+0x1c4>)
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	494d      	ldr	r1, [pc, #308]	; (80036fc <HAL_RCC_ClockConfig+0x1c4>)
 80035c6:	4313      	orrs	r3, r2
 80035c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0301 	and.w	r3, r3, #1
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d040      	beq.n	8003658 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d107      	bne.n	80035ee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035de:	4b47      	ldr	r3, [pc, #284]	; (80036fc <HAL_RCC_ClockConfig+0x1c4>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d115      	bne.n	8003616 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e07f      	b.n	80036ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d107      	bne.n	8003606 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035f6:	4b41      	ldr	r3, [pc, #260]	; (80036fc <HAL_RCC_ClockConfig+0x1c4>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d109      	bne.n	8003616 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e073      	b.n	80036ee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003606:	4b3d      	ldr	r3, [pc, #244]	; (80036fc <HAL_RCC_ClockConfig+0x1c4>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0302 	and.w	r3, r3, #2
 800360e:	2b00      	cmp	r3, #0
 8003610:	d101      	bne.n	8003616 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e06b      	b.n	80036ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003616:	4b39      	ldr	r3, [pc, #228]	; (80036fc <HAL_RCC_ClockConfig+0x1c4>)
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	f023 0203 	bic.w	r2, r3, #3
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	4936      	ldr	r1, [pc, #216]	; (80036fc <HAL_RCC_ClockConfig+0x1c4>)
 8003624:	4313      	orrs	r3, r2
 8003626:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003628:	f7fe f912 	bl	8001850 <HAL_GetTick>
 800362c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800362e:	e00a      	b.n	8003646 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003630:	f7fe f90e 	bl	8001850 <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	f241 3288 	movw	r2, #5000	; 0x1388
 800363e:	4293      	cmp	r3, r2
 8003640:	d901      	bls.n	8003646 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e053      	b.n	80036ee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003646:	4b2d      	ldr	r3, [pc, #180]	; (80036fc <HAL_RCC_ClockConfig+0x1c4>)
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	f003 020c 	and.w	r2, r3, #12
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	429a      	cmp	r2, r3
 8003656:	d1eb      	bne.n	8003630 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003658:	4b27      	ldr	r3, [pc, #156]	; (80036f8 <HAL_RCC_ClockConfig+0x1c0>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0307 	and.w	r3, r3, #7
 8003660:	683a      	ldr	r2, [r7, #0]
 8003662:	429a      	cmp	r2, r3
 8003664:	d210      	bcs.n	8003688 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003666:	4b24      	ldr	r3, [pc, #144]	; (80036f8 <HAL_RCC_ClockConfig+0x1c0>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f023 0207 	bic.w	r2, r3, #7
 800366e:	4922      	ldr	r1, [pc, #136]	; (80036f8 <HAL_RCC_ClockConfig+0x1c0>)
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	4313      	orrs	r3, r2
 8003674:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003676:	4b20      	ldr	r3, [pc, #128]	; (80036f8 <HAL_RCC_ClockConfig+0x1c0>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0307 	and.w	r3, r3, #7
 800367e:	683a      	ldr	r2, [r7, #0]
 8003680:	429a      	cmp	r2, r3
 8003682:	d001      	beq.n	8003688 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e032      	b.n	80036ee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0304 	and.w	r3, r3, #4
 8003690:	2b00      	cmp	r3, #0
 8003692:	d008      	beq.n	80036a6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003694:	4b19      	ldr	r3, [pc, #100]	; (80036fc <HAL_RCC_ClockConfig+0x1c4>)
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	4916      	ldr	r1, [pc, #88]	; (80036fc <HAL_RCC_ClockConfig+0x1c4>)
 80036a2:	4313      	orrs	r3, r2
 80036a4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0308 	and.w	r3, r3, #8
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d009      	beq.n	80036c6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80036b2:	4b12      	ldr	r3, [pc, #72]	; (80036fc <HAL_RCC_ClockConfig+0x1c4>)
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	691b      	ldr	r3, [r3, #16]
 80036be:	00db      	lsls	r3, r3, #3
 80036c0:	490e      	ldr	r1, [pc, #56]	; (80036fc <HAL_RCC_ClockConfig+0x1c4>)
 80036c2:	4313      	orrs	r3, r2
 80036c4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80036c6:	f000 f821 	bl	800370c <HAL_RCC_GetSysClockFreq>
 80036ca:	4602      	mov	r2, r0
 80036cc:	4b0b      	ldr	r3, [pc, #44]	; (80036fc <HAL_RCC_ClockConfig+0x1c4>)
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	091b      	lsrs	r3, r3, #4
 80036d2:	f003 030f 	and.w	r3, r3, #15
 80036d6:	490a      	ldr	r1, [pc, #40]	; (8003700 <HAL_RCC_ClockConfig+0x1c8>)
 80036d8:	5ccb      	ldrb	r3, [r1, r3]
 80036da:	fa22 f303 	lsr.w	r3, r2, r3
 80036de:	4a09      	ldr	r2, [pc, #36]	; (8003704 <HAL_RCC_ClockConfig+0x1cc>)
 80036e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80036e2:	4b09      	ldr	r3, [pc, #36]	; (8003708 <HAL_RCC_ClockConfig+0x1d0>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4618      	mov	r0, r3
 80036e8:	f7fe f870 	bl	80017cc <HAL_InitTick>

  return HAL_OK;
 80036ec:	2300      	movs	r3, #0
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3710      	adds	r7, #16
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	40022000 	.word	0x40022000
 80036fc:	40021000 	.word	0x40021000
 8003700:	08005714 	.word	0x08005714
 8003704:	20000004 	.word	0x20000004
 8003708:	20000008 	.word	0x20000008

0800370c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800370c:	b490      	push	{r4, r7}
 800370e:	b08a      	sub	sp, #40	; 0x28
 8003710:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003712:	4b2a      	ldr	r3, [pc, #168]	; (80037bc <HAL_RCC_GetSysClockFreq+0xb0>)
 8003714:	1d3c      	adds	r4, r7, #4
 8003716:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003718:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800371c:	f240 2301 	movw	r3, #513	; 0x201
 8003720:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003722:	2300      	movs	r3, #0
 8003724:	61fb      	str	r3, [r7, #28]
 8003726:	2300      	movs	r3, #0
 8003728:	61bb      	str	r3, [r7, #24]
 800372a:	2300      	movs	r3, #0
 800372c:	627b      	str	r3, [r7, #36]	; 0x24
 800372e:	2300      	movs	r3, #0
 8003730:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003732:	2300      	movs	r3, #0
 8003734:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003736:	4b22      	ldr	r3, [pc, #136]	; (80037c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	f003 030c 	and.w	r3, r3, #12
 8003742:	2b04      	cmp	r3, #4
 8003744:	d002      	beq.n	800374c <HAL_RCC_GetSysClockFreq+0x40>
 8003746:	2b08      	cmp	r3, #8
 8003748:	d003      	beq.n	8003752 <HAL_RCC_GetSysClockFreq+0x46>
 800374a:	e02d      	b.n	80037a8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800374c:	4b1d      	ldr	r3, [pc, #116]	; (80037c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800374e:	623b      	str	r3, [r7, #32]
      break;
 8003750:	e02d      	b.n	80037ae <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	0c9b      	lsrs	r3, r3, #18
 8003756:	f003 030f 	and.w	r3, r3, #15
 800375a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800375e:	4413      	add	r3, r2
 8003760:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003764:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003766:	69fb      	ldr	r3, [r7, #28]
 8003768:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800376c:	2b00      	cmp	r3, #0
 800376e:	d013      	beq.n	8003798 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003770:	4b13      	ldr	r3, [pc, #76]	; (80037c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	0c5b      	lsrs	r3, r3, #17
 8003776:	f003 0301 	and.w	r3, r3, #1
 800377a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800377e:	4413      	add	r3, r2
 8003780:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003784:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	4a0e      	ldr	r2, [pc, #56]	; (80037c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800378a:	fb02 f203 	mul.w	r2, r2, r3
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	fbb2 f3f3 	udiv	r3, r2, r3
 8003794:	627b      	str	r3, [r7, #36]	; 0x24
 8003796:	e004      	b.n	80037a2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	4a0b      	ldr	r2, [pc, #44]	; (80037c8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800379c:	fb02 f303 	mul.w	r3, r2, r3
 80037a0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80037a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a4:	623b      	str	r3, [r7, #32]
      break;
 80037a6:	e002      	b.n	80037ae <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80037a8:	4b06      	ldr	r3, [pc, #24]	; (80037c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80037aa:	623b      	str	r3, [r7, #32]
      break;
 80037ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037ae:	6a3b      	ldr	r3, [r7, #32]
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3728      	adds	r7, #40	; 0x28
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bc90      	pop	{r4, r7}
 80037b8:	4770      	bx	lr
 80037ba:	bf00      	nop
 80037bc:	080056ac 	.word	0x080056ac
 80037c0:	40021000 	.word	0x40021000
 80037c4:	007a1200 	.word	0x007a1200
 80037c8:	003d0900 	.word	0x003d0900

080037cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037cc:	b480      	push	{r7}
 80037ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037d0:	4b02      	ldr	r3, [pc, #8]	; (80037dc <HAL_RCC_GetHCLKFreq+0x10>)
 80037d2:	681b      	ldr	r3, [r3, #0]
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bc80      	pop	{r7}
 80037da:	4770      	bx	lr
 80037dc:	20000004 	.word	0x20000004

080037e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80037e4:	f7ff fff2 	bl	80037cc <HAL_RCC_GetHCLKFreq>
 80037e8:	4602      	mov	r2, r0
 80037ea:	4b05      	ldr	r3, [pc, #20]	; (8003800 <HAL_RCC_GetPCLK1Freq+0x20>)
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	0a1b      	lsrs	r3, r3, #8
 80037f0:	f003 0307 	and.w	r3, r3, #7
 80037f4:	4903      	ldr	r1, [pc, #12]	; (8003804 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037f6:	5ccb      	ldrb	r3, [r1, r3]
 80037f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	bd80      	pop	{r7, pc}
 8003800:	40021000 	.word	0x40021000
 8003804:	08005724 	.word	0x08005724

08003808 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800380c:	f7ff ffde 	bl	80037cc <HAL_RCC_GetHCLKFreq>
 8003810:	4602      	mov	r2, r0
 8003812:	4b05      	ldr	r3, [pc, #20]	; (8003828 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	0adb      	lsrs	r3, r3, #11
 8003818:	f003 0307 	and.w	r3, r3, #7
 800381c:	4903      	ldr	r1, [pc, #12]	; (800382c <HAL_RCC_GetPCLK2Freq+0x24>)
 800381e:	5ccb      	ldrb	r3, [r1, r3]
 8003820:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003824:	4618      	mov	r0, r3
 8003826:	bd80      	pop	{r7, pc}
 8003828:	40021000 	.word	0x40021000
 800382c:	08005724 	.word	0x08005724

08003830 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003830:	b480      	push	{r7}
 8003832:	b085      	sub	sp, #20
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003838:	4b0a      	ldr	r3, [pc, #40]	; (8003864 <RCC_Delay+0x34>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a0a      	ldr	r2, [pc, #40]	; (8003868 <RCC_Delay+0x38>)
 800383e:	fba2 2303 	umull	r2, r3, r2, r3
 8003842:	0a5b      	lsrs	r3, r3, #9
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	fb02 f303 	mul.w	r3, r2, r3
 800384a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800384c:	bf00      	nop
  }
  while (Delay --);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	1e5a      	subs	r2, r3, #1
 8003852:	60fa      	str	r2, [r7, #12]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d1f9      	bne.n	800384c <RCC_Delay+0x1c>
}
 8003858:	bf00      	nop
 800385a:	bf00      	nop
 800385c:	3714      	adds	r7, #20
 800385e:	46bd      	mov	sp, r7
 8003860:	bc80      	pop	{r7}
 8003862:	4770      	bx	lr
 8003864:	20000004 	.word	0x20000004
 8003868:	10624dd3 	.word	0x10624dd3

0800386c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b082      	sub	sp, #8
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d101      	bne.n	800387e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e076      	b.n	800396c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003882:	2b00      	cmp	r3, #0
 8003884:	d108      	bne.n	8003898 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800388e:	d009      	beq.n	80038a4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	61da      	str	r2, [r3, #28]
 8003896:	e005      	b.n	80038a4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2200      	movs	r2, #0
 80038a2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2200      	movs	r2, #0
 80038a8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d106      	bne.n	80038c4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f7fd fb58 	bl	8000f74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2202      	movs	r2, #2
 80038c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038da:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80038ec:	431a      	orrs	r2, r3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038f6:	431a      	orrs	r2, r3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	691b      	ldr	r3, [r3, #16]
 80038fc:	f003 0302 	and.w	r3, r3, #2
 8003900:	431a      	orrs	r2, r3
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	695b      	ldr	r3, [r3, #20]
 8003906:	f003 0301 	and.w	r3, r3, #1
 800390a:	431a      	orrs	r2, r3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	699b      	ldr	r3, [r3, #24]
 8003910:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003914:	431a      	orrs	r2, r3
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	69db      	ldr	r3, [r3, #28]
 800391a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800391e:	431a      	orrs	r2, r3
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6a1b      	ldr	r3, [r3, #32]
 8003924:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003928:	ea42 0103 	orr.w	r1, r2, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003930:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	430a      	orrs	r2, r1
 800393a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	699b      	ldr	r3, [r3, #24]
 8003940:	0c1a      	lsrs	r2, r3, #16
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f002 0204 	and.w	r2, r2, #4
 800394a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	69da      	ldr	r2, [r3, #28]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800395a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2201      	movs	r2, #1
 8003966:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800396a:	2300      	movs	r3, #0
}
 800396c:	4618      	mov	r0, r3
 800396e:	3708      	adds	r7, #8
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}

08003974 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b088      	sub	sp, #32
 8003978:	af02      	add	r7, sp, #8
 800397a:	60f8      	str	r0, [r7, #12]
 800397c:	60b9      	str	r1, [r7, #8]
 800397e:	603b      	str	r3, [r7, #0]
 8003980:	4613      	mov	r3, r2
 8003982:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003984:	2300      	movs	r3, #0
 8003986:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003990:	d112      	bne.n	80039b8 <HAL_SPI_Receive+0x44>
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d10e      	bne.n	80039b8 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2204      	movs	r2, #4
 800399e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80039a2:	88fa      	ldrh	r2, [r7, #6]
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	9300      	str	r3, [sp, #0]
 80039a8:	4613      	mov	r3, r2
 80039aa:	68ba      	ldr	r2, [r7, #8]
 80039ac:	68b9      	ldr	r1, [r7, #8]
 80039ae:	68f8      	ldr	r0, [r7, #12]
 80039b0:	f000 f8f1 	bl	8003b96 <HAL_SPI_TransmitReceive>
 80039b4:	4603      	mov	r3, r0
 80039b6:	e0ea      	b.n	8003b8e <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d101      	bne.n	80039c6 <HAL_SPI_Receive+0x52>
 80039c2:	2302      	movs	r3, #2
 80039c4:	e0e3      	b.n	8003b8e <HAL_SPI_Receive+0x21a>
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2201      	movs	r2, #1
 80039ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80039ce:	f7fd ff3f 	bl	8001850 <HAL_GetTick>
 80039d2:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d002      	beq.n	80039e6 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80039e0:	2302      	movs	r3, #2
 80039e2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80039e4:	e0ca      	b.n	8003b7c <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d002      	beq.n	80039f2 <HAL_SPI_Receive+0x7e>
 80039ec:	88fb      	ldrh	r3, [r7, #6]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d102      	bne.n	80039f8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80039f6:	e0c1      	b.n	8003b7c <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2204      	movs	r2, #4
 80039fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2200      	movs	r2, #0
 8003a04:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	68ba      	ldr	r2, [r7, #8]
 8003a0a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	88fa      	ldrh	r2, [r7, #6]
 8003a10:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	88fa      	ldrh	r2, [r7, #6]
 8003a16:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2200      	movs	r2, #0
 8003a22:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2200      	movs	r2, #0
 8003a28:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2200      	movs	r2, #0
 8003a34:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a3e:	d10f      	bne.n	8003a60 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a4e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003a5e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a6a:	2b40      	cmp	r3, #64	; 0x40
 8003a6c:	d007      	beq.n	8003a7e <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a7c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	68db      	ldr	r3, [r3, #12]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d162      	bne.n	8003b4c <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003a86:	e02e      	b.n	8003ae6 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	f003 0301 	and.w	r3, r3, #1
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d115      	bne.n	8003ac2 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f103 020c 	add.w	r2, r3, #12
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aa2:	7812      	ldrb	r2, [r2, #0]
 8003aa4:	b2d2      	uxtb	r2, r2
 8003aa6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aac:	1c5a      	adds	r2, r3, #1
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	3b01      	subs	r3, #1
 8003aba:	b29a      	uxth	r2, r3
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003ac0:	e011      	b.n	8003ae6 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ac2:	f7fd fec5 	bl	8001850 <HAL_GetTick>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	683a      	ldr	r2, [r7, #0]
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d803      	bhi.n	8003ada <HAL_SPI_Receive+0x166>
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ad8:	d102      	bne.n	8003ae0 <HAL_SPI_Receive+0x16c>
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d102      	bne.n	8003ae6 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003ae4:	e04a      	b.n	8003b7c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d1cb      	bne.n	8003a88 <HAL_SPI_Receive+0x114>
 8003af0:	e031      	b.n	8003b56 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	f003 0301 	and.w	r3, r3, #1
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d113      	bne.n	8003b28 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	68da      	ldr	r2, [r3, #12]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b0a:	b292      	uxth	r2, r2
 8003b0c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b12:	1c9a      	adds	r2, r3, #2
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b1c:	b29b      	uxth	r3, r3
 8003b1e:	3b01      	subs	r3, #1
 8003b20:	b29a      	uxth	r2, r3
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003b26:	e011      	b.n	8003b4c <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b28:	f7fd fe92 	bl	8001850 <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	683a      	ldr	r2, [r7, #0]
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d803      	bhi.n	8003b40 <HAL_SPI_Receive+0x1cc>
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b3e:	d102      	bne.n	8003b46 <HAL_SPI_Receive+0x1d2>
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d102      	bne.n	8003b4c <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003b4a:	e017      	b.n	8003b7c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b50:	b29b      	uxth	r3, r3
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d1cd      	bne.n	8003af2 <HAL_SPI_Receive+0x17e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b56:	693a      	ldr	r2, [r7, #16]
 8003b58:	6839      	ldr	r1, [r7, #0]
 8003b5a:	68f8      	ldr	r0, [r7, #12]
 8003b5c:	f000 fe60 	bl	8004820 <SPI_EndRxTransaction>
 8003b60:	4603      	mov	r3, r0
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d002      	beq.n	8003b6c <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2220      	movs	r2, #32
 8003b6a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d002      	beq.n	8003b7a <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	75fb      	strb	r3, [r7, #23]
 8003b78:	e000      	b.n	8003b7c <HAL_SPI_Receive+0x208>
  }

error :
 8003b7a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2200      	movs	r2, #0
 8003b88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003b8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3718      	adds	r7, #24
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}

08003b96 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003b96:	b580      	push	{r7, lr}
 8003b98:	b08c      	sub	sp, #48	; 0x30
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	60f8      	str	r0, [r7, #12]
 8003b9e:	60b9      	str	r1, [r7, #8]
 8003ba0:	607a      	str	r2, [r7, #4]
 8003ba2:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d101      	bne.n	8003bbc <HAL_SPI_TransmitReceive+0x26>
 8003bb8:	2302      	movs	r3, #2
 8003bba:	e18a      	b.n	8003ed2 <HAL_SPI_TransmitReceive+0x33c>
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003bc4:	f7fd fe44 	bl	8001850 <HAL_GetTick>
 8003bc8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003bd0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003bda:	887b      	ldrh	r3, [r7, #2]
 8003bdc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003bde:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d00f      	beq.n	8003c06 <HAL_SPI_TransmitReceive+0x70>
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bec:	d107      	bne.n	8003bfe <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d103      	bne.n	8003bfe <HAL_SPI_TransmitReceive+0x68>
 8003bf6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003bfa:	2b04      	cmp	r3, #4
 8003bfc:	d003      	beq.n	8003c06 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003bfe:	2302      	movs	r3, #2
 8003c00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003c04:	e15b      	b.n	8003ebe <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d005      	beq.n	8003c18 <HAL_SPI_TransmitReceive+0x82>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d002      	beq.n	8003c18 <HAL_SPI_TransmitReceive+0x82>
 8003c12:	887b      	ldrh	r3, [r7, #2]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d103      	bne.n	8003c20 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003c1e:	e14e      	b.n	8003ebe <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	2b04      	cmp	r3, #4
 8003c2a:	d003      	beq.n	8003c34 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2205      	movs	r2, #5
 8003c30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2200      	movs	r2, #0
 8003c38:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	887a      	ldrh	r2, [r7, #2]
 8003c44:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	887a      	ldrh	r2, [r7, #2]
 8003c4a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	68ba      	ldr	r2, [r7, #8]
 8003c50:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	887a      	ldrh	r2, [r7, #2]
 8003c56:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	887a      	ldrh	r2, [r7, #2]
 8003c5c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2200      	movs	r2, #0
 8003c62:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2200      	movs	r2, #0
 8003c68:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c74:	2b40      	cmp	r3, #64	; 0x40
 8003c76:	d007      	beq.n	8003c88 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c86:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c90:	d178      	bne.n	8003d84 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d002      	beq.n	8003ca0 <HAL_SPI_TransmitReceive+0x10a>
 8003c9a:	8b7b      	ldrh	r3, [r7, #26]
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d166      	bne.n	8003d6e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca4:	881a      	ldrh	r2, [r3, #0]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb0:	1c9a      	adds	r2, r3, #2
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	3b01      	subs	r3, #1
 8003cbe:	b29a      	uxth	r2, r3
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003cc4:	e053      	b.n	8003d6e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	f003 0302 	and.w	r3, r3, #2
 8003cd0:	2b02      	cmp	r3, #2
 8003cd2:	d11b      	bne.n	8003d0c <HAL_SPI_TransmitReceive+0x176>
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d016      	beq.n	8003d0c <HAL_SPI_TransmitReceive+0x176>
 8003cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d113      	bne.n	8003d0c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce8:	881a      	ldrh	r2, [r3, #0]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf4:	1c9a      	adds	r2, r3, #2
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	3b01      	subs	r3, #1
 8003d02:	b29a      	uxth	r2, r3
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	f003 0301 	and.w	r3, r3, #1
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d119      	bne.n	8003d4e <HAL_SPI_TransmitReceive+0x1b8>
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d014      	beq.n	8003d4e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	68da      	ldr	r2, [r3, #12]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d2e:	b292      	uxth	r2, r2
 8003d30:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d36:	1c9a      	adds	r2, r3, #2
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	3b01      	subs	r3, #1
 8003d44:	b29a      	uxth	r2, r3
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003d4e:	f7fd fd7f 	bl	8001850 <HAL_GetTick>
 8003d52:	4602      	mov	r2, r0
 8003d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d56:	1ad3      	subs	r3, r2, r3
 8003d58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d807      	bhi.n	8003d6e <HAL_SPI_TransmitReceive+0x1d8>
 8003d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d64:	d003      	beq.n	8003d6e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003d6c:	e0a7      	b.n	8003ebe <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d1a6      	bne.n	8003cc6 <HAL_SPI_TransmitReceive+0x130>
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d1a1      	bne.n	8003cc6 <HAL_SPI_TransmitReceive+0x130>
 8003d82:	e07c      	b.n	8003e7e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d002      	beq.n	8003d92 <HAL_SPI_TransmitReceive+0x1fc>
 8003d8c:	8b7b      	ldrh	r3, [r7, #26]
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d16b      	bne.n	8003e6a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	330c      	adds	r3, #12
 8003d9c:	7812      	ldrb	r2, [r2, #0]
 8003d9e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da4:	1c5a      	adds	r2, r3, #1
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	3b01      	subs	r3, #1
 8003db2:	b29a      	uxth	r2, r3
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003db8:	e057      	b.n	8003e6a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	f003 0302 	and.w	r3, r3, #2
 8003dc4:	2b02      	cmp	r3, #2
 8003dc6:	d11c      	bne.n	8003e02 <HAL_SPI_TransmitReceive+0x26c>
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d017      	beq.n	8003e02 <HAL_SPI_TransmitReceive+0x26c>
 8003dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d114      	bne.n	8003e02 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	330c      	adds	r3, #12
 8003de2:	7812      	ldrb	r2, [r2, #0]
 8003de4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dea:	1c5a      	adds	r2, r3, #1
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003df4:	b29b      	uxth	r3, r3
 8003df6:	3b01      	subs	r3, #1
 8003df8:	b29a      	uxth	r2, r3
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	f003 0301 	and.w	r3, r3, #1
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d119      	bne.n	8003e44 <HAL_SPI_TransmitReceive+0x2ae>
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d014      	beq.n	8003e44 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	68da      	ldr	r2, [r3, #12]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e24:	b2d2      	uxtb	r2, r2
 8003e26:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e2c:	1c5a      	adds	r2, r3, #1
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e36:	b29b      	uxth	r3, r3
 8003e38:	3b01      	subs	r3, #1
 8003e3a:	b29a      	uxth	r2, r3
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003e40:	2301      	movs	r3, #1
 8003e42:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003e44:	f7fd fd04 	bl	8001850 <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d803      	bhi.n	8003e5c <HAL_SPI_TransmitReceive+0x2c6>
 8003e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e5a:	d102      	bne.n	8003e62 <HAL_SPI_TransmitReceive+0x2cc>
 8003e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d103      	bne.n	8003e6a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003e68:	e029      	b.n	8003ebe <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d1a2      	bne.n	8003dba <HAL_SPI_TransmitReceive+0x224>
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d19d      	bne.n	8003dba <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e80:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003e82:	68f8      	ldr	r0, [r7, #12]
 8003e84:	f000 fd1e 	bl	80048c4 <SPI_EndRxTxTransaction>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d006      	beq.n	8003e9c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2220      	movs	r2, #32
 8003e98:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003e9a:	e010      	b.n	8003ebe <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d10b      	bne.n	8003ebc <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	617b      	str	r3, [r7, #20]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	68db      	ldr	r3, [r3, #12]
 8003eae:	617b      	str	r3, [r7, #20]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	617b      	str	r3, [r7, #20]
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	e000      	b.n	8003ebe <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003ebc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003ece:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3730      	adds	r7, #48	; 0x30
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
	...

08003edc <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b086      	sub	sp, #24
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	60f8      	str	r0, [r7, #12]
 8003ee4:	60b9      	str	r1, [r7, #8]
 8003ee6:	607a      	str	r2, [r7, #4]
 8003ee8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003eea:	2300      	movs	r3, #0
 8003eec:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d101      	bne.n	8003efc <HAL_SPI_TransmitReceive_DMA+0x20>
 8003ef8:	2302      	movs	r3, #2
 8003efa:	e0e3      	b.n	80040c4 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2201      	movs	r2, #1
 8003f00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f0a:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8003f12:	7dbb      	ldrb	r3, [r7, #22]
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d00d      	beq.n	8003f34 <HAL_SPI_TransmitReceive_DMA+0x58>
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f1e:	d106      	bne.n	8003f2e <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d102      	bne.n	8003f2e <HAL_SPI_TransmitReceive_DMA+0x52>
 8003f28:	7dbb      	ldrb	r3, [r7, #22]
 8003f2a:	2b04      	cmp	r3, #4
 8003f2c:	d002      	beq.n	8003f34 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8003f2e:	2302      	movs	r3, #2
 8003f30:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003f32:	e0c2      	b.n	80040ba <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d005      	beq.n	8003f46 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d002      	beq.n	8003f46 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8003f40:	887b      	ldrh	r3, [r7, #2]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d102      	bne.n	8003f4c <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003f4a:	e0b6      	b.n	80040ba <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	2b04      	cmp	r3, #4
 8003f56:	d003      	beq.n	8003f60 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2205      	movs	r2, #5
 8003f5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2200      	movs	r2, #0
 8003f64:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	68ba      	ldr	r2, [r7, #8]
 8003f6a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	887a      	ldrh	r2, [r7, #2]
 8003f70:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	887a      	ldrh	r2, [r7, #2]
 8003f76:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	887a      	ldrh	r2, [r7, #2]
 8003f82:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	887a      	ldrh	r2, [r7, #2]
 8003f88:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2200      	movs	r2, #0
 8003f94:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	2b04      	cmp	r3, #4
 8003fa0:	d108      	bne.n	8003fb4 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fa6:	4a49      	ldr	r2, [pc, #292]	; (80040cc <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8003fa8:	62da      	str	r2, [r3, #44]	; 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fae:	4a48      	ldr	r2, [pc, #288]	; (80040d0 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8003fb0:	629a      	str	r2, [r3, #40]	; 0x28
 8003fb2:	e007      	b.n	8003fc4 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fb8:	4a46      	ldr	r2, [pc, #280]	; (80040d4 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 8003fba:	62da      	str	r2, [r3, #44]	; 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fc0:	4a45      	ldr	r2, [pc, #276]	; (80040d8 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 8003fc2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fc8:	4a44      	ldr	r2, [pc, #272]	; (80040dc <HAL_SPI_TransmitReceive_DMA+0x200>)
 8003fca:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	330c      	adds	r3, #12
 8003fde:	4619      	mov	r1, r3
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe4:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fea:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003fec:	f7fd fde2 	bl	8001bb4 <HAL_DMA_Start_IT>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d00c      	beq.n	8004010 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ffa:	f043 0210 	orr.w	r2, r3, #16
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2201      	movs	r2, #1
 800400a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800400e:	e054      	b.n	80040ba <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	685a      	ldr	r2, [r3, #4]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f042 0201 	orr.w	r2, r2, #1
 800401e:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004024:	2200      	movs	r2, #0
 8004026:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferCpltCallback     = NULL;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800402c:	2200      	movs	r2, #0
 800402e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->hdmatx->XferErrorCallback    = NULL;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004034:	2200      	movs	r2, #0
 8004036:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferAbortCallback    = NULL;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800403c:	2200      	movs	r2, #0
 800403e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004048:	4619      	mov	r1, r3
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	330c      	adds	r3, #12
 8004050:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004056:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004058:	f7fd fdac 	bl	8001bb4 <HAL_DMA_Start_IT>
 800405c:	4603      	mov	r3, r0
 800405e:	2b00      	cmp	r3, #0
 8004060:	d00c      	beq.n	800407c <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004066:	f043 0210 	orr.w	r2, r3, #16
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2201      	movs	r2, #1
 8004076:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800407a:	e01e      	b.n	80040ba <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004086:	2b40      	cmp	r3, #64	; 0x40
 8004088:	d007      	beq.n	800409a <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004098:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	685a      	ldr	r2, [r3, #4]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f042 0220 	orr.w	r2, r2, #32
 80040a8:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	685a      	ldr	r2, [r3, #4]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f042 0202 	orr.w	r2, r2, #2
 80040b8:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2200      	movs	r2, #0
 80040be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80040c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3718      	adds	r7, #24
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}
 80040cc:	08004671 	.word	0x08004671
 80040d0:	0800453d 	.word	0x0800453d
 80040d4:	0800468d 	.word	0x0800468d
 80040d8:	080045e3 	.word	0x080045e3
 80040dc:	080046a9 	.word	0x080046a9

080040e0 <HAL_SPI_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Abort(SPI_HandleTypeDef *hspi)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b086      	sub	sp, #24
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode;
  __IO uint32_t count;
  __IO uint32_t resetcount;

  /* Initialized local variable  */
  errorcode = HAL_OK;
 80040e8:	2300      	movs	r3, #0
 80040ea:	75fb      	strb	r3, [r7, #23]
  resetcount = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 80040ec:	4b6a      	ldr	r3, [pc, #424]	; (8004298 <HAL_SPI_Abort+0x1b8>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a6a      	ldr	r2, [pc, #424]	; (800429c <HAL_SPI_Abort+0x1bc>)
 80040f2:	fba2 2303 	umull	r2, r3, r2, r3
 80040f6:	0a5b      	lsrs	r3, r3, #9
 80040f8:	2264      	movs	r2, #100	; 0x64
 80040fa:	fb02 f303 	mul.w	r3, r2, r3
 80040fe:	60fb      	str	r3, [r7, #12]
  count = resetcount;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	613b      	str	r3, [r7, #16]

  /* Clear ERRIE interrupt to avoid error interrupts generation during Abort procedure */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	685a      	ldr	r2, [r3, #4]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f022 0220 	bic.w	r2, r2, #32
 8004112:	605a      	str	r2, [r3, #4]

  /* Disable TXEIE, RXNEIE and ERRIE(mode fault event, overrun error, TI frame error) interrupts */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE))
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800411e:	2b00      	cmp	r3, #0
 8004120:	d017      	beq.n	8004152 <HAL_SPI_Abort+0x72>
  {
    hspi->TxISR = SPI_AbortTx_ISR;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	4a5e      	ldr	r2, [pc, #376]	; (80042a0 <HAL_SPI_Abort+0x1c0>)
 8004126:	645a      	str	r2, [r3, #68]	; 0x44
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d106      	bne.n	800413c <HAL_SPI_Abort+0x5c>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004132:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800413a:	e008      	b.n	800414e <HAL_SPI_Abort+0x6e>
      }
      count--;
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	3b01      	subs	r3, #1
 8004140:	613b      	str	r3, [r7, #16]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004148:	b2db      	uxtb	r3, r3
 800414a:	2b07      	cmp	r3, #7
 800414c:	d1ec      	bne.n	8004128 <HAL_SPI_Abort+0x48>
    /* Reset Timeout Counter */
    count = resetcount;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	613b      	str	r3, [r7, #16]
  }

  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800415c:	2b00      	cmp	r3, #0
 800415e:	d017      	beq.n	8004190 <HAL_SPI_Abort+0xb0>
  {
    hspi->RxISR = SPI_AbortRx_ISR;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	4a50      	ldr	r2, [pc, #320]	; (80042a4 <HAL_SPI_Abort+0x1c4>)
 8004164:	641a      	str	r2, [r3, #64]	; 0x40
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d106      	bne.n	800417a <HAL_SPI_Abort+0x9a>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004170:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8004178:	e008      	b.n	800418c <HAL_SPI_Abort+0xac>
      }
      count--;
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	3b01      	subs	r3, #1
 800417e:	613b      	str	r3, [r7, #16]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004186:	b2db      	uxtb	r3, r3
 8004188:	2b07      	cmp	r3, #7
 800418a:	d1ec      	bne.n	8004166 <HAL_SPI_Abort+0x86>
    /* Reset Timeout Counter */
    count = resetcount;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	613b      	str	r3, [r7, #16]
  }

  /* Disable the SPI DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	f003 0302 	and.w	r3, r3, #2
 800419a:	2b00      	cmp	r3, #0
 800419c:	d02e      	beq.n	80041fc <HAL_SPI_Abort+0x11c>
  {
    /* Abort the SPI DMA Tx Stream/Channel : use blocking DMA Abort API (no callback) */
    if (hspi->hdmatx != NULL)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d02a      	beq.n	80041fc <HAL_SPI_Abort+0x11c>
    {
      /* Set the SPI DMA Abort callback :
      will lead to call HAL_SPI_AbortCpltCallback() at end of DMA abort procedure */
      hspi->hdmatx->XferAbortCallback = NULL;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041aa:	2200      	movs	r2, #0
 80041ac:	635a      	str	r2, [r3, #52]	; 0x34

      /* Abort DMA Tx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort(hspi->hdmatx) != HAL_OK)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041b2:	4618      	mov	r0, r3
 80041b4:	f7fd fd5d 	bl	8001c72 <HAL_DMA_Abort>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d002      	beq.n	80041c4 <HAL_SPI_Abort+0xe4>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2240      	movs	r2, #64	; 0x40
 80041c2:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Disable Tx DMA Request */
      CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN));
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	685a      	ldr	r2, [r3, #4]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f022 0202 	bic.w	r2, r2, #2
 80041d2:	605a      	str	r2, [r3, #4]

      /* Wait until TXE flag is set */
      do
      {
        if (count == 0U)
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d106      	bne.n	80041e8 <HAL_SPI_Abort+0x108>
        {
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041de:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	655a      	str	r2, [r3, #84]	; 0x54
          break;
 80041e6:	e009      	b.n	80041fc <HAL_SPI_Abort+0x11c>
        }
        count--;
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	3b01      	subs	r3, #1
 80041ec:	613b      	str	r3, [r7, #16]
      } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	f003 0302 	and.w	r3, r3, #2
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d0eb      	beq.n	80041d4 <HAL_SPI_Abort+0xf4>
    }
  }

  /* Disable the SPI DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	f003 0301 	and.w	r3, r3, #1
 8004206:	2b00      	cmp	r3, #0
 8004208:	d022      	beq.n	8004250 <HAL_SPI_Abort+0x170>
  {
    /* Abort the SPI DMA Rx Stream/Channel : use blocking DMA Abort API (no callback) */
    if (hspi->hdmarx != NULL)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800420e:	2b00      	cmp	r3, #0
 8004210:	d01e      	beq.n	8004250 <HAL_SPI_Abort+0x170>
    {
      /* Set the SPI DMA Abort callback :
      will lead to call HAL_SPI_AbortCpltCallback() at end of DMA abort procedure */
      hspi->hdmarx->XferAbortCallback = NULL;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004216:	2200      	movs	r2, #0
 8004218:	635a      	str	r2, [r3, #52]	; 0x34

      /* Abort DMA Rx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort(hspi->hdmarx) != HAL_OK)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800421e:	4618      	mov	r0, r3
 8004220:	f7fd fd27 	bl	8001c72 <HAL_DMA_Abort>
 8004224:	4603      	mov	r3, r0
 8004226:	2b00      	cmp	r3, #0
 8004228:	d002      	beq.n	8004230 <HAL_SPI_Abort+0x150>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2240      	movs	r2, #64	; 0x40
 800422e:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Disable peripheral */
      __HAL_SPI_DISABLE(hspi);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800423e:	601a      	str	r2, [r3, #0]

      /* Disable Rx DMA Request */
      CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_RXDMAEN));
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	685a      	ldr	r2, [r3, #4]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f022 0201 	bic.w	r2, r2, #1
 800424e:	605a      	str	r2, [r3, #4]
    }
  }
  /* Reset Tx and Rx transfer counters */
  hspi->RxXferCount = 0U;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2200      	movs	r2, #0
 8004254:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check error during Abort procedure */
  if (hspi->ErrorCode == HAL_SPI_ERROR_ABORT)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004260:	2b40      	cmp	r3, #64	; 0x40
 8004262:	d102      	bne.n	800426a <HAL_SPI_Abort+0x18a>
  {
    /* return HAL_Error in case of error during Abort procedure */
    errorcode = HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	75fb      	strb	r3, [r7, #23]
 8004268:	e002      	b.n	8004270 <HAL_SPI_Abort+0x190>
  }
  else
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004270:	2300      	movs	r3, #0
 8004272:	60bb      	str	r3, [r7, #8]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	68db      	ldr	r3, [r3, #12]
 800427a:	60bb      	str	r3, [r7, #8]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	60bb      	str	r3, [r7, #8]
 8004284:	68bb      	ldr	r3, [r7, #8]

  /* Restore hspi->state to ready */
  hspi->State = HAL_SPI_STATE_READY;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2201      	movs	r2, #1
 800428a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return errorcode;
 800428e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004290:	4618      	mov	r0, r3
 8004292:	3718      	adds	r7, #24
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}
 8004298:	20000004 	.word	0x20000004
 800429c:	057619f1 	.word	0x057619f1
 80042a0:	08004985 	.word	0x08004985
 80042a4:	08004901 	.word	0x08004901

080042a8 <HAL_SPI_DMAStop>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAStop(SPI_HandleTypeDef *hspi)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b084      	sub	sp, #16
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80042b0:	2300      	movs	r3, #0
 80042b2:	73fb      	strb	r3, [r7, #15]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_SPI_TxCpltCallback() or HAL_SPI_RxCpltCallback() or HAL_SPI_TxRxCpltCallback()
     */

  /* Abort the SPI DMA tx Stream/Channel  */
  if (hspi->hdmatx != NULL)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d00f      	beq.n	80042dc <HAL_SPI_DMAStop+0x34>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmatx))
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042c0:	4618      	mov	r0, r3
 80042c2:	f7fd fcd6 	bl	8001c72 <HAL_DMA_Abort>
 80042c6:	4603      	mov	r3, r0
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d007      	beq.n	80042dc <HAL_SPI_DMAStop+0x34>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042d0:	f043 0210 	orr.w	r2, r3, #16
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	73fb      	strb	r3, [r7, #15]
    }
  }
  /* Abort the SPI DMA rx Stream/Channel  */
  if (hspi->hdmarx != NULL)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d00f      	beq.n	8004304 <HAL_SPI_DMAStop+0x5c>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmarx))
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042e8:	4618      	mov	r0, r3
 80042ea:	f7fd fcc2 	bl	8001c72 <HAL_DMA_Abort>
 80042ee:	4603      	mov	r3, r0
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d007      	beq.n	8004304 <HAL_SPI_DMAStop+0x5c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042f8:	f043 0210 	orr.w	r2, r3, #16
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	685a      	ldr	r2, [r3, #4]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f022 0203 	bic.w	r2, r2, #3
 8004312:	605a      	str	r2, [r3, #4]
  hspi->State = HAL_SPI_STATE_READY;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  return errorcode;
 800431c:	7bfb      	ldrb	r3, [r7, #15]
}
 800431e:	4618      	mov	r0, r3
 8004320:	3710      	adds	r7, #16
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}
	...

08004328 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b088      	sub	sp, #32
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004340:	69bb      	ldr	r3, [r7, #24]
 8004342:	099b      	lsrs	r3, r3, #6
 8004344:	f003 0301 	and.w	r3, r3, #1
 8004348:	2b00      	cmp	r3, #0
 800434a:	d10f      	bne.n	800436c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800434c:	69bb      	ldr	r3, [r7, #24]
 800434e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004352:	2b00      	cmp	r3, #0
 8004354:	d00a      	beq.n	800436c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	099b      	lsrs	r3, r3, #6
 800435a:	f003 0301 	and.w	r3, r3, #1
 800435e:	2b00      	cmp	r3, #0
 8004360:	d004      	beq.n	800436c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	4798      	blx	r3
    return;
 800436a:	e0be      	b.n	80044ea <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800436c:	69bb      	ldr	r3, [r7, #24]
 800436e:	085b      	lsrs	r3, r3, #1
 8004370:	f003 0301 	and.w	r3, r3, #1
 8004374:	2b00      	cmp	r3, #0
 8004376:	d00a      	beq.n	800438e <HAL_SPI_IRQHandler+0x66>
 8004378:	69fb      	ldr	r3, [r7, #28]
 800437a:	09db      	lsrs	r3, r3, #7
 800437c:	f003 0301 	and.w	r3, r3, #1
 8004380:	2b00      	cmp	r3, #0
 8004382:	d004      	beq.n	800438e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004388:	6878      	ldr	r0, [r7, #4]
 800438a:	4798      	blx	r3
    return;
 800438c:	e0ad      	b.n	80044ea <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 800438e:	69bb      	ldr	r3, [r7, #24]
 8004390:	095b      	lsrs	r3, r3, #5
 8004392:	f003 0301 	and.w	r3, r3, #1
 8004396:	2b00      	cmp	r3, #0
 8004398:	d106      	bne.n	80043a8 <HAL_SPI_IRQHandler+0x80>
 800439a:	69bb      	ldr	r3, [r7, #24]
 800439c:	099b      	lsrs	r3, r3, #6
 800439e:	f003 0301 	and.w	r3, r3, #1
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	f000 80a1 	beq.w	80044ea <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80043a8:	69fb      	ldr	r3, [r7, #28]
 80043aa:	095b      	lsrs	r3, r3, #5
 80043ac:	f003 0301 	and.w	r3, r3, #1
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	f000 809a 	beq.w	80044ea <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80043b6:	69bb      	ldr	r3, [r7, #24]
 80043b8:	099b      	lsrs	r3, r3, #6
 80043ba:	f003 0301 	and.w	r3, r3, #1
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d023      	beq.n	800440a <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	2b03      	cmp	r3, #3
 80043cc:	d011      	beq.n	80043f2 <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043d2:	f043 0204 	orr.w	r2, r3, #4
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80043da:	2300      	movs	r3, #0
 80043dc:	617b      	str	r3, [r7, #20]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	617b      	str	r3, [r7, #20]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	617b      	str	r3, [r7, #20]
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	e00b      	b.n	800440a <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80043f2:	2300      	movs	r3, #0
 80043f4:	613b      	str	r3, [r7, #16]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	613b      	str	r3, [r7, #16]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	613b      	str	r3, [r7, #16]
 8004406:	693b      	ldr	r3, [r7, #16]
        return;
 8004408:	e06f      	b.n	80044ea <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800440a:	69bb      	ldr	r3, [r7, #24]
 800440c:	095b      	lsrs	r3, r3, #5
 800440e:	f003 0301 	and.w	r3, r3, #1
 8004412:	2b00      	cmp	r3, #0
 8004414:	d014      	beq.n	8004440 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800441a:	f043 0201 	orr.w	r2, r3, #1
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004422:	2300      	movs	r3, #0
 8004424:	60fb      	str	r3, [r7, #12]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	60fb      	str	r3, [r7, #12]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800443c:	601a      	str	r2, [r3, #0]
 800443e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004444:	2b00      	cmp	r3, #0
 8004446:	d04f      	beq.n	80044e8 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	685a      	ldr	r2, [r3, #4]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004456:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2201      	movs	r2, #1
 800445c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004460:	69fb      	ldr	r3, [r7, #28]
 8004462:	f003 0302 	and.w	r3, r3, #2
 8004466:	2b00      	cmp	r3, #0
 8004468:	d104      	bne.n	8004474 <HAL_SPI_IRQHandler+0x14c>
 800446a:	69fb      	ldr	r3, [r7, #28]
 800446c:	f003 0301 	and.w	r3, r3, #1
 8004470:	2b00      	cmp	r3, #0
 8004472:	d034      	beq.n	80044de <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	685a      	ldr	r2, [r3, #4]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f022 0203 	bic.w	r2, r2, #3
 8004482:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004488:	2b00      	cmp	r3, #0
 800448a:	d011      	beq.n	80044b0 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004490:	4a17      	ldr	r2, [pc, #92]	; (80044f0 <HAL_SPI_IRQHandler+0x1c8>)
 8004492:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004498:	4618      	mov	r0, r3
 800449a:	f7fd fc25 	bl	8001ce8 <HAL_DMA_Abort_IT>
 800449e:	4603      	mov	r3, r0
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d005      	beq.n	80044b0 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044a8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d016      	beq.n	80044e6 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044bc:	4a0c      	ldr	r2, [pc, #48]	; (80044f0 <HAL_SPI_IRQHandler+0x1c8>)
 80044be:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044c4:	4618      	mov	r0, r3
 80044c6:	f7fd fc0f 	bl	8001ce8 <HAL_DMA_Abort_IT>
 80044ca:	4603      	mov	r3, r0
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d00a      	beq.n	80044e6 <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044d4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80044dc:	e003      	b.n	80044e6 <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f000 f823 	bl	800452a <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80044e4:	e000      	b.n	80044e8 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 80044e6:	bf00      	nop
    return;
 80044e8:	bf00      	nop
  }
}
 80044ea:	3720      	adds	r7, #32
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}
 80044f0:	080046e9 	.word	0x080046e9

080044f4 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b083      	sub	sp, #12
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80044fc:	bf00      	nop
 80044fe:	370c      	adds	r7, #12
 8004500:	46bd      	mov	sp, r7
 8004502:	bc80      	pop	{r7}
 8004504:	4770      	bx	lr

08004506 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004506:	b480      	push	{r7}
 8004508:	b083      	sub	sp, #12
 800450a:	af00      	add	r7, sp, #0
 800450c:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800450e:	bf00      	nop
 8004510:	370c      	adds	r7, #12
 8004512:	46bd      	mov	sp, r7
 8004514:	bc80      	pop	{r7}
 8004516:	4770      	bx	lr

08004518 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004518:	b480      	push	{r7}
 800451a:	b083      	sub	sp, #12
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8004520:	bf00      	nop
 8004522:	370c      	adds	r7, #12
 8004524:	46bd      	mov	sp, r7
 8004526:	bc80      	pop	{r7}
 8004528:	4770      	bx	lr

0800452a <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800452a:	b480      	push	{r7}
 800452c:	b083      	sub	sp, #12
 800452e:	af00      	add	r7, sp, #0
 8004530:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004532:	bf00      	nop
 8004534:	370c      	adds	r7, #12
 8004536:	46bd      	mov	sp, r7
 8004538:	bc80      	pop	{r7}
 800453a:	4770      	bx	lr

0800453c <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b084      	sub	sp, #16
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004548:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800454a:	f7fd f981 	bl	8001850 <HAL_GetTick>
 800454e:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f003 0320 	and.w	r3, r3, #32
 800455a:	2b20      	cmp	r3, #32
 800455c:	d03b      	beq.n	80045d6 <SPI_DMAReceiveCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	685a      	ldr	r2, [r3, #4]
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f022 0220 	bic.w	r2, r2, #32
 800456c:	605a      	str	r2, [r3, #4]
      READ_REG(hspi->Instance->DR);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d10d      	bne.n	8004592 <SPI_DMAReceiveCplt+0x56>
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800457e:	d108      	bne.n	8004592 <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	685a      	ldr	r2, [r3, #4]
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f022 0203 	bic.w	r2, r2, #3
 800458e:	605a      	str	r2, [r3, #4]
 8004590:	e007      	b.n	80045a2 <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	685a      	ldr	r2, [r3, #4]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f022 0201 	bic.w	r2, r2, #1
 80045a0:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80045a2:	68ba      	ldr	r2, [r7, #8]
 80045a4:	2164      	movs	r1, #100	; 0x64
 80045a6:	68f8      	ldr	r0, [r7, #12]
 80045a8:	f000 f93a 	bl	8004820 <SPI_EndRxTransaction>
 80045ac:	4603      	mov	r3, r0
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d002      	beq.n	80045b8 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2220      	movs	r2, #32
 80045b6:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2200      	movs	r2, #0
 80045bc:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2201      	movs	r2, #1
 80045c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
      }
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d003      	beq.n	80045d6 <SPI_DMAReceiveCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80045ce:	68f8      	ldr	r0, [r7, #12]
 80045d0:	f7ff ffab 	bl	800452a <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80045d4:	e002      	b.n	80045dc <SPI_DMAReceiveCplt+0xa0>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 80045d6:	68f8      	ldr	r0, [r7, #12]
 80045d8:	f7ff ff8c 	bl	80044f4 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80045dc:	3710      	adds	r7, #16
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}

080045e2 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80045e2:	b580      	push	{r7, lr}
 80045e4:	b084      	sub	sp, #16
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ee:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80045f0:	f7fd f92e 	bl	8001850 <HAL_GetTick>
 80045f4:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f003 0320 	and.w	r3, r3, #32
 8004600:	2b20      	cmp	r3, #32
 8004602:	d02f      	beq.n	8004664 <SPI_DMATransmitReceiveCplt+0x82>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	685a      	ldr	r2, [r3, #4]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f022 0220 	bic.w	r2, r2, #32
 8004612:	605a      	str	r2, [r3, #4]
      READ_REG(hspi->Instance->DR);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004614:	68ba      	ldr	r2, [r7, #8]
 8004616:	2164      	movs	r1, #100	; 0x64
 8004618:	68f8      	ldr	r0, [r7, #12]
 800461a:	f000 f953 	bl	80048c4 <SPI_EndRxTxTransaction>
 800461e:	4603      	mov	r3, r0
 8004620:	2b00      	cmp	r3, #0
 8004622:	d005      	beq.n	8004630 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004628:	f043 0220 	orr.w	r2, r3, #32
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	685a      	ldr	r2, [r3, #4]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f022 0203 	bic.w	r2, r2, #3
 800463e:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2200      	movs	r2, #0
 8004644:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2200      	movs	r2, #0
 800464a:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
      }
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004658:	2b00      	cmp	r3, #0
 800465a:	d003      	beq.n	8004664 <SPI_DMATransmitReceiveCplt+0x82>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800465c:	68f8      	ldr	r0, [r7, #12]
 800465e:	f7ff ff64 	bl	800452a <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004662:	e002      	b.n	800466a <SPI_DMATransmitReceiveCplt+0x88>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8004664:	68f8      	ldr	r0, [r7, #12]
 8004666:	f7fc fb63 	bl	8000d30 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800466a:	3710      	adds	r7, #16
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}

08004670 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b084      	sub	sp, #16
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467c:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800467e:	68f8      	ldr	r0, [r7, #12]
 8004680:	f7ff ff41 	bl	8004506 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004684:	bf00      	nop
 8004686:	3710      	adds	r7, #16
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}

0800468c <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b084      	sub	sp, #16
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004698:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800469a:	68f8      	ldr	r0, [r7, #12]
 800469c:	f7ff ff3c 	bl	8004518 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80046a0:	bf00      	nop
 80046a2:	3710      	adds	r7, #16
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}

080046a8 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b084      	sub	sp, #16
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b4:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	685a      	ldr	r2, [r3, #4]
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f022 0203 	bic.w	r2, r2, #3
 80046c4:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ca:	f043 0210 	orr.w	r2, r3, #16
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2201      	movs	r2, #1
 80046d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80046da:	68f8      	ldr	r0, [r7, #12]
 80046dc:	f7ff ff25 	bl	800452a <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80046e0:	bf00      	nop
 80046e2:	3710      	adds	r7, #16
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}

080046e8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b084      	sub	sp, #16
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2200      	movs	r2, #0
 80046fa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2200      	movs	r2, #0
 8004700:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004702:	68f8      	ldr	r0, [r7, #12]
 8004704:	f7ff ff11 	bl	800452a <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004708:	bf00      	nop
 800470a:	3710      	adds	r7, #16
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}

08004710 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b088      	sub	sp, #32
 8004714:	af00      	add	r7, sp, #0
 8004716:	60f8      	str	r0, [r7, #12]
 8004718:	60b9      	str	r1, [r7, #8]
 800471a:	603b      	str	r3, [r7, #0]
 800471c:	4613      	mov	r3, r2
 800471e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004720:	f7fd f896 	bl	8001850 <HAL_GetTick>
 8004724:	4602      	mov	r2, r0
 8004726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004728:	1a9b      	subs	r3, r3, r2
 800472a:	683a      	ldr	r2, [r7, #0]
 800472c:	4413      	add	r3, r2
 800472e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004730:	f7fd f88e 	bl	8001850 <HAL_GetTick>
 8004734:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004736:	4b39      	ldr	r3, [pc, #228]	; (800481c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	015b      	lsls	r3, r3, #5
 800473c:	0d1b      	lsrs	r3, r3, #20
 800473e:	69fa      	ldr	r2, [r7, #28]
 8004740:	fb02 f303 	mul.w	r3, r2, r3
 8004744:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004746:	e054      	b.n	80047f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800474e:	d050      	beq.n	80047f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004750:	f7fd f87e 	bl	8001850 <HAL_GetTick>
 8004754:	4602      	mov	r2, r0
 8004756:	69bb      	ldr	r3, [r7, #24]
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	69fa      	ldr	r2, [r7, #28]
 800475c:	429a      	cmp	r2, r3
 800475e:	d902      	bls.n	8004766 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004760:	69fb      	ldr	r3, [r7, #28]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d13d      	bne.n	80047e2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	685a      	ldr	r2, [r3, #4]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004774:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800477e:	d111      	bne.n	80047a4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004788:	d004      	beq.n	8004794 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004792:	d107      	bne.n	80047a4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	681a      	ldr	r2, [r3, #0]
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047a2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047ac:	d10f      	bne.n	80047ce <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80047bc:	601a      	str	r2, [r3, #0]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80047cc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2201      	movs	r2, #1
 80047d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2200      	movs	r2, #0
 80047da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80047de:	2303      	movs	r3, #3
 80047e0:	e017      	b.n	8004812 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d101      	bne.n	80047ec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80047e8:	2300      	movs	r3, #0
 80047ea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	3b01      	subs	r3, #1
 80047f0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	689a      	ldr	r2, [r3, #8]
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	4013      	ands	r3, r2
 80047fc:	68ba      	ldr	r2, [r7, #8]
 80047fe:	429a      	cmp	r2, r3
 8004800:	bf0c      	ite	eq
 8004802:	2301      	moveq	r3, #1
 8004804:	2300      	movne	r3, #0
 8004806:	b2db      	uxtb	r3, r3
 8004808:	461a      	mov	r2, r3
 800480a:	79fb      	ldrb	r3, [r7, #7]
 800480c:	429a      	cmp	r2, r3
 800480e:	d19b      	bne.n	8004748 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004810:	2300      	movs	r3, #0
}
 8004812:	4618      	mov	r0, r3
 8004814:	3720      	adds	r7, #32
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}
 800481a:	bf00      	nop
 800481c:	20000004 	.word	0x20000004

08004820 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b086      	sub	sp, #24
 8004824:	af02      	add	r7, sp, #8
 8004826:	60f8      	str	r0, [r7, #12]
 8004828:	60b9      	str	r1, [r7, #8]
 800482a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004834:	d111      	bne.n	800485a <SPI_EndRxTransaction+0x3a>
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800483e:	d004      	beq.n	800484a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004848:	d107      	bne.n	800485a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004858:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004862:	d117      	bne.n	8004894 <SPI_EndRxTransaction+0x74>
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800486c:	d112      	bne.n	8004894 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	9300      	str	r3, [sp, #0]
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	2200      	movs	r2, #0
 8004876:	2101      	movs	r1, #1
 8004878:	68f8      	ldr	r0, [r7, #12]
 800487a:	f7ff ff49 	bl	8004710 <SPI_WaitFlagStateUntilTimeout>
 800487e:	4603      	mov	r3, r0
 8004880:	2b00      	cmp	r3, #0
 8004882:	d01a      	beq.n	80048ba <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004888:	f043 0220 	orr.w	r2, r3, #32
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004890:	2303      	movs	r3, #3
 8004892:	e013      	b.n	80048bc <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	9300      	str	r3, [sp, #0]
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	2200      	movs	r2, #0
 800489c:	2180      	movs	r1, #128	; 0x80
 800489e:	68f8      	ldr	r0, [r7, #12]
 80048a0:	f7ff ff36 	bl	8004710 <SPI_WaitFlagStateUntilTimeout>
 80048a4:	4603      	mov	r3, r0
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d007      	beq.n	80048ba <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048ae:	f043 0220 	orr.w	r2, r3, #32
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80048b6:	2303      	movs	r3, #3
 80048b8:	e000      	b.n	80048bc <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80048ba:	2300      	movs	r3, #0
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3710      	adds	r7, #16
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}

080048c4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b086      	sub	sp, #24
 80048c8:	af02      	add	r7, sp, #8
 80048ca:	60f8      	str	r0, [r7, #12]
 80048cc:	60b9      	str	r1, [r7, #8]
 80048ce:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	9300      	str	r3, [sp, #0]
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	2200      	movs	r2, #0
 80048d8:	2180      	movs	r1, #128	; 0x80
 80048da:	68f8      	ldr	r0, [r7, #12]
 80048dc:	f7ff ff18 	bl	8004710 <SPI_WaitFlagStateUntilTimeout>
 80048e0:	4603      	mov	r3, r0
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d007      	beq.n	80048f6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048ea:	f043 0220 	orr.w	r2, r3, #32
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80048f2:	2303      	movs	r3, #3
 80048f4:	e000      	b.n	80048f8 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80048f6:	2300      	movs	r3, #0
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3710      	adds	r7, #16
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}

08004900 <SPI_AbortRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortRx_ISR(SPI_HandleTypeDef *hspi)
{
 8004900:	b480      	push	{r7}
 8004902:	b085      	sub	sp, #20
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8004908:	4b1c      	ldr	r3, [pc, #112]	; (800497c <SPI_AbortRx_ISR+0x7c>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a1c      	ldr	r2, [pc, #112]	; (8004980 <SPI_AbortRx_ISR+0x80>)
 800490e:	fba2 2303 	umull	r2, r3, r2, r3
 8004912:	0a5b      	lsrs	r3, r3, #9
 8004914:	2264      	movs	r2, #100	; 0x64
 8004916:	fb02 f303 	mul.w	r3, r2, r3
 800491a:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d106      	bne.n	8004930 <SPI_AbortRx_ISR+0x30>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004926:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800492e:	e009      	b.n	8004944 <SPI_AbortRx_ISR+0x44>
    }
    count--;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	3b01      	subs	r3, #1
 8004934:	60fb      	str	r3, [r7, #12]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	f003 0302 	and.w	r3, r3, #2
 8004940:	2b00      	cmp	r3, #0
 8004942:	d0eb      	beq.n	800491c <SPI_AbortRx_ISR+0x1c>

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004952:	601a      	str	r2, [r3, #0]

  /* Disable TXEIE, RXNEIE and ERRIE(mode fault event, overrun error, TI frame error) interrupts */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE | SPI_CR2_RXNEIE | SPI_CR2_ERRIE));
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	685a      	ldr	r2, [r3, #4]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004962:	605a      	str	r2, [r3, #4]

  /* Read CRC to flush Data Register */
  READ_REG(hspi->Instance->DR);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	68db      	ldr	r3, [r3, #12]

  hspi->State = HAL_SPI_STATE_ABORT;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2207      	movs	r2, #7
 800496e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
}
 8004972:	bf00      	nop
 8004974:	3714      	adds	r7, #20
 8004976:	46bd      	mov	sp, r7
 8004978:	bc80      	pop	{r7}
 800497a:	4770      	bx	lr
 800497c:	20000004 	.word	0x20000004
 8004980:	057619f1 	.word	0x057619f1

08004984 <SPI_AbortTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortTx_ISR(SPI_HandleTypeDef *hspi)
{
 8004984:	b480      	push	{r7}
 8004986:	b083      	sub	sp, #12
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE interrupt */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE));
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	685a      	ldr	r2, [r3, #4]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800499a:	605a      	str	r2, [r3, #4]

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049aa:	601a      	str	r2, [r3, #0]

  hspi->State = HAL_SPI_STATE_ABORT;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2207      	movs	r2, #7
 80049b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
}
 80049b4:	bf00      	nop
 80049b6:	370c      	adds	r7, #12
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bc80      	pop	{r7}
 80049bc:	4770      	bx	lr

080049be <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049be:	b580      	push	{r7, lr}
 80049c0:	b082      	sub	sp, #8
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d101      	bne.n	80049d0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	e03f      	b.n	8004a50 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80049d6:	b2db      	uxtb	r3, r3
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d106      	bne.n	80049ea <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	f7fc fe01 	bl	80015ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2224      	movs	r2, #36	; 0x24
 80049ee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	68da      	ldr	r2, [r3, #12]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a00:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f000 f904 	bl	8004c10 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	691a      	ldr	r2, [r3, #16]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a16:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	695a      	ldr	r2, [r3, #20]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a26:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	68da      	ldr	r2, [r3, #12]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a36:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2220      	movs	r2, #32
 8004a42:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2220      	movs	r2, #32
 8004a4a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004a4e:	2300      	movs	r3, #0
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3708      	adds	r7, #8
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}

08004a58 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b08a      	sub	sp, #40	; 0x28
 8004a5c:	af02      	add	r7, sp, #8
 8004a5e:	60f8      	str	r0, [r7, #12]
 8004a60:	60b9      	str	r1, [r7, #8]
 8004a62:	603b      	str	r3, [r7, #0]
 8004a64:	4613      	mov	r3, r2
 8004a66:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	2b20      	cmp	r3, #32
 8004a76:	d17c      	bne.n	8004b72 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d002      	beq.n	8004a84 <HAL_UART_Transmit+0x2c>
 8004a7e:	88fb      	ldrh	r3, [r7, #6]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d101      	bne.n	8004a88 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	e075      	b.n	8004b74 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d101      	bne.n	8004a96 <HAL_UART_Transmit+0x3e>
 8004a92:	2302      	movs	r3, #2
 8004a94:	e06e      	b.n	8004b74 <HAL_UART_Transmit+0x11c>
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2201      	movs	r2, #1
 8004a9a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2221      	movs	r2, #33	; 0x21
 8004aa8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004aac:	f7fc fed0 	bl	8001850 <HAL_GetTick>
 8004ab0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	88fa      	ldrh	r2, [r7, #6]
 8004ab6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	88fa      	ldrh	r2, [r7, #6]
 8004abc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ac6:	d108      	bne.n	8004ada <HAL_UART_Transmit+0x82>
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	691b      	ldr	r3, [r3, #16]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d104      	bne.n	8004ada <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	61bb      	str	r3, [r7, #24]
 8004ad8:	e003      	b.n	8004ae2 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8004aea:	e02a      	b.n	8004b42 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	9300      	str	r3, [sp, #0]
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	2200      	movs	r2, #0
 8004af4:	2180      	movs	r1, #128	; 0x80
 8004af6:	68f8      	ldr	r0, [r7, #12]
 8004af8:	f000 f840 	bl	8004b7c <UART_WaitOnFlagUntilTimeout>
 8004afc:	4603      	mov	r3, r0
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d001      	beq.n	8004b06 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004b02:	2303      	movs	r3, #3
 8004b04:	e036      	b.n	8004b74 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004b06:	69fb      	ldr	r3, [r7, #28]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d10b      	bne.n	8004b24 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b0c:	69bb      	ldr	r3, [r7, #24]
 8004b0e:	881b      	ldrh	r3, [r3, #0]
 8004b10:	461a      	mov	r2, r3
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b1a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004b1c:	69bb      	ldr	r3, [r7, #24]
 8004b1e:	3302      	adds	r3, #2
 8004b20:	61bb      	str	r3, [r7, #24]
 8004b22:	e007      	b.n	8004b34 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b24:	69fb      	ldr	r3, [r7, #28]
 8004b26:	781a      	ldrb	r2, [r3, #0]
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004b2e:	69fb      	ldr	r3, [r7, #28]
 8004b30:	3301      	adds	r3, #1
 8004b32:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	3b01      	subs	r3, #1
 8004b3c:	b29a      	uxth	r2, r3
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b46:	b29b      	uxth	r3, r3
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d1cf      	bne.n	8004aec <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	9300      	str	r3, [sp, #0]
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	2200      	movs	r2, #0
 8004b54:	2140      	movs	r1, #64	; 0x40
 8004b56:	68f8      	ldr	r0, [r7, #12]
 8004b58:	f000 f810 	bl	8004b7c <UART_WaitOnFlagUntilTimeout>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d001      	beq.n	8004b66 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004b62:	2303      	movs	r3, #3
 8004b64:	e006      	b.n	8004b74 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2220      	movs	r2, #32
 8004b6a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	e000      	b.n	8004b74 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004b72:	2302      	movs	r3, #2
  }
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	3720      	adds	r7, #32
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}

08004b7c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b084      	sub	sp, #16
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	60f8      	str	r0, [r7, #12]
 8004b84:	60b9      	str	r1, [r7, #8]
 8004b86:	603b      	str	r3, [r7, #0]
 8004b88:	4613      	mov	r3, r2
 8004b8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b8c:	e02c      	b.n	8004be8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b8e:	69bb      	ldr	r3, [r7, #24]
 8004b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b94:	d028      	beq.n	8004be8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004b96:	69bb      	ldr	r3, [r7, #24]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d007      	beq.n	8004bac <UART_WaitOnFlagUntilTimeout+0x30>
 8004b9c:	f7fc fe58 	bl	8001850 <HAL_GetTick>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	69ba      	ldr	r2, [r7, #24]
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d21d      	bcs.n	8004be8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	68da      	ldr	r2, [r3, #12]
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004bba:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	695a      	ldr	r2, [r3, #20]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f022 0201 	bic.w	r2, r2, #1
 8004bca:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2220      	movs	r2, #32
 8004bd0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2220      	movs	r2, #32
 8004bd8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2200      	movs	r2, #0
 8004be0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004be4:	2303      	movs	r3, #3
 8004be6:	e00f      	b.n	8004c08 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	4013      	ands	r3, r2
 8004bf2:	68ba      	ldr	r2, [r7, #8]
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	bf0c      	ite	eq
 8004bf8:	2301      	moveq	r3, #1
 8004bfa:	2300      	movne	r3, #0
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	461a      	mov	r2, r3
 8004c00:	79fb      	ldrb	r3, [r7, #7]
 8004c02:	429a      	cmp	r2, r3
 8004c04:	d0c3      	beq.n	8004b8e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004c06:	2300      	movs	r3, #0
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	3710      	adds	r7, #16
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}

08004c10 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b084      	sub	sp, #16
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	691b      	ldr	r3, [r3, #16]
 8004c1e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	68da      	ldr	r2, [r3, #12]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	430a      	orrs	r2, r1
 8004c2c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	689a      	ldr	r2, [r3, #8]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	691b      	ldr	r3, [r3, #16]
 8004c36:	431a      	orrs	r2, r3
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	695b      	ldr	r3, [r3, #20]
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	68db      	ldr	r3, [r3, #12]
 8004c46:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004c4a:	f023 030c 	bic.w	r3, r3, #12
 8004c4e:	687a      	ldr	r2, [r7, #4]
 8004c50:	6812      	ldr	r2, [r2, #0]
 8004c52:	68b9      	ldr	r1, [r7, #8]
 8004c54:	430b      	orrs	r3, r1
 8004c56:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	695b      	ldr	r3, [r3, #20]
 8004c5e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	699a      	ldr	r2, [r3, #24]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	430a      	orrs	r2, r1
 8004c6c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a2c      	ldr	r2, [pc, #176]	; (8004d24 <UART_SetConfig+0x114>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d103      	bne.n	8004c80 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004c78:	f7fe fdc6 	bl	8003808 <HAL_RCC_GetPCLK2Freq>
 8004c7c:	60f8      	str	r0, [r7, #12]
 8004c7e:	e002      	b.n	8004c86 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004c80:	f7fe fdae 	bl	80037e0 <HAL_RCC_GetPCLK1Freq>
 8004c84:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c86:	68fa      	ldr	r2, [r7, #12]
 8004c88:	4613      	mov	r3, r2
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	4413      	add	r3, r2
 8004c8e:	009a      	lsls	r2, r3, #2
 8004c90:	441a      	add	r2, r3
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c9c:	4a22      	ldr	r2, [pc, #136]	; (8004d28 <UART_SetConfig+0x118>)
 8004c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8004ca2:	095b      	lsrs	r3, r3, #5
 8004ca4:	0119      	lsls	r1, r3, #4
 8004ca6:	68fa      	ldr	r2, [r7, #12]
 8004ca8:	4613      	mov	r3, r2
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	4413      	add	r3, r2
 8004cae:	009a      	lsls	r2, r3, #2
 8004cb0:	441a      	add	r2, r3
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	009b      	lsls	r3, r3, #2
 8004cb8:	fbb2 f2f3 	udiv	r2, r2, r3
 8004cbc:	4b1a      	ldr	r3, [pc, #104]	; (8004d28 <UART_SetConfig+0x118>)
 8004cbe:	fba3 0302 	umull	r0, r3, r3, r2
 8004cc2:	095b      	lsrs	r3, r3, #5
 8004cc4:	2064      	movs	r0, #100	; 0x64
 8004cc6:	fb00 f303 	mul.w	r3, r0, r3
 8004cca:	1ad3      	subs	r3, r2, r3
 8004ccc:	011b      	lsls	r3, r3, #4
 8004cce:	3332      	adds	r3, #50	; 0x32
 8004cd0:	4a15      	ldr	r2, [pc, #84]	; (8004d28 <UART_SetConfig+0x118>)
 8004cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8004cd6:	095b      	lsrs	r3, r3, #5
 8004cd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004cdc:	4419      	add	r1, r3
 8004cde:	68fa      	ldr	r2, [r7, #12]
 8004ce0:	4613      	mov	r3, r2
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	4413      	add	r3, r2
 8004ce6:	009a      	lsls	r2, r3, #2
 8004ce8:	441a      	add	r2, r3
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	009b      	lsls	r3, r3, #2
 8004cf0:	fbb2 f2f3 	udiv	r2, r2, r3
 8004cf4:	4b0c      	ldr	r3, [pc, #48]	; (8004d28 <UART_SetConfig+0x118>)
 8004cf6:	fba3 0302 	umull	r0, r3, r3, r2
 8004cfa:	095b      	lsrs	r3, r3, #5
 8004cfc:	2064      	movs	r0, #100	; 0x64
 8004cfe:	fb00 f303 	mul.w	r3, r0, r3
 8004d02:	1ad3      	subs	r3, r2, r3
 8004d04:	011b      	lsls	r3, r3, #4
 8004d06:	3332      	adds	r3, #50	; 0x32
 8004d08:	4a07      	ldr	r2, [pc, #28]	; (8004d28 <UART_SetConfig+0x118>)
 8004d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d0e:	095b      	lsrs	r3, r3, #5
 8004d10:	f003 020f 	and.w	r2, r3, #15
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	440a      	add	r2, r1
 8004d1a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004d1c:	bf00      	nop
 8004d1e:	3710      	adds	r7, #16
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}
 8004d24:	40013800 	.word	0x40013800
 8004d28:	51eb851f 	.word	0x51eb851f

08004d2c <__errno>:
 8004d2c:	4b01      	ldr	r3, [pc, #4]	; (8004d34 <__errno+0x8>)
 8004d2e:	6818      	ldr	r0, [r3, #0]
 8004d30:	4770      	bx	lr
 8004d32:	bf00      	nop
 8004d34:	20000010 	.word	0x20000010

08004d38 <__libc_init_array>:
 8004d38:	b570      	push	{r4, r5, r6, lr}
 8004d3a:	2600      	movs	r6, #0
 8004d3c:	4d0c      	ldr	r5, [pc, #48]	; (8004d70 <__libc_init_array+0x38>)
 8004d3e:	4c0d      	ldr	r4, [pc, #52]	; (8004d74 <__libc_init_array+0x3c>)
 8004d40:	1b64      	subs	r4, r4, r5
 8004d42:	10a4      	asrs	r4, r4, #2
 8004d44:	42a6      	cmp	r6, r4
 8004d46:	d109      	bne.n	8004d5c <__libc_init_array+0x24>
 8004d48:	f000 fc5c 	bl	8005604 <_init>
 8004d4c:	2600      	movs	r6, #0
 8004d4e:	4d0a      	ldr	r5, [pc, #40]	; (8004d78 <__libc_init_array+0x40>)
 8004d50:	4c0a      	ldr	r4, [pc, #40]	; (8004d7c <__libc_init_array+0x44>)
 8004d52:	1b64      	subs	r4, r4, r5
 8004d54:	10a4      	asrs	r4, r4, #2
 8004d56:	42a6      	cmp	r6, r4
 8004d58:	d105      	bne.n	8004d66 <__libc_init_array+0x2e>
 8004d5a:	bd70      	pop	{r4, r5, r6, pc}
 8004d5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d60:	4798      	blx	r3
 8004d62:	3601      	adds	r6, #1
 8004d64:	e7ee      	b.n	8004d44 <__libc_init_array+0xc>
 8004d66:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d6a:	4798      	blx	r3
 8004d6c:	3601      	adds	r6, #1
 8004d6e:	e7f2      	b.n	8004d56 <__libc_init_array+0x1e>
 8004d70:	08005760 	.word	0x08005760
 8004d74:	08005760 	.word	0x08005760
 8004d78:	08005760 	.word	0x08005760
 8004d7c:	08005764 	.word	0x08005764

08004d80 <memcpy>:
 8004d80:	440a      	add	r2, r1
 8004d82:	4291      	cmp	r1, r2
 8004d84:	f100 33ff 	add.w	r3, r0, #4294967295
 8004d88:	d100      	bne.n	8004d8c <memcpy+0xc>
 8004d8a:	4770      	bx	lr
 8004d8c:	b510      	push	{r4, lr}
 8004d8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d92:	4291      	cmp	r1, r2
 8004d94:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d98:	d1f9      	bne.n	8004d8e <memcpy+0xe>
 8004d9a:	bd10      	pop	{r4, pc}

08004d9c <memmove>:
 8004d9c:	4288      	cmp	r0, r1
 8004d9e:	b510      	push	{r4, lr}
 8004da0:	eb01 0402 	add.w	r4, r1, r2
 8004da4:	d902      	bls.n	8004dac <memmove+0x10>
 8004da6:	4284      	cmp	r4, r0
 8004da8:	4623      	mov	r3, r4
 8004daa:	d807      	bhi.n	8004dbc <memmove+0x20>
 8004dac:	1e43      	subs	r3, r0, #1
 8004dae:	42a1      	cmp	r1, r4
 8004db0:	d008      	beq.n	8004dc4 <memmove+0x28>
 8004db2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004db6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004dba:	e7f8      	b.n	8004dae <memmove+0x12>
 8004dbc:	4601      	mov	r1, r0
 8004dbe:	4402      	add	r2, r0
 8004dc0:	428a      	cmp	r2, r1
 8004dc2:	d100      	bne.n	8004dc6 <memmove+0x2a>
 8004dc4:	bd10      	pop	{r4, pc}
 8004dc6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004dca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004dce:	e7f7      	b.n	8004dc0 <memmove+0x24>

08004dd0 <memset>:
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	4402      	add	r2, r0
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d100      	bne.n	8004dda <memset+0xa>
 8004dd8:	4770      	bx	lr
 8004dda:	f803 1b01 	strb.w	r1, [r3], #1
 8004dde:	e7f9      	b.n	8004dd4 <memset+0x4>

08004de0 <_free_r>:
 8004de0:	b538      	push	{r3, r4, r5, lr}
 8004de2:	4605      	mov	r5, r0
 8004de4:	2900      	cmp	r1, #0
 8004de6:	d043      	beq.n	8004e70 <_free_r+0x90>
 8004de8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004dec:	1f0c      	subs	r4, r1, #4
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	bfb8      	it	lt
 8004df2:	18e4      	addlt	r4, r4, r3
 8004df4:	f000 f8ca 	bl	8004f8c <__malloc_lock>
 8004df8:	4a1e      	ldr	r2, [pc, #120]	; (8004e74 <_free_r+0x94>)
 8004dfa:	6813      	ldr	r3, [r2, #0]
 8004dfc:	4610      	mov	r0, r2
 8004dfe:	b933      	cbnz	r3, 8004e0e <_free_r+0x2e>
 8004e00:	6063      	str	r3, [r4, #4]
 8004e02:	6014      	str	r4, [r2, #0]
 8004e04:	4628      	mov	r0, r5
 8004e06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e0a:	f000 b8c5 	b.w	8004f98 <__malloc_unlock>
 8004e0e:	42a3      	cmp	r3, r4
 8004e10:	d90a      	bls.n	8004e28 <_free_r+0x48>
 8004e12:	6821      	ldr	r1, [r4, #0]
 8004e14:	1862      	adds	r2, r4, r1
 8004e16:	4293      	cmp	r3, r2
 8004e18:	bf01      	itttt	eq
 8004e1a:	681a      	ldreq	r2, [r3, #0]
 8004e1c:	685b      	ldreq	r3, [r3, #4]
 8004e1e:	1852      	addeq	r2, r2, r1
 8004e20:	6022      	streq	r2, [r4, #0]
 8004e22:	6063      	str	r3, [r4, #4]
 8004e24:	6004      	str	r4, [r0, #0]
 8004e26:	e7ed      	b.n	8004e04 <_free_r+0x24>
 8004e28:	461a      	mov	r2, r3
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	b10b      	cbz	r3, 8004e32 <_free_r+0x52>
 8004e2e:	42a3      	cmp	r3, r4
 8004e30:	d9fa      	bls.n	8004e28 <_free_r+0x48>
 8004e32:	6811      	ldr	r1, [r2, #0]
 8004e34:	1850      	adds	r0, r2, r1
 8004e36:	42a0      	cmp	r0, r4
 8004e38:	d10b      	bne.n	8004e52 <_free_r+0x72>
 8004e3a:	6820      	ldr	r0, [r4, #0]
 8004e3c:	4401      	add	r1, r0
 8004e3e:	1850      	adds	r0, r2, r1
 8004e40:	4283      	cmp	r3, r0
 8004e42:	6011      	str	r1, [r2, #0]
 8004e44:	d1de      	bne.n	8004e04 <_free_r+0x24>
 8004e46:	6818      	ldr	r0, [r3, #0]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	4401      	add	r1, r0
 8004e4c:	6011      	str	r1, [r2, #0]
 8004e4e:	6053      	str	r3, [r2, #4]
 8004e50:	e7d8      	b.n	8004e04 <_free_r+0x24>
 8004e52:	d902      	bls.n	8004e5a <_free_r+0x7a>
 8004e54:	230c      	movs	r3, #12
 8004e56:	602b      	str	r3, [r5, #0]
 8004e58:	e7d4      	b.n	8004e04 <_free_r+0x24>
 8004e5a:	6820      	ldr	r0, [r4, #0]
 8004e5c:	1821      	adds	r1, r4, r0
 8004e5e:	428b      	cmp	r3, r1
 8004e60:	bf01      	itttt	eq
 8004e62:	6819      	ldreq	r1, [r3, #0]
 8004e64:	685b      	ldreq	r3, [r3, #4]
 8004e66:	1809      	addeq	r1, r1, r0
 8004e68:	6021      	streq	r1, [r4, #0]
 8004e6a:	6063      	str	r3, [r4, #4]
 8004e6c:	6054      	str	r4, [r2, #4]
 8004e6e:	e7c9      	b.n	8004e04 <_free_r+0x24>
 8004e70:	bd38      	pop	{r3, r4, r5, pc}
 8004e72:	bf00      	nop
 8004e74:	200004a4 	.word	0x200004a4

08004e78 <_malloc_r>:
 8004e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e7a:	1ccd      	adds	r5, r1, #3
 8004e7c:	f025 0503 	bic.w	r5, r5, #3
 8004e80:	3508      	adds	r5, #8
 8004e82:	2d0c      	cmp	r5, #12
 8004e84:	bf38      	it	cc
 8004e86:	250c      	movcc	r5, #12
 8004e88:	2d00      	cmp	r5, #0
 8004e8a:	4606      	mov	r6, r0
 8004e8c:	db01      	blt.n	8004e92 <_malloc_r+0x1a>
 8004e8e:	42a9      	cmp	r1, r5
 8004e90:	d903      	bls.n	8004e9a <_malloc_r+0x22>
 8004e92:	230c      	movs	r3, #12
 8004e94:	6033      	str	r3, [r6, #0]
 8004e96:	2000      	movs	r0, #0
 8004e98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e9a:	f000 f877 	bl	8004f8c <__malloc_lock>
 8004e9e:	4921      	ldr	r1, [pc, #132]	; (8004f24 <_malloc_r+0xac>)
 8004ea0:	680a      	ldr	r2, [r1, #0]
 8004ea2:	4614      	mov	r4, r2
 8004ea4:	b99c      	cbnz	r4, 8004ece <_malloc_r+0x56>
 8004ea6:	4f20      	ldr	r7, [pc, #128]	; (8004f28 <_malloc_r+0xb0>)
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	b923      	cbnz	r3, 8004eb6 <_malloc_r+0x3e>
 8004eac:	4621      	mov	r1, r4
 8004eae:	4630      	mov	r0, r6
 8004eb0:	f000 f83c 	bl	8004f2c <_sbrk_r>
 8004eb4:	6038      	str	r0, [r7, #0]
 8004eb6:	4629      	mov	r1, r5
 8004eb8:	4630      	mov	r0, r6
 8004eba:	f000 f837 	bl	8004f2c <_sbrk_r>
 8004ebe:	1c43      	adds	r3, r0, #1
 8004ec0:	d123      	bne.n	8004f0a <_malloc_r+0x92>
 8004ec2:	230c      	movs	r3, #12
 8004ec4:	4630      	mov	r0, r6
 8004ec6:	6033      	str	r3, [r6, #0]
 8004ec8:	f000 f866 	bl	8004f98 <__malloc_unlock>
 8004ecc:	e7e3      	b.n	8004e96 <_malloc_r+0x1e>
 8004ece:	6823      	ldr	r3, [r4, #0]
 8004ed0:	1b5b      	subs	r3, r3, r5
 8004ed2:	d417      	bmi.n	8004f04 <_malloc_r+0x8c>
 8004ed4:	2b0b      	cmp	r3, #11
 8004ed6:	d903      	bls.n	8004ee0 <_malloc_r+0x68>
 8004ed8:	6023      	str	r3, [r4, #0]
 8004eda:	441c      	add	r4, r3
 8004edc:	6025      	str	r5, [r4, #0]
 8004ede:	e004      	b.n	8004eea <_malloc_r+0x72>
 8004ee0:	6863      	ldr	r3, [r4, #4]
 8004ee2:	42a2      	cmp	r2, r4
 8004ee4:	bf0c      	ite	eq
 8004ee6:	600b      	streq	r3, [r1, #0]
 8004ee8:	6053      	strne	r3, [r2, #4]
 8004eea:	4630      	mov	r0, r6
 8004eec:	f000 f854 	bl	8004f98 <__malloc_unlock>
 8004ef0:	f104 000b 	add.w	r0, r4, #11
 8004ef4:	1d23      	adds	r3, r4, #4
 8004ef6:	f020 0007 	bic.w	r0, r0, #7
 8004efa:	1ac2      	subs	r2, r0, r3
 8004efc:	d0cc      	beq.n	8004e98 <_malloc_r+0x20>
 8004efe:	1a1b      	subs	r3, r3, r0
 8004f00:	50a3      	str	r3, [r4, r2]
 8004f02:	e7c9      	b.n	8004e98 <_malloc_r+0x20>
 8004f04:	4622      	mov	r2, r4
 8004f06:	6864      	ldr	r4, [r4, #4]
 8004f08:	e7cc      	b.n	8004ea4 <_malloc_r+0x2c>
 8004f0a:	1cc4      	adds	r4, r0, #3
 8004f0c:	f024 0403 	bic.w	r4, r4, #3
 8004f10:	42a0      	cmp	r0, r4
 8004f12:	d0e3      	beq.n	8004edc <_malloc_r+0x64>
 8004f14:	1a21      	subs	r1, r4, r0
 8004f16:	4630      	mov	r0, r6
 8004f18:	f000 f808 	bl	8004f2c <_sbrk_r>
 8004f1c:	3001      	adds	r0, #1
 8004f1e:	d1dd      	bne.n	8004edc <_malloc_r+0x64>
 8004f20:	e7cf      	b.n	8004ec2 <_malloc_r+0x4a>
 8004f22:	bf00      	nop
 8004f24:	200004a4 	.word	0x200004a4
 8004f28:	200004a8 	.word	0x200004a8

08004f2c <_sbrk_r>:
 8004f2c:	b538      	push	{r3, r4, r5, lr}
 8004f2e:	2300      	movs	r3, #0
 8004f30:	4d05      	ldr	r5, [pc, #20]	; (8004f48 <_sbrk_r+0x1c>)
 8004f32:	4604      	mov	r4, r0
 8004f34:	4608      	mov	r0, r1
 8004f36:	602b      	str	r3, [r5, #0]
 8004f38:	f7fc fafc 	bl	8001534 <_sbrk>
 8004f3c:	1c43      	adds	r3, r0, #1
 8004f3e:	d102      	bne.n	8004f46 <_sbrk_r+0x1a>
 8004f40:	682b      	ldr	r3, [r5, #0]
 8004f42:	b103      	cbz	r3, 8004f46 <_sbrk_r+0x1a>
 8004f44:	6023      	str	r3, [r4, #0]
 8004f46:	bd38      	pop	{r3, r4, r5, pc}
 8004f48:	20002c48 	.word	0x20002c48

08004f4c <_vsiprintf_r>:
 8004f4c:	b500      	push	{lr}
 8004f4e:	b09b      	sub	sp, #108	; 0x6c
 8004f50:	9100      	str	r1, [sp, #0]
 8004f52:	9104      	str	r1, [sp, #16]
 8004f54:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004f58:	9105      	str	r1, [sp, #20]
 8004f5a:	9102      	str	r1, [sp, #8]
 8004f5c:	4905      	ldr	r1, [pc, #20]	; (8004f74 <_vsiprintf_r+0x28>)
 8004f5e:	9103      	str	r1, [sp, #12]
 8004f60:	4669      	mov	r1, sp
 8004f62:	f000 f87b 	bl	800505c <_svfiprintf_r>
 8004f66:	2200      	movs	r2, #0
 8004f68:	9b00      	ldr	r3, [sp, #0]
 8004f6a:	701a      	strb	r2, [r3, #0]
 8004f6c:	b01b      	add	sp, #108	; 0x6c
 8004f6e:	f85d fb04 	ldr.w	pc, [sp], #4
 8004f72:	bf00      	nop
 8004f74:	ffff0208 	.word	0xffff0208

08004f78 <vsiprintf>:
 8004f78:	4613      	mov	r3, r2
 8004f7a:	460a      	mov	r2, r1
 8004f7c:	4601      	mov	r1, r0
 8004f7e:	4802      	ldr	r0, [pc, #8]	; (8004f88 <vsiprintf+0x10>)
 8004f80:	6800      	ldr	r0, [r0, #0]
 8004f82:	f7ff bfe3 	b.w	8004f4c <_vsiprintf_r>
 8004f86:	bf00      	nop
 8004f88:	20000010 	.word	0x20000010

08004f8c <__malloc_lock>:
 8004f8c:	4801      	ldr	r0, [pc, #4]	; (8004f94 <__malloc_lock+0x8>)
 8004f8e:	f000 bafb 	b.w	8005588 <__retarget_lock_acquire_recursive>
 8004f92:	bf00      	nop
 8004f94:	20002c50 	.word	0x20002c50

08004f98 <__malloc_unlock>:
 8004f98:	4801      	ldr	r0, [pc, #4]	; (8004fa0 <__malloc_unlock+0x8>)
 8004f9a:	f000 baf6 	b.w	800558a <__retarget_lock_release_recursive>
 8004f9e:	bf00      	nop
 8004fa0:	20002c50 	.word	0x20002c50

08004fa4 <__ssputs_r>:
 8004fa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fa8:	688e      	ldr	r6, [r1, #8]
 8004faa:	4682      	mov	sl, r0
 8004fac:	429e      	cmp	r6, r3
 8004fae:	460c      	mov	r4, r1
 8004fb0:	4690      	mov	r8, r2
 8004fb2:	461f      	mov	r7, r3
 8004fb4:	d838      	bhi.n	8005028 <__ssputs_r+0x84>
 8004fb6:	898a      	ldrh	r2, [r1, #12]
 8004fb8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004fbc:	d032      	beq.n	8005024 <__ssputs_r+0x80>
 8004fbe:	6825      	ldr	r5, [r4, #0]
 8004fc0:	6909      	ldr	r1, [r1, #16]
 8004fc2:	3301      	adds	r3, #1
 8004fc4:	eba5 0901 	sub.w	r9, r5, r1
 8004fc8:	6965      	ldr	r5, [r4, #20]
 8004fca:	444b      	add	r3, r9
 8004fcc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004fd0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004fd4:	106d      	asrs	r5, r5, #1
 8004fd6:	429d      	cmp	r5, r3
 8004fd8:	bf38      	it	cc
 8004fda:	461d      	movcc	r5, r3
 8004fdc:	0553      	lsls	r3, r2, #21
 8004fde:	d531      	bpl.n	8005044 <__ssputs_r+0xa0>
 8004fe0:	4629      	mov	r1, r5
 8004fe2:	f7ff ff49 	bl	8004e78 <_malloc_r>
 8004fe6:	4606      	mov	r6, r0
 8004fe8:	b950      	cbnz	r0, 8005000 <__ssputs_r+0x5c>
 8004fea:	230c      	movs	r3, #12
 8004fec:	f04f 30ff 	mov.w	r0, #4294967295
 8004ff0:	f8ca 3000 	str.w	r3, [sl]
 8004ff4:	89a3      	ldrh	r3, [r4, #12]
 8004ff6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ffa:	81a3      	strh	r3, [r4, #12]
 8004ffc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005000:	464a      	mov	r2, r9
 8005002:	6921      	ldr	r1, [r4, #16]
 8005004:	f7ff febc 	bl	8004d80 <memcpy>
 8005008:	89a3      	ldrh	r3, [r4, #12]
 800500a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800500e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005012:	81a3      	strh	r3, [r4, #12]
 8005014:	6126      	str	r6, [r4, #16]
 8005016:	444e      	add	r6, r9
 8005018:	6026      	str	r6, [r4, #0]
 800501a:	463e      	mov	r6, r7
 800501c:	6165      	str	r5, [r4, #20]
 800501e:	eba5 0509 	sub.w	r5, r5, r9
 8005022:	60a5      	str	r5, [r4, #8]
 8005024:	42be      	cmp	r6, r7
 8005026:	d900      	bls.n	800502a <__ssputs_r+0x86>
 8005028:	463e      	mov	r6, r7
 800502a:	4632      	mov	r2, r6
 800502c:	4641      	mov	r1, r8
 800502e:	6820      	ldr	r0, [r4, #0]
 8005030:	f7ff feb4 	bl	8004d9c <memmove>
 8005034:	68a3      	ldr	r3, [r4, #8]
 8005036:	6822      	ldr	r2, [r4, #0]
 8005038:	1b9b      	subs	r3, r3, r6
 800503a:	4432      	add	r2, r6
 800503c:	2000      	movs	r0, #0
 800503e:	60a3      	str	r3, [r4, #8]
 8005040:	6022      	str	r2, [r4, #0]
 8005042:	e7db      	b.n	8004ffc <__ssputs_r+0x58>
 8005044:	462a      	mov	r2, r5
 8005046:	f000 faaf 	bl	80055a8 <_realloc_r>
 800504a:	4606      	mov	r6, r0
 800504c:	2800      	cmp	r0, #0
 800504e:	d1e1      	bne.n	8005014 <__ssputs_r+0x70>
 8005050:	4650      	mov	r0, sl
 8005052:	6921      	ldr	r1, [r4, #16]
 8005054:	f7ff fec4 	bl	8004de0 <_free_r>
 8005058:	e7c7      	b.n	8004fea <__ssputs_r+0x46>
	...

0800505c <_svfiprintf_r>:
 800505c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005060:	4698      	mov	r8, r3
 8005062:	898b      	ldrh	r3, [r1, #12]
 8005064:	4607      	mov	r7, r0
 8005066:	061b      	lsls	r3, r3, #24
 8005068:	460d      	mov	r5, r1
 800506a:	4614      	mov	r4, r2
 800506c:	b09d      	sub	sp, #116	; 0x74
 800506e:	d50e      	bpl.n	800508e <_svfiprintf_r+0x32>
 8005070:	690b      	ldr	r3, [r1, #16]
 8005072:	b963      	cbnz	r3, 800508e <_svfiprintf_r+0x32>
 8005074:	2140      	movs	r1, #64	; 0x40
 8005076:	f7ff feff 	bl	8004e78 <_malloc_r>
 800507a:	6028      	str	r0, [r5, #0]
 800507c:	6128      	str	r0, [r5, #16]
 800507e:	b920      	cbnz	r0, 800508a <_svfiprintf_r+0x2e>
 8005080:	230c      	movs	r3, #12
 8005082:	603b      	str	r3, [r7, #0]
 8005084:	f04f 30ff 	mov.w	r0, #4294967295
 8005088:	e0d1      	b.n	800522e <_svfiprintf_r+0x1d2>
 800508a:	2340      	movs	r3, #64	; 0x40
 800508c:	616b      	str	r3, [r5, #20]
 800508e:	2300      	movs	r3, #0
 8005090:	9309      	str	r3, [sp, #36]	; 0x24
 8005092:	2320      	movs	r3, #32
 8005094:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005098:	2330      	movs	r3, #48	; 0x30
 800509a:	f04f 0901 	mov.w	r9, #1
 800509e:	f8cd 800c 	str.w	r8, [sp, #12]
 80050a2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005248 <_svfiprintf_r+0x1ec>
 80050a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80050aa:	4623      	mov	r3, r4
 80050ac:	469a      	mov	sl, r3
 80050ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80050b2:	b10a      	cbz	r2, 80050b8 <_svfiprintf_r+0x5c>
 80050b4:	2a25      	cmp	r2, #37	; 0x25
 80050b6:	d1f9      	bne.n	80050ac <_svfiprintf_r+0x50>
 80050b8:	ebba 0b04 	subs.w	fp, sl, r4
 80050bc:	d00b      	beq.n	80050d6 <_svfiprintf_r+0x7a>
 80050be:	465b      	mov	r3, fp
 80050c0:	4622      	mov	r2, r4
 80050c2:	4629      	mov	r1, r5
 80050c4:	4638      	mov	r0, r7
 80050c6:	f7ff ff6d 	bl	8004fa4 <__ssputs_r>
 80050ca:	3001      	adds	r0, #1
 80050cc:	f000 80aa 	beq.w	8005224 <_svfiprintf_r+0x1c8>
 80050d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80050d2:	445a      	add	r2, fp
 80050d4:	9209      	str	r2, [sp, #36]	; 0x24
 80050d6:	f89a 3000 	ldrb.w	r3, [sl]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	f000 80a2 	beq.w	8005224 <_svfiprintf_r+0x1c8>
 80050e0:	2300      	movs	r3, #0
 80050e2:	f04f 32ff 	mov.w	r2, #4294967295
 80050e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80050ea:	f10a 0a01 	add.w	sl, sl, #1
 80050ee:	9304      	str	r3, [sp, #16]
 80050f0:	9307      	str	r3, [sp, #28]
 80050f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80050f6:	931a      	str	r3, [sp, #104]	; 0x68
 80050f8:	4654      	mov	r4, sl
 80050fa:	2205      	movs	r2, #5
 80050fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005100:	4851      	ldr	r0, [pc, #324]	; (8005248 <_svfiprintf_r+0x1ec>)
 8005102:	f000 fa43 	bl	800558c <memchr>
 8005106:	9a04      	ldr	r2, [sp, #16]
 8005108:	b9d8      	cbnz	r0, 8005142 <_svfiprintf_r+0xe6>
 800510a:	06d0      	lsls	r0, r2, #27
 800510c:	bf44      	itt	mi
 800510e:	2320      	movmi	r3, #32
 8005110:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005114:	0711      	lsls	r1, r2, #28
 8005116:	bf44      	itt	mi
 8005118:	232b      	movmi	r3, #43	; 0x2b
 800511a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800511e:	f89a 3000 	ldrb.w	r3, [sl]
 8005122:	2b2a      	cmp	r3, #42	; 0x2a
 8005124:	d015      	beq.n	8005152 <_svfiprintf_r+0xf6>
 8005126:	4654      	mov	r4, sl
 8005128:	2000      	movs	r0, #0
 800512a:	f04f 0c0a 	mov.w	ip, #10
 800512e:	9a07      	ldr	r2, [sp, #28]
 8005130:	4621      	mov	r1, r4
 8005132:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005136:	3b30      	subs	r3, #48	; 0x30
 8005138:	2b09      	cmp	r3, #9
 800513a:	d94e      	bls.n	80051da <_svfiprintf_r+0x17e>
 800513c:	b1b0      	cbz	r0, 800516c <_svfiprintf_r+0x110>
 800513e:	9207      	str	r2, [sp, #28]
 8005140:	e014      	b.n	800516c <_svfiprintf_r+0x110>
 8005142:	eba0 0308 	sub.w	r3, r0, r8
 8005146:	fa09 f303 	lsl.w	r3, r9, r3
 800514a:	4313      	orrs	r3, r2
 800514c:	46a2      	mov	sl, r4
 800514e:	9304      	str	r3, [sp, #16]
 8005150:	e7d2      	b.n	80050f8 <_svfiprintf_r+0x9c>
 8005152:	9b03      	ldr	r3, [sp, #12]
 8005154:	1d19      	adds	r1, r3, #4
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	9103      	str	r1, [sp, #12]
 800515a:	2b00      	cmp	r3, #0
 800515c:	bfbb      	ittet	lt
 800515e:	425b      	neglt	r3, r3
 8005160:	f042 0202 	orrlt.w	r2, r2, #2
 8005164:	9307      	strge	r3, [sp, #28]
 8005166:	9307      	strlt	r3, [sp, #28]
 8005168:	bfb8      	it	lt
 800516a:	9204      	strlt	r2, [sp, #16]
 800516c:	7823      	ldrb	r3, [r4, #0]
 800516e:	2b2e      	cmp	r3, #46	; 0x2e
 8005170:	d10c      	bne.n	800518c <_svfiprintf_r+0x130>
 8005172:	7863      	ldrb	r3, [r4, #1]
 8005174:	2b2a      	cmp	r3, #42	; 0x2a
 8005176:	d135      	bne.n	80051e4 <_svfiprintf_r+0x188>
 8005178:	9b03      	ldr	r3, [sp, #12]
 800517a:	3402      	adds	r4, #2
 800517c:	1d1a      	adds	r2, r3, #4
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	9203      	str	r2, [sp, #12]
 8005182:	2b00      	cmp	r3, #0
 8005184:	bfb8      	it	lt
 8005186:	f04f 33ff 	movlt.w	r3, #4294967295
 800518a:	9305      	str	r3, [sp, #20]
 800518c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005258 <_svfiprintf_r+0x1fc>
 8005190:	2203      	movs	r2, #3
 8005192:	4650      	mov	r0, sl
 8005194:	7821      	ldrb	r1, [r4, #0]
 8005196:	f000 f9f9 	bl	800558c <memchr>
 800519a:	b140      	cbz	r0, 80051ae <_svfiprintf_r+0x152>
 800519c:	2340      	movs	r3, #64	; 0x40
 800519e:	eba0 000a 	sub.w	r0, r0, sl
 80051a2:	fa03 f000 	lsl.w	r0, r3, r0
 80051a6:	9b04      	ldr	r3, [sp, #16]
 80051a8:	3401      	adds	r4, #1
 80051aa:	4303      	orrs	r3, r0
 80051ac:	9304      	str	r3, [sp, #16]
 80051ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051b2:	2206      	movs	r2, #6
 80051b4:	4825      	ldr	r0, [pc, #148]	; (800524c <_svfiprintf_r+0x1f0>)
 80051b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80051ba:	f000 f9e7 	bl	800558c <memchr>
 80051be:	2800      	cmp	r0, #0
 80051c0:	d038      	beq.n	8005234 <_svfiprintf_r+0x1d8>
 80051c2:	4b23      	ldr	r3, [pc, #140]	; (8005250 <_svfiprintf_r+0x1f4>)
 80051c4:	bb1b      	cbnz	r3, 800520e <_svfiprintf_r+0x1b2>
 80051c6:	9b03      	ldr	r3, [sp, #12]
 80051c8:	3307      	adds	r3, #7
 80051ca:	f023 0307 	bic.w	r3, r3, #7
 80051ce:	3308      	adds	r3, #8
 80051d0:	9303      	str	r3, [sp, #12]
 80051d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051d4:	4433      	add	r3, r6
 80051d6:	9309      	str	r3, [sp, #36]	; 0x24
 80051d8:	e767      	b.n	80050aa <_svfiprintf_r+0x4e>
 80051da:	460c      	mov	r4, r1
 80051dc:	2001      	movs	r0, #1
 80051de:	fb0c 3202 	mla	r2, ip, r2, r3
 80051e2:	e7a5      	b.n	8005130 <_svfiprintf_r+0xd4>
 80051e4:	2300      	movs	r3, #0
 80051e6:	f04f 0c0a 	mov.w	ip, #10
 80051ea:	4619      	mov	r1, r3
 80051ec:	3401      	adds	r4, #1
 80051ee:	9305      	str	r3, [sp, #20]
 80051f0:	4620      	mov	r0, r4
 80051f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80051f6:	3a30      	subs	r2, #48	; 0x30
 80051f8:	2a09      	cmp	r2, #9
 80051fa:	d903      	bls.n	8005204 <_svfiprintf_r+0x1a8>
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d0c5      	beq.n	800518c <_svfiprintf_r+0x130>
 8005200:	9105      	str	r1, [sp, #20]
 8005202:	e7c3      	b.n	800518c <_svfiprintf_r+0x130>
 8005204:	4604      	mov	r4, r0
 8005206:	2301      	movs	r3, #1
 8005208:	fb0c 2101 	mla	r1, ip, r1, r2
 800520c:	e7f0      	b.n	80051f0 <_svfiprintf_r+0x194>
 800520e:	ab03      	add	r3, sp, #12
 8005210:	9300      	str	r3, [sp, #0]
 8005212:	462a      	mov	r2, r5
 8005214:	4638      	mov	r0, r7
 8005216:	4b0f      	ldr	r3, [pc, #60]	; (8005254 <_svfiprintf_r+0x1f8>)
 8005218:	a904      	add	r1, sp, #16
 800521a:	f3af 8000 	nop.w
 800521e:	1c42      	adds	r2, r0, #1
 8005220:	4606      	mov	r6, r0
 8005222:	d1d6      	bne.n	80051d2 <_svfiprintf_r+0x176>
 8005224:	89ab      	ldrh	r3, [r5, #12]
 8005226:	065b      	lsls	r3, r3, #25
 8005228:	f53f af2c 	bmi.w	8005084 <_svfiprintf_r+0x28>
 800522c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800522e:	b01d      	add	sp, #116	; 0x74
 8005230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005234:	ab03      	add	r3, sp, #12
 8005236:	9300      	str	r3, [sp, #0]
 8005238:	462a      	mov	r2, r5
 800523a:	4638      	mov	r0, r7
 800523c:	4b05      	ldr	r3, [pc, #20]	; (8005254 <_svfiprintf_r+0x1f8>)
 800523e:	a904      	add	r1, sp, #16
 8005240:	f000 f87c 	bl	800533c <_printf_i>
 8005244:	e7eb      	b.n	800521e <_svfiprintf_r+0x1c2>
 8005246:	bf00      	nop
 8005248:	0800572c 	.word	0x0800572c
 800524c:	08005736 	.word	0x08005736
 8005250:	00000000 	.word	0x00000000
 8005254:	08004fa5 	.word	0x08004fa5
 8005258:	08005732 	.word	0x08005732

0800525c <_printf_common>:
 800525c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005260:	4616      	mov	r6, r2
 8005262:	4699      	mov	r9, r3
 8005264:	688a      	ldr	r2, [r1, #8]
 8005266:	690b      	ldr	r3, [r1, #16]
 8005268:	4607      	mov	r7, r0
 800526a:	4293      	cmp	r3, r2
 800526c:	bfb8      	it	lt
 800526e:	4613      	movlt	r3, r2
 8005270:	6033      	str	r3, [r6, #0]
 8005272:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005276:	460c      	mov	r4, r1
 8005278:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800527c:	b10a      	cbz	r2, 8005282 <_printf_common+0x26>
 800527e:	3301      	adds	r3, #1
 8005280:	6033      	str	r3, [r6, #0]
 8005282:	6823      	ldr	r3, [r4, #0]
 8005284:	0699      	lsls	r1, r3, #26
 8005286:	bf42      	ittt	mi
 8005288:	6833      	ldrmi	r3, [r6, #0]
 800528a:	3302      	addmi	r3, #2
 800528c:	6033      	strmi	r3, [r6, #0]
 800528e:	6825      	ldr	r5, [r4, #0]
 8005290:	f015 0506 	ands.w	r5, r5, #6
 8005294:	d106      	bne.n	80052a4 <_printf_common+0x48>
 8005296:	f104 0a19 	add.w	sl, r4, #25
 800529a:	68e3      	ldr	r3, [r4, #12]
 800529c:	6832      	ldr	r2, [r6, #0]
 800529e:	1a9b      	subs	r3, r3, r2
 80052a0:	42ab      	cmp	r3, r5
 80052a2:	dc28      	bgt.n	80052f6 <_printf_common+0x9a>
 80052a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80052a8:	1e13      	subs	r3, r2, #0
 80052aa:	6822      	ldr	r2, [r4, #0]
 80052ac:	bf18      	it	ne
 80052ae:	2301      	movne	r3, #1
 80052b0:	0692      	lsls	r2, r2, #26
 80052b2:	d42d      	bmi.n	8005310 <_printf_common+0xb4>
 80052b4:	4649      	mov	r1, r9
 80052b6:	4638      	mov	r0, r7
 80052b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80052bc:	47c0      	blx	r8
 80052be:	3001      	adds	r0, #1
 80052c0:	d020      	beq.n	8005304 <_printf_common+0xa8>
 80052c2:	6823      	ldr	r3, [r4, #0]
 80052c4:	68e5      	ldr	r5, [r4, #12]
 80052c6:	f003 0306 	and.w	r3, r3, #6
 80052ca:	2b04      	cmp	r3, #4
 80052cc:	bf18      	it	ne
 80052ce:	2500      	movne	r5, #0
 80052d0:	6832      	ldr	r2, [r6, #0]
 80052d2:	f04f 0600 	mov.w	r6, #0
 80052d6:	68a3      	ldr	r3, [r4, #8]
 80052d8:	bf08      	it	eq
 80052da:	1aad      	subeq	r5, r5, r2
 80052dc:	6922      	ldr	r2, [r4, #16]
 80052de:	bf08      	it	eq
 80052e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80052e4:	4293      	cmp	r3, r2
 80052e6:	bfc4      	itt	gt
 80052e8:	1a9b      	subgt	r3, r3, r2
 80052ea:	18ed      	addgt	r5, r5, r3
 80052ec:	341a      	adds	r4, #26
 80052ee:	42b5      	cmp	r5, r6
 80052f0:	d11a      	bne.n	8005328 <_printf_common+0xcc>
 80052f2:	2000      	movs	r0, #0
 80052f4:	e008      	b.n	8005308 <_printf_common+0xac>
 80052f6:	2301      	movs	r3, #1
 80052f8:	4652      	mov	r2, sl
 80052fa:	4649      	mov	r1, r9
 80052fc:	4638      	mov	r0, r7
 80052fe:	47c0      	blx	r8
 8005300:	3001      	adds	r0, #1
 8005302:	d103      	bne.n	800530c <_printf_common+0xb0>
 8005304:	f04f 30ff 	mov.w	r0, #4294967295
 8005308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800530c:	3501      	adds	r5, #1
 800530e:	e7c4      	b.n	800529a <_printf_common+0x3e>
 8005310:	2030      	movs	r0, #48	; 0x30
 8005312:	18e1      	adds	r1, r4, r3
 8005314:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005318:	1c5a      	adds	r2, r3, #1
 800531a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800531e:	4422      	add	r2, r4
 8005320:	3302      	adds	r3, #2
 8005322:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005326:	e7c5      	b.n	80052b4 <_printf_common+0x58>
 8005328:	2301      	movs	r3, #1
 800532a:	4622      	mov	r2, r4
 800532c:	4649      	mov	r1, r9
 800532e:	4638      	mov	r0, r7
 8005330:	47c0      	blx	r8
 8005332:	3001      	adds	r0, #1
 8005334:	d0e6      	beq.n	8005304 <_printf_common+0xa8>
 8005336:	3601      	adds	r6, #1
 8005338:	e7d9      	b.n	80052ee <_printf_common+0x92>
	...

0800533c <_printf_i>:
 800533c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005340:	460c      	mov	r4, r1
 8005342:	7e27      	ldrb	r7, [r4, #24]
 8005344:	4691      	mov	r9, r2
 8005346:	2f78      	cmp	r7, #120	; 0x78
 8005348:	4680      	mov	r8, r0
 800534a:	469a      	mov	sl, r3
 800534c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800534e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005352:	d807      	bhi.n	8005364 <_printf_i+0x28>
 8005354:	2f62      	cmp	r7, #98	; 0x62
 8005356:	d80a      	bhi.n	800536e <_printf_i+0x32>
 8005358:	2f00      	cmp	r7, #0
 800535a:	f000 80d9 	beq.w	8005510 <_printf_i+0x1d4>
 800535e:	2f58      	cmp	r7, #88	; 0x58
 8005360:	f000 80a4 	beq.w	80054ac <_printf_i+0x170>
 8005364:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005368:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800536c:	e03a      	b.n	80053e4 <_printf_i+0xa8>
 800536e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005372:	2b15      	cmp	r3, #21
 8005374:	d8f6      	bhi.n	8005364 <_printf_i+0x28>
 8005376:	a001      	add	r0, pc, #4	; (adr r0, 800537c <_printf_i+0x40>)
 8005378:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800537c:	080053d5 	.word	0x080053d5
 8005380:	080053e9 	.word	0x080053e9
 8005384:	08005365 	.word	0x08005365
 8005388:	08005365 	.word	0x08005365
 800538c:	08005365 	.word	0x08005365
 8005390:	08005365 	.word	0x08005365
 8005394:	080053e9 	.word	0x080053e9
 8005398:	08005365 	.word	0x08005365
 800539c:	08005365 	.word	0x08005365
 80053a0:	08005365 	.word	0x08005365
 80053a4:	08005365 	.word	0x08005365
 80053a8:	080054f7 	.word	0x080054f7
 80053ac:	08005419 	.word	0x08005419
 80053b0:	080054d9 	.word	0x080054d9
 80053b4:	08005365 	.word	0x08005365
 80053b8:	08005365 	.word	0x08005365
 80053bc:	08005519 	.word	0x08005519
 80053c0:	08005365 	.word	0x08005365
 80053c4:	08005419 	.word	0x08005419
 80053c8:	08005365 	.word	0x08005365
 80053cc:	08005365 	.word	0x08005365
 80053d0:	080054e1 	.word	0x080054e1
 80053d4:	680b      	ldr	r3, [r1, #0]
 80053d6:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80053da:	1d1a      	adds	r2, r3, #4
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	600a      	str	r2, [r1, #0]
 80053e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80053e4:	2301      	movs	r3, #1
 80053e6:	e0a4      	b.n	8005532 <_printf_i+0x1f6>
 80053e8:	6825      	ldr	r5, [r4, #0]
 80053ea:	6808      	ldr	r0, [r1, #0]
 80053ec:	062e      	lsls	r6, r5, #24
 80053ee:	f100 0304 	add.w	r3, r0, #4
 80053f2:	d50a      	bpl.n	800540a <_printf_i+0xce>
 80053f4:	6805      	ldr	r5, [r0, #0]
 80053f6:	600b      	str	r3, [r1, #0]
 80053f8:	2d00      	cmp	r5, #0
 80053fa:	da03      	bge.n	8005404 <_printf_i+0xc8>
 80053fc:	232d      	movs	r3, #45	; 0x2d
 80053fe:	426d      	negs	r5, r5
 8005400:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005404:	230a      	movs	r3, #10
 8005406:	485e      	ldr	r0, [pc, #376]	; (8005580 <_printf_i+0x244>)
 8005408:	e019      	b.n	800543e <_printf_i+0x102>
 800540a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800540e:	6805      	ldr	r5, [r0, #0]
 8005410:	600b      	str	r3, [r1, #0]
 8005412:	bf18      	it	ne
 8005414:	b22d      	sxthne	r5, r5
 8005416:	e7ef      	b.n	80053f8 <_printf_i+0xbc>
 8005418:	680b      	ldr	r3, [r1, #0]
 800541a:	6825      	ldr	r5, [r4, #0]
 800541c:	1d18      	adds	r0, r3, #4
 800541e:	6008      	str	r0, [r1, #0]
 8005420:	0628      	lsls	r0, r5, #24
 8005422:	d501      	bpl.n	8005428 <_printf_i+0xec>
 8005424:	681d      	ldr	r5, [r3, #0]
 8005426:	e002      	b.n	800542e <_printf_i+0xf2>
 8005428:	0669      	lsls	r1, r5, #25
 800542a:	d5fb      	bpl.n	8005424 <_printf_i+0xe8>
 800542c:	881d      	ldrh	r5, [r3, #0]
 800542e:	2f6f      	cmp	r7, #111	; 0x6f
 8005430:	bf0c      	ite	eq
 8005432:	2308      	moveq	r3, #8
 8005434:	230a      	movne	r3, #10
 8005436:	4852      	ldr	r0, [pc, #328]	; (8005580 <_printf_i+0x244>)
 8005438:	2100      	movs	r1, #0
 800543a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800543e:	6866      	ldr	r6, [r4, #4]
 8005440:	2e00      	cmp	r6, #0
 8005442:	bfa8      	it	ge
 8005444:	6821      	ldrge	r1, [r4, #0]
 8005446:	60a6      	str	r6, [r4, #8]
 8005448:	bfa4      	itt	ge
 800544a:	f021 0104 	bicge.w	r1, r1, #4
 800544e:	6021      	strge	r1, [r4, #0]
 8005450:	b90d      	cbnz	r5, 8005456 <_printf_i+0x11a>
 8005452:	2e00      	cmp	r6, #0
 8005454:	d04d      	beq.n	80054f2 <_printf_i+0x1b6>
 8005456:	4616      	mov	r6, r2
 8005458:	fbb5 f1f3 	udiv	r1, r5, r3
 800545c:	fb03 5711 	mls	r7, r3, r1, r5
 8005460:	5dc7      	ldrb	r7, [r0, r7]
 8005462:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005466:	462f      	mov	r7, r5
 8005468:	42bb      	cmp	r3, r7
 800546a:	460d      	mov	r5, r1
 800546c:	d9f4      	bls.n	8005458 <_printf_i+0x11c>
 800546e:	2b08      	cmp	r3, #8
 8005470:	d10b      	bne.n	800548a <_printf_i+0x14e>
 8005472:	6823      	ldr	r3, [r4, #0]
 8005474:	07df      	lsls	r7, r3, #31
 8005476:	d508      	bpl.n	800548a <_printf_i+0x14e>
 8005478:	6923      	ldr	r3, [r4, #16]
 800547a:	6861      	ldr	r1, [r4, #4]
 800547c:	4299      	cmp	r1, r3
 800547e:	bfde      	ittt	le
 8005480:	2330      	movle	r3, #48	; 0x30
 8005482:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005486:	f106 36ff 	addle.w	r6, r6, #4294967295
 800548a:	1b92      	subs	r2, r2, r6
 800548c:	6122      	str	r2, [r4, #16]
 800548e:	464b      	mov	r3, r9
 8005490:	4621      	mov	r1, r4
 8005492:	4640      	mov	r0, r8
 8005494:	f8cd a000 	str.w	sl, [sp]
 8005498:	aa03      	add	r2, sp, #12
 800549a:	f7ff fedf 	bl	800525c <_printf_common>
 800549e:	3001      	adds	r0, #1
 80054a0:	d14c      	bne.n	800553c <_printf_i+0x200>
 80054a2:	f04f 30ff 	mov.w	r0, #4294967295
 80054a6:	b004      	add	sp, #16
 80054a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054ac:	4834      	ldr	r0, [pc, #208]	; (8005580 <_printf_i+0x244>)
 80054ae:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80054b2:	680e      	ldr	r6, [r1, #0]
 80054b4:	6823      	ldr	r3, [r4, #0]
 80054b6:	f856 5b04 	ldr.w	r5, [r6], #4
 80054ba:	061f      	lsls	r7, r3, #24
 80054bc:	600e      	str	r6, [r1, #0]
 80054be:	d514      	bpl.n	80054ea <_printf_i+0x1ae>
 80054c0:	07d9      	lsls	r1, r3, #31
 80054c2:	bf44      	itt	mi
 80054c4:	f043 0320 	orrmi.w	r3, r3, #32
 80054c8:	6023      	strmi	r3, [r4, #0]
 80054ca:	b91d      	cbnz	r5, 80054d4 <_printf_i+0x198>
 80054cc:	6823      	ldr	r3, [r4, #0]
 80054ce:	f023 0320 	bic.w	r3, r3, #32
 80054d2:	6023      	str	r3, [r4, #0]
 80054d4:	2310      	movs	r3, #16
 80054d6:	e7af      	b.n	8005438 <_printf_i+0xfc>
 80054d8:	6823      	ldr	r3, [r4, #0]
 80054da:	f043 0320 	orr.w	r3, r3, #32
 80054de:	6023      	str	r3, [r4, #0]
 80054e0:	2378      	movs	r3, #120	; 0x78
 80054e2:	4828      	ldr	r0, [pc, #160]	; (8005584 <_printf_i+0x248>)
 80054e4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80054e8:	e7e3      	b.n	80054b2 <_printf_i+0x176>
 80054ea:	065e      	lsls	r6, r3, #25
 80054ec:	bf48      	it	mi
 80054ee:	b2ad      	uxthmi	r5, r5
 80054f0:	e7e6      	b.n	80054c0 <_printf_i+0x184>
 80054f2:	4616      	mov	r6, r2
 80054f4:	e7bb      	b.n	800546e <_printf_i+0x132>
 80054f6:	680b      	ldr	r3, [r1, #0]
 80054f8:	6826      	ldr	r6, [r4, #0]
 80054fa:	1d1d      	adds	r5, r3, #4
 80054fc:	6960      	ldr	r0, [r4, #20]
 80054fe:	600d      	str	r5, [r1, #0]
 8005500:	0635      	lsls	r5, r6, #24
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	d501      	bpl.n	800550a <_printf_i+0x1ce>
 8005506:	6018      	str	r0, [r3, #0]
 8005508:	e002      	b.n	8005510 <_printf_i+0x1d4>
 800550a:	0671      	lsls	r1, r6, #25
 800550c:	d5fb      	bpl.n	8005506 <_printf_i+0x1ca>
 800550e:	8018      	strh	r0, [r3, #0]
 8005510:	2300      	movs	r3, #0
 8005512:	4616      	mov	r6, r2
 8005514:	6123      	str	r3, [r4, #16]
 8005516:	e7ba      	b.n	800548e <_printf_i+0x152>
 8005518:	680b      	ldr	r3, [r1, #0]
 800551a:	1d1a      	adds	r2, r3, #4
 800551c:	600a      	str	r2, [r1, #0]
 800551e:	681e      	ldr	r6, [r3, #0]
 8005520:	2100      	movs	r1, #0
 8005522:	4630      	mov	r0, r6
 8005524:	6862      	ldr	r2, [r4, #4]
 8005526:	f000 f831 	bl	800558c <memchr>
 800552a:	b108      	cbz	r0, 8005530 <_printf_i+0x1f4>
 800552c:	1b80      	subs	r0, r0, r6
 800552e:	6060      	str	r0, [r4, #4]
 8005530:	6863      	ldr	r3, [r4, #4]
 8005532:	6123      	str	r3, [r4, #16]
 8005534:	2300      	movs	r3, #0
 8005536:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800553a:	e7a8      	b.n	800548e <_printf_i+0x152>
 800553c:	4632      	mov	r2, r6
 800553e:	4649      	mov	r1, r9
 8005540:	4640      	mov	r0, r8
 8005542:	6923      	ldr	r3, [r4, #16]
 8005544:	47d0      	blx	sl
 8005546:	3001      	adds	r0, #1
 8005548:	d0ab      	beq.n	80054a2 <_printf_i+0x166>
 800554a:	6823      	ldr	r3, [r4, #0]
 800554c:	079b      	lsls	r3, r3, #30
 800554e:	d413      	bmi.n	8005578 <_printf_i+0x23c>
 8005550:	68e0      	ldr	r0, [r4, #12]
 8005552:	9b03      	ldr	r3, [sp, #12]
 8005554:	4298      	cmp	r0, r3
 8005556:	bfb8      	it	lt
 8005558:	4618      	movlt	r0, r3
 800555a:	e7a4      	b.n	80054a6 <_printf_i+0x16a>
 800555c:	2301      	movs	r3, #1
 800555e:	4632      	mov	r2, r6
 8005560:	4649      	mov	r1, r9
 8005562:	4640      	mov	r0, r8
 8005564:	47d0      	blx	sl
 8005566:	3001      	adds	r0, #1
 8005568:	d09b      	beq.n	80054a2 <_printf_i+0x166>
 800556a:	3501      	adds	r5, #1
 800556c:	68e3      	ldr	r3, [r4, #12]
 800556e:	9903      	ldr	r1, [sp, #12]
 8005570:	1a5b      	subs	r3, r3, r1
 8005572:	42ab      	cmp	r3, r5
 8005574:	dcf2      	bgt.n	800555c <_printf_i+0x220>
 8005576:	e7eb      	b.n	8005550 <_printf_i+0x214>
 8005578:	2500      	movs	r5, #0
 800557a:	f104 0619 	add.w	r6, r4, #25
 800557e:	e7f5      	b.n	800556c <_printf_i+0x230>
 8005580:	0800573d 	.word	0x0800573d
 8005584:	0800574e 	.word	0x0800574e

08005588 <__retarget_lock_acquire_recursive>:
 8005588:	4770      	bx	lr

0800558a <__retarget_lock_release_recursive>:
 800558a:	4770      	bx	lr

0800558c <memchr>:
 800558c:	4603      	mov	r3, r0
 800558e:	b510      	push	{r4, lr}
 8005590:	b2c9      	uxtb	r1, r1
 8005592:	4402      	add	r2, r0
 8005594:	4293      	cmp	r3, r2
 8005596:	4618      	mov	r0, r3
 8005598:	d101      	bne.n	800559e <memchr+0x12>
 800559a:	2000      	movs	r0, #0
 800559c:	e003      	b.n	80055a6 <memchr+0x1a>
 800559e:	7804      	ldrb	r4, [r0, #0]
 80055a0:	3301      	adds	r3, #1
 80055a2:	428c      	cmp	r4, r1
 80055a4:	d1f6      	bne.n	8005594 <memchr+0x8>
 80055a6:	bd10      	pop	{r4, pc}

080055a8 <_realloc_r>:
 80055a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055aa:	4607      	mov	r7, r0
 80055ac:	4614      	mov	r4, r2
 80055ae:	460e      	mov	r6, r1
 80055b0:	b921      	cbnz	r1, 80055bc <_realloc_r+0x14>
 80055b2:	4611      	mov	r1, r2
 80055b4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80055b8:	f7ff bc5e 	b.w	8004e78 <_malloc_r>
 80055bc:	b922      	cbnz	r2, 80055c8 <_realloc_r+0x20>
 80055be:	f7ff fc0f 	bl	8004de0 <_free_r>
 80055c2:	4625      	mov	r5, r4
 80055c4:	4628      	mov	r0, r5
 80055c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055c8:	f000 f814 	bl	80055f4 <_malloc_usable_size_r>
 80055cc:	42a0      	cmp	r0, r4
 80055ce:	d20f      	bcs.n	80055f0 <_realloc_r+0x48>
 80055d0:	4621      	mov	r1, r4
 80055d2:	4638      	mov	r0, r7
 80055d4:	f7ff fc50 	bl	8004e78 <_malloc_r>
 80055d8:	4605      	mov	r5, r0
 80055da:	2800      	cmp	r0, #0
 80055dc:	d0f2      	beq.n	80055c4 <_realloc_r+0x1c>
 80055de:	4631      	mov	r1, r6
 80055e0:	4622      	mov	r2, r4
 80055e2:	f7ff fbcd 	bl	8004d80 <memcpy>
 80055e6:	4631      	mov	r1, r6
 80055e8:	4638      	mov	r0, r7
 80055ea:	f7ff fbf9 	bl	8004de0 <_free_r>
 80055ee:	e7e9      	b.n	80055c4 <_realloc_r+0x1c>
 80055f0:	4635      	mov	r5, r6
 80055f2:	e7e7      	b.n	80055c4 <_realloc_r+0x1c>

080055f4 <_malloc_usable_size_r>:
 80055f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055f8:	1f18      	subs	r0, r3, #4
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	bfbc      	itt	lt
 80055fe:	580b      	ldrlt	r3, [r1, r0]
 8005600:	18c0      	addlt	r0, r0, r3
 8005602:	4770      	bx	lr

08005604 <_init>:
 8005604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005606:	bf00      	nop
 8005608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800560a:	bc08      	pop	{r3}
 800560c:	469e      	mov	lr, r3
 800560e:	4770      	bx	lr

08005610 <_fini>:
 8005610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005612:	bf00      	nop
 8005614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005616:	bc08      	pop	{r3}
 8005618:	469e      	mov	lr, r3
 800561a:	4770      	bx	lr
