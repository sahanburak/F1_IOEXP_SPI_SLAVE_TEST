
F1_IOEXP_SPI_SLAVE_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043b4  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08004598  08004598  00014598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004658  08004658  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004658  08004658  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004658  08004658  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004658  08004658  00014658  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800465c  0800465c  0001465c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004660  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002bbc  20000070  080046d0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002c2c  080046d0  00022c2c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019612  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003369  00000000  00000000  000396ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ef8  00000000  00000000  0003ca18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000db8  00000000  00000000  0003d910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c9d4  00000000  00000000  0003e6c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013f1b  00000000  00000000  0005b09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000972d5  00000000  00000000  0006efb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010628c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003fd4  00000000  00000000  001062e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000070 	.word	0x20000070
 8000200:	00000000 	.word	0x00000000
 8000204:	08004580 	.word	0x08004580

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000074 	.word	0x20000074
 8000220:	08004580 	.word	0x08004580

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <LP55231_WriteReg>:
 *
 * @param 	reg_addr	Register Address
 * @param 	data		Register Value
 *
 *******************************************************************************/
void LP55231_WriteReg(uint8_t reg_addr, uint8_t data) {
 8000234:	b580      	push	{r7, lr}
 8000236:	b086      	sub	sp, #24
 8000238:	af04      	add	r7, sp, #16
 800023a:	4603      	mov	r3, r0
 800023c:	460a      	mov	r2, r1
 800023e:	71fb      	strb	r3, [r7, #7]
 8000240:	4613      	mov	r3, r2
 8000242:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&LP55231_I2C_PORT, LP55231_I2C_ADDR, reg_addr, 1, &data, 1, HAL_MAX_DELAY);
 8000244:	79fb      	ldrb	r3, [r7, #7]
 8000246:	b29a      	uxth	r2, r3
 8000248:	f04f 33ff 	mov.w	r3, #4294967295
 800024c:	9302      	str	r3, [sp, #8]
 800024e:	2301      	movs	r3, #1
 8000250:	9301      	str	r3, [sp, #4]
 8000252:	1dbb      	adds	r3, r7, #6
 8000254:	9300      	str	r3, [sp, #0]
 8000256:	2301      	movs	r3, #1
 8000258:	2164      	movs	r1, #100	; 0x64
 800025a:	4803      	ldr	r0, [pc, #12]	; (8000268 <LP55231_WriteReg+0x34>)
 800025c:	f002 f8d2 	bl	8002404 <HAL_I2C_Mem_Write>
}
 8000260:	bf00      	nop
 8000262:	3708      	adds	r7, #8
 8000264:	46bd      	mov	sp, r7
 8000266:	bd80      	pop	{r7, pc}
 8000268:	200004a0 	.word	0x200004a0

0800026c <LP55231_Init>:

/***************************************************************************//**
 * @brief  				Initialize the LP55231
 *
 *******************************************************************************/
void LP55231_Init(void){
 800026c:	b580      	push	{r7, lr}
 800026e:	af00      	add	r7, sp, #0

	LP55231_Reset();
 8000270:	f000 f818 	bl	80002a4 <LP55231_Reset>
	HAL_Delay(500);
 8000274:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000278:	f001 f8b8 	bl	80013ec <HAL_Delay>
	LP55231_Enable();
 800027c:	f000 f806 	bl	800028c <LP55231_Enable>
	HAL_Delay(500);
 8000280:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000284:	f001 f8b2 	bl	80013ec <HAL_Delay>
	return;
 8000288:	bf00      	nop
}
 800028a:	bd80      	pop	{r7, pc}

0800028c <LP55231_Enable>:
/***************************************************************************//**
 * @brief  				Enable all led channels
 *
 *******************************************************************************/
void LP55231_Enable()
{
 800028c:	b580      	push	{r7, lr}
 800028e:	af00      	add	r7, sp, #0
	/* Set enable bit */
	LP55231_WriteReg(REG_CNTRL1, 0x40 );
 8000290:	2140      	movs	r1, #64	; 0x40
 8000292:	2000      	movs	r0, #0
 8000294:	f7ff ffce 	bl	8000234 <LP55231_WriteReg>

	/* enable internal clock & charge pump & write auto increment */
	LP55231_WriteReg(REG_MISC, 0x53);
 8000298:	2153      	movs	r1, #83	; 0x53
 800029a:	2036      	movs	r0, #54	; 0x36
 800029c:	f7ff ffca 	bl	8000234 <LP55231_WriteReg>
}
 80002a0:	bf00      	nop
 80002a2:	bd80      	pop	{r7, pc}

080002a4 <LP55231_Reset>:
/***************************************************************************//**
 * @brief  				Reset the LPC55231
 *
 *******************************************************************************/
void LP55231_Reset()
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	af00      	add	r7, sp, #0
	// force reset
	LP55231_WriteReg(REG_RESET, 0xff);
 80002a8:	21ff      	movs	r1, #255	; 0xff
 80002aa:	203d      	movs	r0, #61	; 0x3d
 80002ac:	f7ff ffc2 	bl	8000234 <LP55231_WriteReg>
}
 80002b0:	bf00      	nop
 80002b2:	bd80      	pop	{r7, pc}

080002b4 <LP55231_SetChannelPWM>:
 * @param 	value		PWM value 0~255
 *
 * @return 	Error Code	If 0 is success, otherwise return error code. See led_drv_lp55231.h for more details about error codes.
 *******************************************************************************/
eLP55231ErrCode LP55231_SetChannelPWM(uint8_t channel, uint8_t value)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b082      	sub	sp, #8
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	4603      	mov	r3, r0
 80002bc:	460a      	mov	r2, r1
 80002be:	71fb      	strb	r3, [r7, #7]
 80002c0:	4613      	mov	r3, r2
 80002c2:	71bb      	strb	r3, [r7, #6]
	if(channel >= LP55231_NumChannels)
 80002c4:	79fb      	ldrb	r3, [r7, #7]
 80002c6:	2b08      	cmp	r3, #8
 80002c8:	d901      	bls.n	80002ce <LP55231_SetChannelPWM+0x1a>
	{
		return LP_ERR_INVALID_CHANNEL;
 80002ca:	2301      	movs	r3, #1
 80002cc:	e008      	b.n	80002e0 <LP55231_SetChannelPWM+0x2c>
	}

	LP55231_WriteReg(REG_D1_PWM + channel, value);
 80002ce:	79fb      	ldrb	r3, [r7, #7]
 80002d0:	3316      	adds	r3, #22
 80002d2:	b2db      	uxtb	r3, r3
 80002d4:	79ba      	ldrb	r2, [r7, #6]
 80002d6:	4611      	mov	r1, r2
 80002d8:	4618      	mov	r0, r3
 80002da:	f7ff ffab 	bl	8000234 <LP55231_WriteReg>
	return LP_ERR_NONE;
 80002de:	2300      	movs	r3, #0
}
 80002e0:	4618      	mov	r0, r3
 80002e2:	3708      	adds	r7, #8
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bd80      	pop	{r7, pc}

080002e8 <LP55231_GetLedChannel>:
 *
 * @return 	channel		return channel number depend on connection. See led_drv_lp55231.h for more details about led channel number.
 *
 *******************************************************************************/
eLP55231Channels LP55231_GetLedChannel(uint8_t led, eLEDColor color)
{
 80002e8:	b480      	push	{r7}
 80002ea:	b085      	sub	sp, #20
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	4603      	mov	r3, r0
 80002f0:	460a      	mov	r2, r1
 80002f2:	71fb      	strb	r3, [r7, #7]
 80002f4:	4613      	mov	r3, r2
 80002f6:	71bb      	strb	r3, [r7, #6]
	if(led > (LP55231_NumChannels/3))
 80002f8:	79fb      	ldrb	r3, [r7, #7]
 80002fa:	2b03      	cmp	r3, #3
 80002fc:	d901      	bls.n	8000302 <LP55231_GetLedChannel+0x1a>
	{
		return -1;
 80002fe:	23ff      	movs	r3, #255	; 0xff
 8000300:	e054      	b.n	80003ac <LP55231_GetLedChannel+0xc4>
	}
	eLP55231Channels ch = -1;
 8000302:	23ff      	movs	r3, #255	; 0xff
 8000304:	73fb      	strb	r3, [r7, #15]
	switch(led){
 8000306:	79fb      	ldrb	r3, [r7, #7]
 8000308:	2b03      	cmp	r3, #3
 800030a:	d034      	beq.n	8000376 <LP55231_GetLedChannel+0x8e>
 800030c:	2b03      	cmp	r3, #3
 800030e:	dc49      	bgt.n	80003a4 <LP55231_GetLedChannel+0xbc>
 8000310:	2b01      	cmp	r3, #1
 8000312:	d002      	beq.n	800031a <LP55231_GetLedChannel+0x32>
 8000314:	2b02      	cmp	r3, #2
 8000316:	d017      	beq.n	8000348 <LP55231_GetLedChannel+0x60>
 8000318:	e044      	b.n	80003a4 <LP55231_GetLedChannel+0xbc>
	case 1:
		switch(color){
 800031a:	79bb      	ldrb	r3, [r7, #6]
 800031c:	2b02      	cmp	r3, #2
 800031e:	d00c      	beq.n	800033a <LP55231_GetLedChannel+0x52>
 8000320:	2b02      	cmp	r3, #2
 8000322:	dc0d      	bgt.n	8000340 <LP55231_GetLedChannel+0x58>
 8000324:	2b00      	cmp	r3, #0
 8000326:	d002      	beq.n	800032e <LP55231_GetLedChannel+0x46>
 8000328:	2b01      	cmp	r3, #1
 800032a:	d003      	beq.n	8000334 <LP55231_GetLedChannel+0x4c>
 800032c:	e008      	b.n	8000340 <LP55231_GetLedChannel+0x58>
		case LED_COLOR_RED:
			ch = RGB_LED1_RED_CH;
 800032e:	2308      	movs	r3, #8
 8000330:	73fb      	strb	r3, [r7, #15]
			break;
 8000332:	e008      	b.n	8000346 <LP55231_GetLedChannel+0x5e>
		case LED_COLOR_GREEN:
			ch = RGB_LED1_GREEN_CH;
 8000334:	2304      	movs	r3, #4
 8000336:	73fb      	strb	r3, [r7, #15]
			break;
 8000338:	e005      	b.n	8000346 <LP55231_GetLedChannel+0x5e>
		case LED_COLOR_BLUE:
			ch = RGB_LED1_BLUE_CH;
 800033a:	2305      	movs	r3, #5
 800033c:	73fb      	strb	r3, [r7, #15]
			break;
 800033e:	e002      	b.n	8000346 <LP55231_GetLedChannel+0x5e>
		default:
			ch = -1;
 8000340:	23ff      	movs	r3, #255	; 0xff
 8000342:	73fb      	strb	r3, [r7, #15]
			break;
 8000344:	bf00      	nop
		}
		break;
 8000346:	e030      	b.n	80003aa <LP55231_GetLedChannel+0xc2>
		case 2:
			switch(color){
 8000348:	79bb      	ldrb	r3, [r7, #6]
 800034a:	2b02      	cmp	r3, #2
 800034c:	d00c      	beq.n	8000368 <LP55231_GetLedChannel+0x80>
 800034e:	2b02      	cmp	r3, #2
 8000350:	dc0d      	bgt.n	800036e <LP55231_GetLedChannel+0x86>
 8000352:	2b00      	cmp	r3, #0
 8000354:	d002      	beq.n	800035c <LP55231_GetLedChannel+0x74>
 8000356:	2b01      	cmp	r3, #1
 8000358:	d003      	beq.n	8000362 <LP55231_GetLedChannel+0x7a>
 800035a:	e008      	b.n	800036e <LP55231_GetLedChannel+0x86>
			case LED_COLOR_RED:
				ch = RGB_LED2_RED_CH;
 800035c:	2307      	movs	r3, #7
 800035e:	73fb      	strb	r3, [r7, #15]
				break;
 8000360:	e008      	b.n	8000374 <LP55231_GetLedChannel+0x8c>
			case LED_COLOR_GREEN:
				ch = RGB_LED2_GREEN_CH;
 8000362:	2302      	movs	r3, #2
 8000364:	73fb      	strb	r3, [r7, #15]
				break;
 8000366:	e005      	b.n	8000374 <LP55231_GetLedChannel+0x8c>
			case LED_COLOR_BLUE:
				ch = RGB_LED2_BLUE_CH;
 8000368:	2303      	movs	r3, #3
 800036a:	73fb      	strb	r3, [r7, #15]
				break;
 800036c:	e002      	b.n	8000374 <LP55231_GetLedChannel+0x8c>
			default:
				ch = -1;
 800036e:	23ff      	movs	r3, #255	; 0xff
 8000370:	73fb      	strb	r3, [r7, #15]
				break;
 8000372:	bf00      	nop
			}
			break;
 8000374:	e019      	b.n	80003aa <LP55231_GetLedChannel+0xc2>
			case 3:
				switch(color){
 8000376:	79bb      	ldrb	r3, [r7, #6]
 8000378:	2b02      	cmp	r3, #2
 800037a:	d00c      	beq.n	8000396 <LP55231_GetLedChannel+0xae>
 800037c:	2b02      	cmp	r3, #2
 800037e:	dc0d      	bgt.n	800039c <LP55231_GetLedChannel+0xb4>
 8000380:	2b00      	cmp	r3, #0
 8000382:	d002      	beq.n	800038a <LP55231_GetLedChannel+0xa2>
 8000384:	2b01      	cmp	r3, #1
 8000386:	d003      	beq.n	8000390 <LP55231_GetLedChannel+0xa8>
 8000388:	e008      	b.n	800039c <LP55231_GetLedChannel+0xb4>
				case LED_COLOR_RED:
					ch = RGB_LED3_RED_CH;
 800038a:	2306      	movs	r3, #6
 800038c:	73fb      	strb	r3, [r7, #15]
					break;
 800038e:	e008      	b.n	80003a2 <LP55231_GetLedChannel+0xba>
				case LED_COLOR_GREEN:
					ch = RGB_LED3_GREEN_CH;
 8000390:	2300      	movs	r3, #0
 8000392:	73fb      	strb	r3, [r7, #15]
					break;
 8000394:	e005      	b.n	80003a2 <LP55231_GetLedChannel+0xba>
				case LED_COLOR_BLUE:
					ch = RGB_LED3_BLUE_CH;
 8000396:	2301      	movs	r3, #1
 8000398:	73fb      	strb	r3, [r7, #15]
					break;
 800039a:	e002      	b.n	80003a2 <LP55231_GetLedChannel+0xba>
				default:
					ch = -1;
 800039c:	23ff      	movs	r3, #255	; 0xff
 800039e:	73fb      	strb	r3, [r7, #15]
					break;
 80003a0:	bf00      	nop
				}
				break;
 80003a2:	e002      	b.n	80003aa <LP55231_GetLedChannel+0xc2>
				default:
					ch = -1;
 80003a4:	23ff      	movs	r3, #255	; 0xff
 80003a6:	73fb      	strb	r3, [r7, #15]
					break;
 80003a8:	bf00      	nop
	}
	return ch;
 80003aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80003ac:	4618      	mov	r0, r3
 80003ae:	3714      	adds	r7, #20
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bc80      	pop	{r7}
 80003b4:	4770      	bx	lr
	...

080003b8 <LP55231_SetColor>:
 *
 * @return 	error		return error code. See led_drv_lp55231.h for more details about error codes.
 *
 *******************************************************************************/
eLP55231ErrCode LP55231_SetColor(uint8_t led, uint32_t argb)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b084      	sub	sp, #16
 80003bc:	af00      	add	r7, sp, #0
 80003be:	4603      	mov	r3, r0
 80003c0:	6039      	str	r1, [r7, #0]
 80003c2:	71fb      	strb	r3, [r7, #7]
	if(led > (LP55231_NumChannels/3))
 80003c4:	79fb      	ldrb	r3, [r7, #7]
 80003c6:	2b03      	cmp	r3, #3
 80003c8:	d901      	bls.n	80003ce <LP55231_SetColor+0x16>
	{
		return LP_ERR_INVALID_CHANNEL;
 80003ca:	2301      	movs	r3, #1
 80003cc:	e044      	b.n	8000458 <LP55231_SetColor+0xa0>
	}

	uint8_t brightness = (argb & 0xFF000000) >> 24;
 80003ce:	683b      	ldr	r3, [r7, #0]
 80003d0:	0e1b      	lsrs	r3, r3, #24
 80003d2:	73bb      	strb	r3, [r7, #14]
	uint8_t color[] = {(argb & 0x00FF0000) >> 16 , (argb & 0x0000FF00) >> 8 , (argb & 0x000000FF)};
 80003d4:	683b      	ldr	r3, [r7, #0]
 80003d6:	0c1b      	lsrs	r3, r3, #16
 80003d8:	b2db      	uxtb	r3, r3
 80003da:	723b      	strb	r3, [r7, #8]
 80003dc:	683b      	ldr	r3, [r7, #0]
 80003de:	0a1b      	lsrs	r3, r3, #8
 80003e0:	b2db      	uxtb	r3, r3
 80003e2:	727b      	strb	r3, [r7, #9]
 80003e4:	683b      	ldr	r3, [r7, #0]
 80003e6:	b2db      	uxtb	r3, r3
 80003e8:	72bb      	strb	r3, [r7, #10]
	uint8_t ind = 0;
 80003ea:	2300      	movs	r3, #0
 80003ec:	73fb      	strb	r3, [r7, #15]
	while(ind<3){
 80003ee:	e02f      	b.n	8000450 <LP55231_SetColor+0x98>
		eLP55231Channels channel = LP55231_GetLedChannel(led, (LED_COLOR_RED+ind));
 80003f0:	7bfa      	ldrb	r2, [r7, #15]
 80003f2:	79fb      	ldrb	r3, [r7, #7]
 80003f4:	4611      	mov	r1, r2
 80003f6:	4618      	mov	r0, r3
 80003f8:	f7ff ff76 	bl	80002e8 <LP55231_GetLedChannel>
 80003fc:	4603      	mov	r3, r0
 80003fe:	737b      	strb	r3, [r7, #13]
		if(color[ind]){
 8000400:	7bfb      	ldrb	r3, [r7, #15]
 8000402:	f107 0210 	add.w	r2, r7, #16
 8000406:	4413      	add	r3, r2
 8000408:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 800040c:	2b00      	cmp	r3, #0
 800040e:	d017      	beq.n	8000440 <LP55231_SetColor+0x88>
			LP55231_SetChannelPWM(channel,color[ind]*brightness/255);
 8000410:	7bfb      	ldrb	r3, [r7, #15]
 8000412:	f107 0210 	add.w	r2, r7, #16
 8000416:	4413      	add	r3, r2
 8000418:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 800041c:	461a      	mov	r2, r3
 800041e:	7bbb      	ldrb	r3, [r7, #14]
 8000420:	fb03 f302 	mul.w	r3, r3, r2
 8000424:	4a0e      	ldr	r2, [pc, #56]	; (8000460 <LP55231_SetColor+0xa8>)
 8000426:	fb82 1203 	smull	r1, r2, r2, r3
 800042a:	441a      	add	r2, r3
 800042c:	11d2      	asrs	r2, r2, #7
 800042e:	17db      	asrs	r3, r3, #31
 8000430:	1ad3      	subs	r3, r2, r3
 8000432:	b2da      	uxtb	r2, r3
 8000434:	7b7b      	ldrb	r3, [r7, #13]
 8000436:	4611      	mov	r1, r2
 8000438:	4618      	mov	r0, r3
 800043a:	f7ff ff3b 	bl	80002b4 <LP55231_SetChannelPWM>
 800043e:	e004      	b.n	800044a <LP55231_SetColor+0x92>
		}else{
			LP55231_SetChannelPWM(channel,0);
 8000440:	7b7b      	ldrb	r3, [r7, #13]
 8000442:	2100      	movs	r1, #0
 8000444:	4618      	mov	r0, r3
 8000446:	f7ff ff35 	bl	80002b4 <LP55231_SetChannelPWM>
		}
		ind++;
 800044a:	7bfb      	ldrb	r3, [r7, #15]
 800044c:	3301      	adds	r3, #1
 800044e:	73fb      	strb	r3, [r7, #15]
	while(ind<3){
 8000450:	7bfb      	ldrb	r3, [r7, #15]
 8000452:	2b02      	cmp	r3, #2
 8000454:	d9cc      	bls.n	80003f0 <LP55231_SetColor+0x38>
	}

	return LP_ERR_NONE;
 8000456:	2300      	movs	r3, #0
}
 8000458:	4618      	mov	r0, r3
 800045a:	3710      	adds	r7, #16
 800045c:	46bd      	mov	sp, r7
 800045e:	bd80      	pop	{r7, pc}
 8000460:	80808081 	.word	0x80808081

08000464 <SH1107_Reset>:

/***************************************************************************//**
* @brief Reset SH1107 with reset pin.
*
*******************************************************************************/
void SH1107_Reset(void) {
 8000464:	b580      	push	{r7, lr}
 8000466:	af00      	add	r7, sp, #0
	SH1107_Off();
 8000468:	f000 f814 	bl	8000494 <SH1107_Off>
	HAL_Delay(200);
 800046c:	20c8      	movs	r0, #200	; 0xc8
 800046e:	f000 ffbd 	bl	80013ec <HAL_Delay>
	SH1107_On();
 8000472:	f000 f803 	bl	800047c <SH1107_On>
}
 8000476:	bf00      	nop
 8000478:	bd80      	pop	{r7, pc}
	...

0800047c <SH1107_On>:

/***************************************************************************//**
* @brief SH1107 on with reset pin.
*
*******************************************************************************/
void SH1107_On(void) {
 800047c:	b580      	push	{r7, lr}
 800047e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RES_GPIO_Port, LCD_RES_Pin, GPIO_PIN_SET);
 8000480:	2201      	movs	r2, #1
 8000482:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000486:	4802      	ldr	r0, [pc, #8]	; (8000490 <SH1107_On+0x14>)
 8000488:	f001 fe47 	bl	800211a <HAL_GPIO_WritePin>
}
 800048c:	bf00      	nop
 800048e:	bd80      	pop	{r7, pc}
 8000490:	40010c00 	.word	0x40010c00

08000494 <SH1107_Off>:

/***************************************************************************//**
* @brief SH1107 off with reset pin.
*
*******************************************************************************/
void SH1107_Off(void) {
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RES_GPIO_Port, LCD_RES_Pin, GPIO_PIN_RESET);
 8000498:	2200      	movs	r2, #0
 800049a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800049e:	4802      	ldr	r0, [pc, #8]	; (80004a8 <SH1107_Off+0x14>)
 80004a0:	f001 fe3b 	bl	800211a <HAL_GPIO_WritePin>
}
 80004a4:	bf00      	nop
 80004a6:	bd80      	pop	{r7, pc}
 80004a8:	40010c00 	.word	0x40010c00

080004ac <SH1107_WriteCommand>:
* @brief  			Send a byte to the command register
*
* @param 	byte	data in byte format for writing
*
*******************************************************************************/
void SH1107_WriteCommand(uint8_t byte) {
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b086      	sub	sp, #24
 80004b0:	af04      	add	r7, sp, #16
 80004b2:	4603      	mov	r3, r0
 80004b4:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&SH1107_I2C_PORT, SH1107_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80004b6:	f04f 33ff 	mov.w	r3, #4294967295
 80004ba:	9302      	str	r3, [sp, #8]
 80004bc:	2301      	movs	r3, #1
 80004be:	9301      	str	r3, [sp, #4]
 80004c0:	1dfb      	adds	r3, r7, #7
 80004c2:	9300      	str	r3, [sp, #0]
 80004c4:	2301      	movs	r3, #1
 80004c6:	2200      	movs	r2, #0
 80004c8:	2178      	movs	r1, #120	; 0x78
 80004ca:	4803      	ldr	r0, [pc, #12]	; (80004d8 <SH1107_WriteCommand+0x2c>)
 80004cc:	f001 ff9a 	bl	8002404 <HAL_I2C_Mem_Write>
}
 80004d0:	bf00      	nop
 80004d2:	3708      	adds	r7, #8
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bd80      	pop	{r7, pc}
 80004d8:	200004a0 	.word	0x200004a0

080004dc <SH1107_WriteData>:
*
* @param 	buffer		data in pointer format for writing
* @param 	buff_size	data size in size_t format for writing
*
*******************************************************************************/
void SH1107_WriteData(uint8_t* buffer, size_t buff_size) {
 80004dc:	b580      	push	{r7, lr}
 80004de:	b086      	sub	sp, #24
 80004e0:	af04      	add	r7, sp, #16
 80004e2:	6078      	str	r0, [r7, #4]
 80004e4:	6039      	str	r1, [r7, #0]
	HAL_I2C_Mem_Write(&SH1107_I2C_PORT, SH1107_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80004e6:	683b      	ldr	r3, [r7, #0]
 80004e8:	b29b      	uxth	r3, r3
 80004ea:	f04f 32ff 	mov.w	r2, #4294967295
 80004ee:	9202      	str	r2, [sp, #8]
 80004f0:	9301      	str	r3, [sp, #4]
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	9300      	str	r3, [sp, #0]
 80004f6:	2301      	movs	r3, #1
 80004f8:	2240      	movs	r2, #64	; 0x40
 80004fa:	2178      	movs	r1, #120	; 0x78
 80004fc:	4803      	ldr	r0, [pc, #12]	; (800050c <SH1107_WriteData+0x30>)
 80004fe:	f001 ff81 	bl	8002404 <HAL_I2C_Mem_Write>
}
 8000502:	bf00      	nop
 8000504:	3708      	adds	r7, #8
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	200004a0 	.word	0x200004a0

08000510 <SH1107_ChangePageAddress>:
*
* @param 	add			page address in unsigned char format between 0~SH1107_PAGE
*
*******************************************************************************/
void SH1107_ChangePageAddress(unsigned char add)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b086      	sub	sp, #24
 8000514:	af04      	add	r7, sp, #16
 8000516:	4603      	mov	r3, r0
 8000518:	71fb      	strb	r3, [r7, #7]
	add=0xb0|add;
 800051a:	79fb      	ldrb	r3, [r7, #7]
 800051c:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8000520:	b2db      	uxtb	r3, r3
 8000522:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&SH1107_I2C_PORT, SH1107_I2C_ADDR, 0x80, 1, &add, 1, HAL_MAX_DELAY);
 8000524:	f04f 33ff 	mov.w	r3, #4294967295
 8000528:	9302      	str	r3, [sp, #8]
 800052a:	2301      	movs	r3, #1
 800052c:	9301      	str	r3, [sp, #4]
 800052e:	1dfb      	adds	r3, r7, #7
 8000530:	9300      	str	r3, [sp, #0]
 8000532:	2301      	movs	r3, #1
 8000534:	2280      	movs	r2, #128	; 0x80
 8000536:	2178      	movs	r1, #120	; 0x78
 8000538:	4803      	ldr	r0, [pc, #12]	; (8000548 <SH1107_ChangePageAddress+0x38>)
 800053a:	f001 ff63 	bl	8002404 <HAL_I2C_Mem_Write>
	return;
 800053e:	bf00      	nop
}
 8000540:	3708      	adds	r7, #8
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	200004a0 	.word	0x200004a0

0800054c <SH1107_ChangeColumnAddress>:
*
* @param 	add			Column address in unsigned char format between 0~SH1107_HEIGHT
*
*******************************************************************************/
void SH1107_ChangeColumnAddress(unsigned char add)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b084      	sub	sp, #16
 8000550:	af00      	add	r7, sp, #0
 8000552:	4603      	mov	r3, r0
 8000554:	71fb      	strb	r3, [r7, #7]
	uint8_t byte =(0x10|(add>>4));
 8000556:	79fb      	ldrb	r3, [r7, #7]
 8000558:	091b      	lsrs	r3, r3, #4
 800055a:	b2db      	uxtb	r3, r3
 800055c:	f043 0310 	orr.w	r3, r3, #16
 8000560:	73fb      	strb	r3, [r7, #15]
	SH1107_WriteCommand(byte);
 8000562:	7bfb      	ldrb	r3, [r7, #15]
 8000564:	4618      	mov	r0, r3
 8000566:	f7ff ffa1 	bl	80004ac <SH1107_WriteCommand>

	byte =(0x0f&add);
 800056a:	79fb      	ldrb	r3, [r7, #7]
 800056c:	f003 030f 	and.w	r3, r3, #15
 8000570:	73fb      	strb	r3, [r7, #15]
	SH1107_WriteCommand(byte);
 8000572:	7bfb      	ldrb	r3, [r7, #15]
 8000574:	4618      	mov	r0, r3
 8000576:	f7ff ff99 	bl	80004ac <SH1107_WriteCommand>

	return;
 800057a:	bf00      	nop
}
 800057c:	3710      	adds	r7, #16
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
	...

08000584 <SH1107_Init>:

/***************************************************************************//**
* @brief  				Initialize the oled screen
*
*******************************************************************************/
void SH1107_Init(void) {
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0

	/* Reset OLED */
	SH1107_Reset();
 8000588:	f7ff ff6c 	bl	8000464 <SH1107_Reset>
	/* Wait for the screen to boot */
	HAL_Delay(100);
 800058c:	2064      	movs	r0, #100	; 0x64
 800058e:	f000 ff2d 	bl	80013ec <HAL_Delay>

	SH1107_On();
 8000592:	f7ff ff73 	bl	800047c <SH1107_On>
	HAL_Delay(100);
 8000596:	2064      	movs	r0, #100	; 0x64
 8000598:	f000 ff28 	bl	80013ec <HAL_Delay>

	/* Init OLED */
	SH1107_WriteCommand(SH1107_DISPLAY_OFF); 			/* display off */
 800059c:	20ae      	movs	r0, #174	; 0xae
 800059e:	f7ff ff85 	bl	80004ac <SH1107_WriteCommand>

	SH1107_WriteCommand(SH1107_SET_DISPLAY_CLOCK); 		/* set display clock divide ratio/oscillator frequency */
 80005a2:	20d5      	movs	r0, #213	; 0xd5
 80005a4:	f7ff ff82 	bl	80004ac <SH1107_WriteCommand>
	SH1107_WriteCommand(0x51); 							/* set divide ratio F0 */
 80005a8:	2051      	movs	r0, #81	; 0x51
 80005aa:	f7ff ff7f 	bl	80004ac <SH1107_WriteCommand>

	SH1107_WriteCommand(SH1107_ADDR_MODE); 				/* Set Memory Addressing Mode */
 80005ae:	2020      	movs	r0, #32
 80005b0:	f7ff ff7c 	bl	80004ac <SH1107_WriteCommand>
	SH1107_WriteCommand(0x00); 							/* 00b,Horizontal Addressing Mode;
 80005b4:	2000      	movs	r0, #0
 80005b6:	f7ff ff79 	bl	80004ac <SH1107_WriteCommand>
														 * 01b,Vertical Addressing Mode;
														 * 10b,Page Addressing Mode (RESET);
														 * 11b,Invalid */

	SH1107_WriteCommand(SH1107_SET_MULTIPLEX_RATIO); 	/* set multiplex ratio(1 to 64) - CHECK */
 80005ba:	20a8      	movs	r0, #168	; 0xa8
 80005bc:	f7ff ff76 	bl	80004ac <SH1107_WriteCommand>
	SH1107_WriteCommand(0x3F);
 80005c0:	203f      	movs	r0, #63	; 0x3f
 80005c2:	f7ff ff73 	bl	80004ac <SH1107_WriteCommand>

	SH1107_WriteCommand(SH1107_SET_START_LINE); 		/* set start line address - CHECK */
 80005c6:	20dc      	movs	r0, #220	; 0xdc
 80005c8:	f7ff ff70 	bl	80004ac <SH1107_WriteCommand>
	SH1107_WriteCommand(0x00);
 80005cc:	2000      	movs	r0, #0
 80005ce:	f7ff ff6d 	bl	80004ac <SH1107_WriteCommand>

	SH1107_WriteCommand(SH1107_SET_DISPLAY_OFFSET); 	/* set display offset - CHECK */
 80005d2:	20d3      	movs	r0, #211	; 0xd3
 80005d4:	f7ff ff6a 	bl	80004ac <SH1107_WriteCommand>
	SH1107_WriteCommand(0x60); 							/* not offset */
 80005d8:	2060      	movs	r0, #96	; 0x60
 80005da:	f7ff ff67 	bl	80004ac <SH1107_WriteCommand>

	SH1107_WriteCommand(SH1107_SET_DCDC_SETTINGS); 		/* Set DC-DC Setting: */
 80005de:	20ad      	movs	r0, #173	; 0xad
 80005e0:	f7ff ff64 	bl	80004ac <SH1107_WriteCommand>
	SH1107_WriteCommand(0x80); 							/* Set external VPP */
 80005e4:	2080      	movs	r0, #128	; 0x80
 80005e6:	f7ff ff61 	bl	80004ac <SH1107_WriteCommand>

#ifdef SH1107_INVERSE_COLOR
	SH1107_WriteCommand(SH1107_INVERT_ON); 				/* set inverse color */
#else
	SH1107_WriteCommand(SH1107_INVERT_OFF); 			/* set normal color */
 80005ea:	20a6      	movs	r0, #166	; 0xa6
 80005ec:	f7ff ff5e 	bl	80004ac <SH1107_WriteCommand>
#endif

	SH1107_WriteCommand(SH1107_RAM_ON); 				/* 0xa4,Output follows RAM content;
 80005f0:	20a4      	movs	r0, #164	; 0xa4
 80005f2:	f7ff ff5b 	bl	80004ac <SH1107_WriteCommand>
														 * 0xa5,Output ignores RAM content */

#ifdef SH1107_MIRROR_HORIZ
	SH1107_WriteCommand(SH1107_SET_REMAP_L_TO_R); 		/* Mirror horizontally */
#else
	SH1107_WriteCommand(SH1107_SET_REMAP_R_TO_L); 		/* set segment re-map 0 to 127 - CHECK A1 */
 80005f6:	20a0      	movs	r0, #160	; 0xa0
 80005f8:	f7ff ff58 	bl	80004ac <SH1107_WriteCommand>
#endif

#ifdef SH1107_MIRROR_VERT
	SH1107_WriteCommand(SH1107_SET_REMAP_T_TO_D); 		/* Mirror vertically */
#else
	SH1107_WriteCommand(SH1107_SET_REMAP_D_TO_T); 		/* Set COM Output Scan Direction */
 80005fc:	20c0      	movs	r0, #192	; 0xc0
 80005fe:	f7ff ff55 	bl	80004ac <SH1107_WriteCommand>
#endif

	SH1107_WriteCommand(SH1107_SET_CONTRAST); 			/* set contrast control register - CHECK */
 8000602:	2081      	movs	r0, #129	; 0x81
 8000604:	f7ff ff52 	bl	80004ac <SH1107_WriteCommand>
	SH1107_WriteCommand(0xFF);
 8000608:	20ff      	movs	r0, #255	; 0xff
 800060a:	f7ff ff4f 	bl	80004ac <SH1107_WriteCommand>

	SH1107_WriteCommand(SH1107_SET_PRECHARGE_PERIOD); 	/* set pre-charge period */
 800060e:	20d9      	movs	r0, #217	; 0xd9
 8000610:	f7ff ff4c 	bl	80004ac <SH1107_WriteCommand>
	SH1107_WriteCommand(0x22);
 8000614:	2022      	movs	r0, #34	; 0x22
 8000616:	f7ff ff49 	bl	80004ac <SH1107_WriteCommand>

	SH1107_WriteCommand(SH1107_SET_VCOM_DESELECT); 		/* set vcomh */
 800061a:	20db      	movs	r0, #219	; 0xdb
 800061c:	f7ff ff46 	bl	80004ac <SH1107_WriteCommand>
	SH1107_WriteCommand(0x20); 							/* 0x20,0.77xVcc */
 8000620:	2020      	movs	r0, #32
 8000622:	f7ff ff43 	bl	80004ac <SH1107_WriteCommand>

	SH1107_WriteCommand(SH1107_DISPLAY_ON); 			/* turn on SH1107 panel */
 8000626:	20af      	movs	r0, #175	; 0xaf
 8000628:	f7ff ff40 	bl	80004ac <SH1107_WriteCommand>

	/* Clear screen */
	SH1107_Fill(Black);
 800062c:	2000      	movs	r0, #0
 800062e:	f000 f80f 	bl	8000650 <SH1107_Fill>

	/* Flush buffer to screen */
	SH1107_UpdateScreen();
 8000632:	f000 f825 	bl	8000680 <SH1107_UpdateScreen>

	/* Set default values for screen object */
	SH1107.CurrentX = 0;
 8000636:	4b05      	ldr	r3, [pc, #20]	; (800064c <SH1107_Init+0xc8>)
 8000638:	2200      	movs	r2, #0
 800063a:	801a      	strh	r2, [r3, #0]
	SH1107.CurrentY = 0;
 800063c:	4b03      	ldr	r3, [pc, #12]	; (800064c <SH1107_Init+0xc8>)
 800063e:	2200      	movs	r2, #0
 8000640:	805a      	strh	r2, [r3, #2]

	SH1107.Initialized = 1;
 8000642:	4b02      	ldr	r3, [pc, #8]	; (800064c <SH1107_Init+0xc8>)
 8000644:	2201      	movs	r2, #1
 8000646:	715a      	strb	r2, [r3, #5]

}
 8000648:	bf00      	nop
 800064a:	bd80      	pop	{r7, pc}
 800064c:	2000048c 	.word	0x2000048c

08000650 <SH1107_Fill>:
* @brief  			Fill the whole screen with the given color
*
* @param	color	The color of the lines. Color is enumeration with SH1107_COLOR_t. See sh1107.h for more details about color.
*
*******************************************************************************/
void SH1107_Fill(SH1107_COLOR_t color) {
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
 8000656:	4603      	mov	r3, r0
 8000658:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SH1107_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SH1107_Buffer));
 800065a:	79fb      	ldrb	r3, [r7, #7]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d101      	bne.n	8000664 <SH1107_Fill+0x14>
 8000660:	2300      	movs	r3, #0
 8000662:	e000      	b.n	8000666 <SH1107_Fill+0x16>
 8000664:	23ff      	movs	r3, #255	; 0xff
 8000666:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800066a:	4619      	mov	r1, r3
 800066c:	4803      	ldr	r0, [pc, #12]	; (800067c <SH1107_Fill+0x2c>)
 800066e:	f003 fb6d 	bl	8003d4c <memset>
}
 8000672:	bf00      	nop
 8000674:	3708      	adds	r7, #8
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	2000008c 	.word	0x2000008c

08000680 <SH1107_UpdateScreen>:

/***************************************************************************//**
* @brief  			Write the screen buffer with changed to the screen
*
*******************************************************************************/
void SH1107_UpdateScreen(void) {
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0

	unsigned char i;
	for(i=0;i<SH1107_PAGE;i++)
 8000686:	2300      	movs	r3, #0
 8000688:	71fb      	strb	r3, [r7, #7]
 800068a:	e011      	b.n	80006b0 <SH1107_UpdateScreen+0x30>
	{
		SH1107_ChangePageAddress(i);
 800068c:	79fb      	ldrb	r3, [r7, #7]
 800068e:	4618      	mov	r0, r3
 8000690:	f7ff ff3e 	bl	8000510 <SH1107_ChangePageAddress>
		SH1107_ChangeColumnAddress(0x00);
 8000694:	2000      	movs	r0, #0
 8000696:	f7ff ff59 	bl	800054c <SH1107_ChangeColumnAddress>
		SH1107_WriteData(&SH1107_Buffer[i*SH1107_WIDTH], SH1107_WIDTH);
 800069a:	79fb      	ldrb	r3, [r7, #7]
 800069c:	019b      	lsls	r3, r3, #6
 800069e:	4a08      	ldr	r2, [pc, #32]	; (80006c0 <SH1107_UpdateScreen+0x40>)
 80006a0:	4413      	add	r3, r2
 80006a2:	2140      	movs	r1, #64	; 0x40
 80006a4:	4618      	mov	r0, r3
 80006a6:	f7ff ff19 	bl	80004dc <SH1107_WriteData>
	for(i=0;i<SH1107_PAGE;i++)
 80006aa:	79fb      	ldrb	r3, [r7, #7]
 80006ac:	3301      	adds	r3, #1
 80006ae:	71fb      	strb	r3, [r7, #7]
 80006b0:	79fb      	ldrb	r3, [r7, #7]
 80006b2:	2b0f      	cmp	r3, #15
 80006b4:	d9ea      	bls.n	800068c <SH1107_UpdateScreen+0xc>
	}
	return;
 80006b6:	bf00      	nop
}
 80006b8:	3708      	adds	r7, #8
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	2000008c 	.word	0x2000008c

080006c4 <SPI_Write>:
/*============================================================================*/

/*============================================================================*/
/* Implementation of functions                                                */
/*============================================================================*/
HAL_StatusTypeDef SPI_Write(int id, uint8_t *pData, uint16_t Size){
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b086      	sub	sp, #24
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	60f8      	str	r0, [r7, #12]
 80006cc:	60b9      	str	r1, [r7, #8]
 80006ce:	4613      	mov	r3, r2
 80006d0:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef status = HAL_ERROR;
 80006d2:	2301      	movs	r3, #1
 80006d4:	75fb      	strb	r3, [r7, #23]
	//HAL_GPIO_TogglePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin);
	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin,0);
 80006d6:	2200      	movs	r2, #0
 80006d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006dc:	480c      	ldr	r0, [pc, #48]	; (8000710 <SPI_Write+0x4c>)
 80006de:	f001 fd1c 	bl	800211a <HAL_GPIO_WritePin>
	status = HAL_SPI_Transmit(&hspi3, pData, Size, 10000);
 80006e2:	88fa      	ldrh	r2, [r7, #6]
 80006e4:	f242 7310 	movw	r3, #10000	; 0x2710
 80006e8:	68b9      	ldr	r1, [r7, #8]
 80006ea:	480a      	ldr	r0, [pc, #40]	; (8000714 <SPI_Write+0x50>)
 80006ec:	f002 fe3e 	bl	800336c <HAL_SPI_Transmit>
 80006f0:	4603      	mov	r3, r0
 80006f2:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(20);
 80006f4:	2014      	movs	r0, #20
 80006f6:	f000 fe79 	bl	80013ec <HAL_Delay>
	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin,1);
 80006fa:	2201      	movs	r2, #1
 80006fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000700:	4803      	ldr	r0, [pc, #12]	; (8000710 <SPI_Write+0x4c>)
 8000702:	f001 fd0a 	bl	800211a <HAL_GPIO_WritePin>
	return status;
 8000706:	7dfb      	ldrb	r3, [r7, #23]
}
 8000708:	4618      	mov	r0, r3
 800070a:	3718      	adds	r7, #24
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	40010800 	.word	0x40010800
 8000714:	20002a5c 	.word	0x20002a5c

08000718 <AD529x_SetRegister>:


void AD529x_SetRegister(unsigned char command, unsigned short data)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b084      	sub	sp, #16
 800071c:	af00      	add	r7, sp, #0
 800071e:	4603      	mov	r3, r0
 8000720:	460a      	mov	r2, r1
 8000722:	71fb      	strb	r3, [r7, #7]
 8000724:	4613      	mov	r3, r2
 8000726:	80bb      	strh	r3, [r7, #4]
	unsigned char dataBuf[2] = {0, 0};
 8000728:	2300      	movs	r3, #0
 800072a:	81bb      	strh	r3, [r7, #12]
	data &= 0x3FF;
 800072c:	88bb      	ldrh	r3, [r7, #4]
 800072e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000732:	80bb      	strh	r3, [r7, #4]
	command &= 0x0F;
 8000734:	79fb      	ldrb	r3, [r7, #7]
 8000736:	f003 030f 	and.w	r3, r3, #15
 800073a:	71fb      	strb	r3, [r7, #7]
	dataBuf[0] = (command << 2) + ((data & 0x0300) >> 8);
 800073c:	79fb      	ldrb	r3, [r7, #7]
 800073e:	009b      	lsls	r3, r3, #2
 8000740:	b2da      	uxtb	r2, r3
 8000742:	88bb      	ldrh	r3, [r7, #4]
 8000744:	121b      	asrs	r3, r3, #8
 8000746:	b2db      	uxtb	r3, r3
 8000748:	f003 0303 	and.w	r3, r3, #3
 800074c:	b2db      	uxtb	r3, r3
 800074e:	4413      	add	r3, r2
 8000750:	b2db      	uxtb	r3, r3
 8000752:	733b      	strb	r3, [r7, #12]
	dataBuf[1] = (data & 0x00FF);
 8000754:	88bb      	ldrh	r3, [r7, #4]
 8000756:	b2db      	uxtb	r3, r3
 8000758:	737b      	strb	r3, [r7, #13]
	SPI_Write(AD529x_SLAVE_ID, dataBuf, 2);
 800075a:	f107 030c 	add.w	r3, r7, #12
 800075e:	2202      	movs	r2, #2
 8000760:	4619      	mov	r1, r3
 8000762:	2001      	movs	r0, #1
 8000764:	f7ff ffae 	bl	80006c4 <SPI_Write>

}
 8000768:	bf00      	nop
 800076a:	3710      	adds	r7, #16
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}

08000770 <AD529x_Init>:

}


char AD529x_Init()
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
	char status = -1;
 8000776:	23ff      	movs	r3, #255	; 0xff
 8000778:	71fb      	strb	r3, [r7, #7]
	//AD527x_RESET_OUT;
	//AD527x_RESET_HIGH;

	/* setup AD527x */
	/* Calibration mode set to normal mode. RDAC register write proction closed. */
	AD529x_SetRegister(AD529x_WRITE_CONTENT,(AD529x_C2 | AD529x_C1));
 800077a:	2106      	movs	r1, #6
 800077c:	2006      	movs	r0, #6
 800077e:	f7ff ffcb 	bl	8000718 <AD529x_SetRegister>

	return status;
 8000782:	79fb      	ldrb	r3, [r7, #7]
}
 8000784:	4618      	mov	r0, r3
 8000786:	3708      	adds	r7, #8
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}

0800078c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000792:	4b14      	ldr	r3, [pc, #80]	; (80007e4 <MX_DMA_Init+0x58>)
 8000794:	695b      	ldr	r3, [r3, #20]
 8000796:	4a13      	ldr	r2, [pc, #76]	; (80007e4 <MX_DMA_Init+0x58>)
 8000798:	f043 0301 	orr.w	r3, r3, #1
 800079c:	6153      	str	r3, [r2, #20]
 800079e:	4b11      	ldr	r3, [pc, #68]	; (80007e4 <MX_DMA_Init+0x58>)
 80007a0:	695b      	ldr	r3, [r3, #20]
 80007a2:	f003 0301 	and.w	r3, r3, #1
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80007aa:	2200      	movs	r2, #0
 80007ac:	2100      	movs	r1, #0
 80007ae:	200c      	movs	r0, #12
 80007b0:	f000 ff17 	bl	80015e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80007b4:	200c      	movs	r0, #12
 80007b6:	f000 ff30 	bl	800161a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80007ba:	2200      	movs	r2, #0
 80007bc:	2100      	movs	r1, #0
 80007be:	200d      	movs	r0, #13
 80007c0:	f000 ff0f 	bl	80015e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80007c4:	200d      	movs	r0, #13
 80007c6:	f000 ff28 	bl	800161a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80007ca:	2200      	movs	r2, #0
 80007cc:	2100      	movs	r1, #0
 80007ce:	200e      	movs	r0, #14
 80007d0:	f000 ff07 	bl	80015e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80007d4:	200e      	movs	r0, #14
 80007d6:	f000 ff20 	bl	800161a <HAL_NVIC_EnableIRQ>

}
 80007da:	bf00      	nop
 80007dc:	3708      	adds	r7, #8
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	40021000 	.word	0x40021000

080007e8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b088      	sub	sp, #32
 80007ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ee:	f107 0310 	add.w	r3, r7, #16
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
 80007f6:	605a      	str	r2, [r3, #4]
 80007f8:	609a      	str	r2, [r3, #8]
 80007fa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007fc:	4b52      	ldr	r3, [pc, #328]	; (8000948 <MX_GPIO_Init+0x160>)
 80007fe:	699b      	ldr	r3, [r3, #24]
 8000800:	4a51      	ldr	r2, [pc, #324]	; (8000948 <MX_GPIO_Init+0x160>)
 8000802:	f043 0310 	orr.w	r3, r3, #16
 8000806:	6193      	str	r3, [r2, #24]
 8000808:	4b4f      	ldr	r3, [pc, #316]	; (8000948 <MX_GPIO_Init+0x160>)
 800080a:	699b      	ldr	r3, [r3, #24]
 800080c:	f003 0310 	and.w	r3, r3, #16
 8000810:	60fb      	str	r3, [r7, #12]
 8000812:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000814:	4b4c      	ldr	r3, [pc, #304]	; (8000948 <MX_GPIO_Init+0x160>)
 8000816:	699b      	ldr	r3, [r3, #24]
 8000818:	4a4b      	ldr	r2, [pc, #300]	; (8000948 <MX_GPIO_Init+0x160>)
 800081a:	f043 0320 	orr.w	r3, r3, #32
 800081e:	6193      	str	r3, [r2, #24]
 8000820:	4b49      	ldr	r3, [pc, #292]	; (8000948 <MX_GPIO_Init+0x160>)
 8000822:	699b      	ldr	r3, [r3, #24]
 8000824:	f003 0320 	and.w	r3, r3, #32
 8000828:	60bb      	str	r3, [r7, #8]
 800082a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800082c:	4b46      	ldr	r3, [pc, #280]	; (8000948 <MX_GPIO_Init+0x160>)
 800082e:	699b      	ldr	r3, [r3, #24]
 8000830:	4a45      	ldr	r2, [pc, #276]	; (8000948 <MX_GPIO_Init+0x160>)
 8000832:	f043 0304 	orr.w	r3, r3, #4
 8000836:	6193      	str	r3, [r2, #24]
 8000838:	4b43      	ldr	r3, [pc, #268]	; (8000948 <MX_GPIO_Init+0x160>)
 800083a:	699b      	ldr	r3, [r3, #24]
 800083c:	f003 0304 	and.w	r3, r3, #4
 8000840:	607b      	str	r3, [r7, #4]
 8000842:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000844:	4b40      	ldr	r3, [pc, #256]	; (8000948 <MX_GPIO_Init+0x160>)
 8000846:	699b      	ldr	r3, [r3, #24]
 8000848:	4a3f      	ldr	r2, [pc, #252]	; (8000948 <MX_GPIO_Init+0x160>)
 800084a:	f043 0308 	orr.w	r3, r3, #8
 800084e:	6193      	str	r3, [r2, #24]
 8000850:	4b3d      	ldr	r3, [pc, #244]	; (8000948 <MX_GPIO_Init+0x160>)
 8000852:	699b      	ldr	r3, [r3, #24]
 8000854:	f003 0308 	and.w	r3, r3, #8
 8000858:	603b      	str	r3, [r7, #0]
 800085a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AIN0_MODE_SEL_Pin|AIN1_MODE_SEL_Pin|AIN2_MODE_SEL_Pin|AIN3_MODE_SEL_Pin, GPIO_PIN_SET);
 800085c:	2201      	movs	r2, #1
 800085e:	210f      	movs	r1, #15
 8000860:	483a      	ldr	r0, [pc, #232]	; (800094c <MX_GPIO_Init+0x164>)
 8000862:	f001 fc5a 	bl	800211a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TP1_Pin|TP2_Pin|EXT_LED1_Pin|SPI3_CS_Pin, GPIO_PIN_RESET);
 8000866:	2200      	movs	r2, #0
 8000868:	f248 110c 	movw	r1, #33036	; 0x810c
 800086c:	4838      	ldr	r0, [pc, #224]	; (8000950 <MX_GPIO_Init+0x168>)
 800086e:	f001 fc54 	bl	800211a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DAC_20mA_SEL_Pin|DAC_40mA_SEL_Pin|DAC_100mA_SEL_Pin|EXT_LED2_Pin
 8000872:	2200      	movs	r2, #0
 8000874:	f649 5107 	movw	r1, #40199	; 0x9d07
 8000878:	4836      	ldr	r0, [pc, #216]	; (8000954 <MX_GPIO_Init+0x16c>)
 800087a:	f001 fc4e 	bl	800211a <HAL_GPIO_WritePin>
                          |EXT_LED3_Pin|EXT_LED4_Pin|EXP_LATCH_Pin|LCD_RES_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EXP_CLK_Pin|EXP_OEN_Pin|EXP_DOUT_Pin|INT_LED1_Pin
 800087e:	2200      	movs	r2, #0
 8000880:	f44f 51ce 	mov.w	r1, #6592	; 0x19c0
 8000884:	4831      	ldr	r0, [pc, #196]	; (800094c <MX_GPIO_Init+0x164>)
 8000886:	f001 fc48 	bl	800211a <HAL_GPIO_WritePin>
                          |INT_LED2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = AIN0_MODE_SEL_Pin|AIN1_MODE_SEL_Pin|AIN2_MODE_SEL_Pin|AIN3_MODE_SEL_Pin
 800088a:	f641 13cf 	movw	r3, #6607	; 0x19cf
 800088e:	613b      	str	r3, [r7, #16]
                          |EXP_CLK_Pin|EXP_OEN_Pin|EXP_DOUT_Pin|INT_LED1_Pin
                          |INT_LED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000890:	2301      	movs	r3, #1
 8000892:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000898:	2302      	movs	r3, #2
 800089a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800089c:	f107 0310 	add.w	r3, r7, #16
 80008a0:	4619      	mov	r1, r3
 80008a2:	482a      	ldr	r0, [pc, #168]	; (800094c <MX_GPIO_Init+0x164>)
 80008a4:	f001 fa8e 	bl	8001dc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = TP1_Pin|TP2_Pin|EXT_LED1_Pin|SPI3_CS_Pin;
 80008a8:	f248 130c 	movw	r3, #33036	; 0x810c
 80008ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ae:	2301      	movs	r3, #1
 80008b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b6:	2302      	movs	r3, #2
 80008b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ba:	f107 0310 	add.w	r3, r7, #16
 80008be:	4619      	mov	r1, r3
 80008c0:	4823      	ldr	r0, [pc, #140]	; (8000950 <MX_GPIO_Init+0x168>)
 80008c2:	f001 fa7f 	bl	8001dc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STM_MODE_SEL_Pin;
 80008c6:	2320      	movs	r3, #32
 80008c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008ca:	4b23      	ldr	r3, [pc, #140]	; (8000958 <MX_GPIO_Init+0x170>)
 80008cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(STM_MODE_SEL_GPIO_Port, &GPIO_InitStruct);
 80008d2:	f107 0310 	add.w	r3, r7, #16
 80008d6:	4619      	mov	r1, r3
 80008d8:	481c      	ldr	r0, [pc, #112]	; (800094c <MX_GPIO_Init+0x164>)
 80008da:	f001 fa73 	bl	8001dc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DAC_20mA_SEL_Pin|DAC_40mA_SEL_Pin|DAC_100mA_SEL_Pin|EXT_LED2_Pin
 80008de:	f649 5307 	movw	r3, #40199	; 0x9d07
 80008e2:	613b      	str	r3, [r7, #16]
                          |EXT_LED3_Pin|EXT_LED4_Pin|EXP_LATCH_Pin|LCD_RES_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e4:	2301      	movs	r3, #1
 80008e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	2300      	movs	r3, #0
 80008ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ec:	2302      	movs	r3, #2
 80008ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008f0:	f107 0310 	add.w	r3, r7, #16
 80008f4:	4619      	mov	r1, r3
 80008f6:	4817      	ldr	r0, [pc, #92]	; (8000954 <MX_GPIO_Init+0x16c>)
 80008f8:	f001 fa64 	bl	8001dc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EXP_DIN_Pin;
 80008fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000900:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000902:	2300      	movs	r3, #0
 8000904:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(EXP_DIN_GPIO_Port, &GPIO_InitStruct);
 800090a:	f107 0310 	add.w	r3, r7, #16
 800090e:	4619      	mov	r1, r3
 8000910:	480e      	ldr	r0, [pc, #56]	; (800094c <MX_GPIO_Init+0x164>)
 8000912:	f001 fa57 	bl	8001dc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = EXT_BTN2_Pin|EXT_BTN1_Pin;
 8000916:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800091a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800091c:	2300      	movs	r3, #0
 800091e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000924:	f107 0310 	add.w	r3, r7, #16
 8000928:	4619      	mov	r1, r3
 800092a:	4809      	ldr	r0, [pc, #36]	; (8000950 <MX_GPIO_Init+0x168>)
 800092c:	f001 fa4a 	bl	8001dc4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000930:	2200      	movs	r2, #0
 8000932:	2100      	movs	r1, #0
 8000934:	2017      	movs	r0, #23
 8000936:	f000 fe54 	bl	80015e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800093a:	2017      	movs	r0, #23
 800093c:	f000 fe6d 	bl	800161a <HAL_NVIC_EnableIRQ>

}
 8000940:	bf00      	nop
 8000942:	3720      	adds	r7, #32
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	40021000 	.word	0x40021000
 800094c:	40011000 	.word	0x40011000
 8000950:	40010800 	.word	0x40010800
 8000954:	40010c00 	.word	0x40010c00
 8000958:	10110000 	.word	0x10110000

0800095c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000960:	4b12      	ldr	r3, [pc, #72]	; (80009ac <MX_I2C1_Init+0x50>)
 8000962:	4a13      	ldr	r2, [pc, #76]	; (80009b0 <MX_I2C1_Init+0x54>)
 8000964:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000966:	4b11      	ldr	r3, [pc, #68]	; (80009ac <MX_I2C1_Init+0x50>)
 8000968:	4a12      	ldr	r2, [pc, #72]	; (80009b4 <MX_I2C1_Init+0x58>)
 800096a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800096c:	4b0f      	ldr	r3, [pc, #60]	; (80009ac <MX_I2C1_Init+0x50>)
 800096e:	2200      	movs	r2, #0
 8000970:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000972:	4b0e      	ldr	r3, [pc, #56]	; (80009ac <MX_I2C1_Init+0x50>)
 8000974:	2200      	movs	r2, #0
 8000976:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000978:	4b0c      	ldr	r3, [pc, #48]	; (80009ac <MX_I2C1_Init+0x50>)
 800097a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800097e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000980:	4b0a      	ldr	r3, [pc, #40]	; (80009ac <MX_I2C1_Init+0x50>)
 8000982:	2200      	movs	r2, #0
 8000984:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000986:	4b09      	ldr	r3, [pc, #36]	; (80009ac <MX_I2C1_Init+0x50>)
 8000988:	2200      	movs	r2, #0
 800098a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800098c:	4b07      	ldr	r3, [pc, #28]	; (80009ac <MX_I2C1_Init+0x50>)
 800098e:	2200      	movs	r2, #0
 8000990:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000992:	4b06      	ldr	r3, [pc, #24]	; (80009ac <MX_I2C1_Init+0x50>)
 8000994:	2200      	movs	r2, #0
 8000996:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000998:	4804      	ldr	r0, [pc, #16]	; (80009ac <MX_I2C1_Init+0x50>)
 800099a:	f001 fbef 	bl	800217c <HAL_I2C_Init>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80009a4:	f000 f928 	bl	8000bf8 <Error_Handler>
  }

}
 80009a8:	bf00      	nop
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	200004a0 	.word	0x200004a0
 80009b0:	40005400 	.word	0x40005400
 80009b4:	00061a80 	.word	0x00061a80

080009b8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b088      	sub	sp, #32
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c0:	f107 0310 	add.w	r3, r7, #16
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	605a      	str	r2, [r3, #4]
 80009ca:	609a      	str	r2, [r3, #8]
 80009cc:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	4a15      	ldr	r2, [pc, #84]	; (8000a28 <HAL_I2C_MspInit+0x70>)
 80009d4:	4293      	cmp	r3, r2
 80009d6:	d123      	bne.n	8000a20 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009d8:	4b14      	ldr	r3, [pc, #80]	; (8000a2c <HAL_I2C_MspInit+0x74>)
 80009da:	699b      	ldr	r3, [r3, #24]
 80009dc:	4a13      	ldr	r2, [pc, #76]	; (8000a2c <HAL_I2C_MspInit+0x74>)
 80009de:	f043 0308 	orr.w	r3, r3, #8
 80009e2:	6193      	str	r3, [r2, #24]
 80009e4:	4b11      	ldr	r3, [pc, #68]	; (8000a2c <HAL_I2C_MspInit+0x74>)
 80009e6:	699b      	ldr	r3, [r3, #24]
 80009e8:	f003 0308 	and.w	r3, r3, #8
 80009ec:	60fb      	str	r3, [r7, #12]
 80009ee:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 80009f0:	23c0      	movs	r3, #192	; 0xc0
 80009f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009f4:	2312      	movs	r3, #18
 80009f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009f8:	2303      	movs	r3, #3
 80009fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009fc:	f107 0310 	add.w	r3, r7, #16
 8000a00:	4619      	mov	r1, r3
 8000a02:	480b      	ldr	r0, [pc, #44]	; (8000a30 <HAL_I2C_MspInit+0x78>)
 8000a04:	f001 f9de 	bl	8001dc4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a08:	4b08      	ldr	r3, [pc, #32]	; (8000a2c <HAL_I2C_MspInit+0x74>)
 8000a0a:	69db      	ldr	r3, [r3, #28]
 8000a0c:	4a07      	ldr	r2, [pc, #28]	; (8000a2c <HAL_I2C_MspInit+0x74>)
 8000a0e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a12:	61d3      	str	r3, [r2, #28]
 8000a14:	4b05      	ldr	r3, [pc, #20]	; (8000a2c <HAL_I2C_MspInit+0x74>)
 8000a16:	69db      	ldr	r3, [r3, #28]
 8000a18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a1c:	60bb      	str	r3, [r7, #8]
 8000a1e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000a20:	bf00      	nop
 8000a22:	3720      	adds	r7, #32
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	40005400 	.word	0x40005400
 8000a2c:	40021000 	.word	0x40021000
 8000a30:	40010c00 	.word	0x40010c00

08000a34 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b086      	sub	sp, #24
 8000a38:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000a3a:	f000 fc75 	bl	8001328 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000a3e:	f000 f86d 	bl	8000b1c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000a42:	f7ff fed1 	bl	80007e8 <MX_GPIO_Init>
	MX_DMA_Init();
 8000a46:	f7ff fea1 	bl	800078c <MX_DMA_Init>
	MX_USART1_UART_Init();
 8000a4a:	f000 fb69 	bl	8001120 <MX_USART1_UART_Init>
	MX_SPI1_Init();
 8000a4e:	f000 f8df 	bl	8000c10 <MX_SPI1_Init>
	MX_SPI2_Init();
 8000a52:	f000 f911 	bl	8000c78 <MX_SPI2_Init>
	MX_SPI3_Init();
 8000a56:	f000 f947 	bl	8000ce8 <MX_SPI3_Init>
	MX_I2C1_Init();
 8000a5a:	f7ff ff7f 	bl	800095c <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */
	AD529x_Init();
 8000a5e:	f7ff fe87 	bl	8000770 <AD529x_Init>
	SH1107_Init();
 8000a62:	f7ff fd8f 	bl	8000584 <SH1107_Init>
	LP55231_Init();
 8000a66:	f7ff fc01 	bl	800026c <LP55231_Init>
	memset(gSPI_Tx_Buf,0,SPI_TX_BUF_SIZE);
 8000a6a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a6e:	2100      	movs	r1, #0
 8000a70:	4825      	ldr	r0, [pc, #148]	; (8000b08 <main+0xd4>)
 8000a72:	f003 f96b 	bl	8003d4c <memset>
	//HAL_SPI_TransmitReceive_DMA(&hspi1,gSPI_Tx_Buf, gSPI_Rx_Buf, SPI_TX_BUF_SIZE);
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	dbprintf("Rota SPI Test Application");
 8000a76:	4825      	ldr	r0, [pc, #148]	; (8000b0c <main+0xd8>)
 8000a78:	f000 fc1e 	bl	80012b8 <dbprintf>
	uint8_t output_count = 0;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	72fb      	strb	r3, [r7, #11]
		//dbprintf("Output Value: %d",output);
		HAL_GPIO_TogglePin(INT_LED1_GPIO_Port, INT_LED1_Pin);
	}

#endif
	uint8_t current = 0, previous = 0;
 8000a80:	2300      	movs	r3, #0
 8000a82:	72bb      	strb	r3, [r7, #10]
 8000a84:	2300      	movs	r3, #0
 8000a86:	727b      	strb	r3, [r7, #9]
	uint32_t next = HAL_GetTick()+1000;
 8000a88:	f000 fca6 	bl	80013d8 <HAL_GetTick>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000a92:	607b      	str	r3, [r7, #4]
	while(1){
#if 1
		for(int i =1 ;i<4;i++){
 8000a94:	2301      	movs	r3, #1
 8000a96:	60fb      	str	r3, [r7, #12]
 8000a98:	e00c      	b.n	8000ab4 <main+0x80>
			LP55231_SetColor(i,0x05FF0000);
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	b2db      	uxtb	r3, r3
 8000a9e:	491c      	ldr	r1, [pc, #112]	; (8000b10 <main+0xdc>)
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f7ff fc89 	bl	80003b8 <LP55231_SetColor>
			HAL_Delay(1000);
 8000aa6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000aaa:	f000 fc9f 	bl	80013ec <HAL_Delay>
		for(int i =1 ;i<4;i++){
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	3301      	adds	r3, #1
 8000ab2:	60fb      	str	r3, [r7, #12]
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	2b03      	cmp	r3, #3
 8000ab8:	ddef      	ble.n	8000a9a <main+0x66>
		}
		for(int i =1 ;i<4;i++){
 8000aba:	2301      	movs	r3, #1
 8000abc:	617b      	str	r3, [r7, #20]
 8000abe:	e00c      	b.n	8000ada <main+0xa6>
			LP55231_SetColor(i,0x0500FF00);
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	b2db      	uxtb	r3, r3
 8000ac4:	4913      	ldr	r1, [pc, #76]	; (8000b14 <main+0xe0>)
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f7ff fc76 	bl	80003b8 <LP55231_SetColor>
			HAL_Delay(1000);
 8000acc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ad0:	f000 fc8c 	bl	80013ec <HAL_Delay>
		for(int i =1 ;i<4;i++){
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	3301      	adds	r3, #1
 8000ad8:	617b      	str	r3, [r7, #20]
 8000ada:	697b      	ldr	r3, [r7, #20]
 8000adc:	2b03      	cmp	r3, #3
 8000ade:	ddef      	ble.n	8000ac0 <main+0x8c>
		}

		for(int i =1 ;i<4;i++){
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	613b      	str	r3, [r7, #16]
 8000ae4:	e00c      	b.n	8000b00 <main+0xcc>
			LP55231_SetColor(i,0x050000FF);
 8000ae6:	693b      	ldr	r3, [r7, #16]
 8000ae8:	b2db      	uxtb	r3, r3
 8000aea:	490b      	ldr	r1, [pc, #44]	; (8000b18 <main+0xe4>)
 8000aec:	4618      	mov	r0, r3
 8000aee:	f7ff fc63 	bl	80003b8 <LP55231_SetColor>
			HAL_Delay(1000);
 8000af2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000af6:	f000 fc79 	bl	80013ec <HAL_Delay>
		for(int i =1 ;i<4;i++){
 8000afa:	693b      	ldr	r3, [r7, #16]
 8000afc:	3301      	adds	r3, #1
 8000afe:	613b      	str	r3, [r7, #16]
 8000b00:	693b      	ldr	r3, [r7, #16]
 8000b02:	2b03      	cmp	r3, #3
 8000b04:	ddef      	ble.n	8000ae6 <main+0xb2>
		for(int i =1 ;i<4;i++){
 8000b06:	e7c5      	b.n	8000a94 <main+0x60>
 8000b08:	200004f4 	.word	0x200004f4
 8000b0c:	08004598 	.word	0x08004598
 8000b10:	05ff0000 	.word	0x05ff0000
 8000b14:	0500ff00 	.word	0x0500ff00
 8000b18:	050000ff 	.word	0x050000ff

08000b1c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b090      	sub	sp, #64	; 0x40
 8000b20:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b22:	f107 0318 	add.w	r3, r7, #24
 8000b26:	2228      	movs	r2, #40	; 0x28
 8000b28:	2100      	movs	r1, #0
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f003 f90e 	bl	8003d4c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b30:	1d3b      	adds	r3, r7, #4
 8000b32:	2200      	movs	r2, #0
 8000b34:	601a      	str	r2, [r3, #0]
 8000b36:	605a      	str	r2, [r3, #4]
 8000b38:	609a      	str	r2, [r3, #8]
 8000b3a:	60da      	str	r2, [r3, #12]
 8000b3c:	611a      	str	r2, [r3, #16]

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b42:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b46:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b50:	2302      	movs	r3, #2
 8000b52:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b54:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b58:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000b5a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b60:	f107 0318 	add.w	r3, r7, #24
 8000b64:	4618      	mov	r0, r3
 8000b66:	f001 ff63 	bl	8002a30 <HAL_RCC_OscConfig>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <SystemClock_Config+0x58>
	{
		Error_Handler();
 8000b70:	f000 f842 	bl	8000bf8 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b74:	230f      	movs	r3, #15
 8000b76:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b78:	2302      	movs	r3, #2
 8000b7a:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b84:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b86:	2300      	movs	r3, #0
 8000b88:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b8a:	1d3b      	adds	r3, r7, #4
 8000b8c:	2101      	movs	r1, #1
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f002 f9ce 	bl	8002f30 <HAL_RCC_ClockConfig>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <SystemClock_Config+0x82>
	{
		Error_Handler();
 8000b9a:	f000 f82d 	bl	8000bf8 <Error_Handler>
	}
}
 8000b9e:	bf00      	nop
 8000ba0:	3740      	adds	r7, #64	; 0x40
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
	...

08000ba8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == STM_MODE_SEL_Pin){
 8000bb2:	88fb      	ldrh	r3, [r7, #6]
 8000bb4:	2b20      	cmp	r3, #32
 8000bb6:	d113      	bne.n	8000be0 <HAL_GPIO_EXTI_Callback+0x38>
		if(HAL_GPIO_ReadPin(STM_MODE_SEL_GPIO_Port, STM_MODE_SEL_Pin)){
 8000bb8:	2120      	movs	r1, #32
 8000bba:	480b      	ldr	r0, [pc, #44]	; (8000be8 <HAL_GPIO_EXTI_Callback+0x40>)
 8000bbc:	f001 fa96 	bl	80020ec <HAL_GPIO_ReadPin>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d006      	beq.n	8000bd4 <HAL_GPIO_EXTI_Callback+0x2c>
			g_comms_mode = COMMS_MODE_PDIO;
 8000bc6:	4b09      	ldr	r3, [pc, #36]	; (8000bec <HAL_GPIO_EXTI_Callback+0x44>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	701a      	strb	r2, [r3, #0]
			dbprintf("PDIO Mode");
 8000bcc:	4808      	ldr	r0, [pc, #32]	; (8000bf0 <HAL_GPIO_EXTI_Callback+0x48>)
 8000bce:	f000 fb73 	bl	80012b8 <dbprintf>
		}else{
			g_comms_mode = COMMS_MODE_CONF;
			dbprintf("CONF Mode");
		}
	}
}
 8000bd2:	e005      	b.n	8000be0 <HAL_GPIO_EXTI_Callback+0x38>
			g_comms_mode = COMMS_MODE_CONF;
 8000bd4:	4b05      	ldr	r3, [pc, #20]	; (8000bec <HAL_GPIO_EXTI_Callback+0x44>)
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	701a      	strb	r2, [r3, #0]
			dbprintf("CONF Mode");
 8000bda:	4806      	ldr	r0, [pc, #24]	; (8000bf4 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000bdc:	f000 fb6c 	bl	80012b8 <dbprintf>
}
 8000be0:	bf00      	nop
 8000be2:	3708      	adds	r7, #8
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	40011000 	.word	0x40011000
 8000bec:	20000492 	.word	0x20000492
 8000bf0:	080045b4 	.word	0x080045b4
 8000bf4:	080045c0 	.word	0x080045c0

08000bf8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	dbprintf("%s",__func__);
 8000bfc:	4902      	ldr	r1, [pc, #8]	; (8000c08 <Error_Handler+0x10>)
 8000bfe:	4803      	ldr	r0, [pc, #12]	; (8000c0c <Error_Handler+0x14>)
 8000c00:	f000 fb5a 	bl	80012b8 <dbprintf>
	/* USER CODE END Error_Handler_Debug */
}
 8000c04:	bf00      	nop
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	080045e8 	.word	0x080045e8
 8000c0c:	080045cc 	.word	0x080045cc

08000c10 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000c14:	4b16      	ldr	r3, [pc, #88]	; (8000c70 <MX_SPI1_Init+0x60>)
 8000c16:	4a17      	ldr	r2, [pc, #92]	; (8000c74 <MX_SPI1_Init+0x64>)
 8000c18:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000c1a:	4b15      	ldr	r3, [pc, #84]	; (8000c70 <MX_SPI1_Init+0x60>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c20:	4b13      	ldr	r3, [pc, #76]	; (8000c70 <MX_SPI1_Init+0x60>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c26:	4b12      	ldr	r3, [pc, #72]	; (8000c70 <MX_SPI1_Init+0x60>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c2c:	4b10      	ldr	r3, [pc, #64]	; (8000c70 <MX_SPI1_Init+0x60>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c32:	4b0f      	ldr	r3, [pc, #60]	; (8000c70 <MX_SPI1_Init+0x60>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8000c38:	4b0d      	ldr	r3, [pc, #52]	; (8000c70 <MX_SPI1_Init+0x60>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000c3e:	4b0c      	ldr	r3, [pc, #48]	; (8000c70 <MX_SPI1_Init+0x60>)
 8000c40:	2208      	movs	r2, #8
 8000c42:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c44:	4b0a      	ldr	r3, [pc, #40]	; (8000c70 <MX_SPI1_Init+0x60>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c4a:	4b09      	ldr	r3, [pc, #36]	; (8000c70 <MX_SPI1_Init+0x60>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c50:	4b07      	ldr	r3, [pc, #28]	; (8000c70 <MX_SPI1_Init+0x60>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000c56:	4b06      	ldr	r3, [pc, #24]	; (8000c70 <MX_SPI1_Init+0x60>)
 8000c58:	220a      	movs	r2, #10
 8000c5a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c5c:	4804      	ldr	r0, [pc, #16]	; (8000c70 <MX_SPI1_Init+0x60>)
 8000c5e:	f002 fb01 	bl	8003264 <HAL_SPI_Init>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_SPI1_Init+0x5c>
  {
    Error_Handler();
 8000c68:	f7ff ffc6 	bl	8000bf8 <Error_Handler>
  }

}
 8000c6c:	bf00      	nop
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	20002ab4 	.word	0x20002ab4
 8000c74:	40013000 	.word	0x40013000

08000c78 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8000c7c:	4b18      	ldr	r3, [pc, #96]	; (8000ce0 <MX_SPI2_Init+0x68>)
 8000c7e:	4a19      	ldr	r2, [pc, #100]	; (8000ce4 <MX_SPI2_Init+0x6c>)
 8000c80:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000c82:	4b17      	ldr	r3, [pc, #92]	; (8000ce0 <MX_SPI2_Init+0x68>)
 8000c84:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c88:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000c8a:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <MX_SPI2_Init+0x68>)
 8000c8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c90:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c92:	4b13      	ldr	r3, [pc, #76]	; (8000ce0 <MX_SPI2_Init+0x68>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000c98:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <MX_SPI2_Init+0x68>)
 8000c9a:	2202      	movs	r2, #2
 8000c9c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c9e:	4b10      	ldr	r3, [pc, #64]	; (8000ce0 <MX_SPI2_Init+0x68>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000ca4:	4b0e      	ldr	r3, [pc, #56]	; (8000ce0 <MX_SPI2_Init+0x68>)
 8000ca6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000caa:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000cac:	4b0c      	ldr	r3, [pc, #48]	; (8000ce0 <MX_SPI2_Init+0x68>)
 8000cae:	2220      	movs	r2, #32
 8000cb0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cb2:	4b0b      	ldr	r3, [pc, #44]	; (8000ce0 <MX_SPI2_Init+0x68>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cb8:	4b09      	ldr	r3, [pc, #36]	; (8000ce0 <MX_SPI2_Init+0x68>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cbe:	4b08      	ldr	r3, [pc, #32]	; (8000ce0 <MX_SPI2_Init+0x68>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000cc4:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <MX_SPI2_Init+0x68>)
 8000cc6:	220a      	movs	r2, #10
 8000cc8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000cca:	4805      	ldr	r0, [pc, #20]	; (8000ce0 <MX_SPI2_Init+0x68>)
 8000ccc:	f002 faca 	bl	8003264 <HAL_SPI_Init>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 8000cd6:	f7ff ff8f 	bl	8000bf8 <Error_Handler>
  }

}
 8000cda:	bf00      	nop
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	20002a04 	.word	0x20002a04
 8000ce4:	40003800 	.word	0x40003800

08000ce8 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8000cec:	4b17      	ldr	r3, [pc, #92]	; (8000d4c <MX_SPI3_Init+0x64>)
 8000cee:	4a18      	ldr	r2, [pc, #96]	; (8000d50 <MX_SPI3_Init+0x68>)
 8000cf0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000cf2:	4b16      	ldr	r3, [pc, #88]	; (8000d4c <MX_SPI3_Init+0x64>)
 8000cf4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000cf8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000cfa:	4b14      	ldr	r3, [pc, #80]	; (8000d4c <MX_SPI3_Init+0x64>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d00:	4b12      	ldr	r3, [pc, #72]	; (8000d4c <MX_SPI3_Init+0x64>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d06:	4b11      	ldr	r3, [pc, #68]	; (8000d4c <MX_SPI3_Init+0x64>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d0c:	4b0f      	ldr	r3, [pc, #60]	; (8000d4c <MX_SPI3_Init+0x64>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000d12:	4b0e      	ldr	r3, [pc, #56]	; (8000d4c <MX_SPI3_Init+0x64>)
 8000d14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d18:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <MX_SPI3_Init+0x64>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d20:	4b0a      	ldr	r3, [pc, #40]	; (8000d4c <MX_SPI3_Init+0x64>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d26:	4b09      	ldr	r3, [pc, #36]	; (8000d4c <MX_SPI3_Init+0x64>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d2c:	4b07      	ldr	r3, [pc, #28]	; (8000d4c <MX_SPI3_Init+0x64>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000d32:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <MX_SPI3_Init+0x64>)
 8000d34:	220a      	movs	r2, #10
 8000d36:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000d38:	4804      	ldr	r0, [pc, #16]	; (8000d4c <MX_SPI3_Init+0x64>)
 8000d3a:	f002 fa93 	bl	8003264 <HAL_SPI_Init>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000d44:	f7ff ff58 	bl	8000bf8 <Error_Handler>
  }

}
 8000d48:	bf00      	nop
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	20002a5c 	.word	0x20002a5c
 8000d50:	40003c00 	.word	0x40003c00

08000d54 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b08c      	sub	sp, #48	; 0x30
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5c:	f107 0320 	add.w	r3, r7, #32
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	605a      	str	r2, [r3, #4]
 8000d66:	609a      	str	r2, [r3, #8]
 8000d68:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4a7e      	ldr	r2, [pc, #504]	; (8000f68 <HAL_SPI_MspInit+0x214>)
 8000d70:	4293      	cmp	r3, r2
 8000d72:	f040 8087 	bne.w	8000e84 <HAL_SPI_MspInit+0x130>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d76:	4b7d      	ldr	r3, [pc, #500]	; (8000f6c <HAL_SPI_MspInit+0x218>)
 8000d78:	699b      	ldr	r3, [r3, #24]
 8000d7a:	4a7c      	ldr	r2, [pc, #496]	; (8000f6c <HAL_SPI_MspInit+0x218>)
 8000d7c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d80:	6193      	str	r3, [r2, #24]
 8000d82:	4b7a      	ldr	r3, [pc, #488]	; (8000f6c <HAL_SPI_MspInit+0x218>)
 8000d84:	699b      	ldr	r3, [r3, #24]
 8000d86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d8a:	61fb      	str	r3, [r7, #28]
 8000d8c:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d8e:	4b77      	ldr	r3, [pc, #476]	; (8000f6c <HAL_SPI_MspInit+0x218>)
 8000d90:	699b      	ldr	r3, [r3, #24]
 8000d92:	4a76      	ldr	r2, [pc, #472]	; (8000f6c <HAL_SPI_MspInit+0x218>)
 8000d94:	f043 0304 	orr.w	r3, r3, #4
 8000d98:	6193      	str	r3, [r2, #24]
 8000d9a:	4b74      	ldr	r3, [pc, #464]	; (8000f6c <HAL_SPI_MspInit+0x218>)
 8000d9c:	699b      	ldr	r3, [r3, #24]
 8000d9e:	f003 0304 	and.w	r3, r3, #4
 8000da2:	61bb      	str	r3, [r7, #24]
 8000da4:	69bb      	ldr	r3, [r7, #24]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8000da6:	23b0      	movs	r3, #176	; 0xb0
 8000da8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000daa:	2300      	movs	r3, #0
 8000dac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dae:	2300      	movs	r3, #0
 8000db0:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db2:	f107 0320 	add.w	r3, r7, #32
 8000db6:	4619      	mov	r1, r3
 8000db8:	486d      	ldr	r0, [pc, #436]	; (8000f70 <HAL_SPI_MspInit+0x21c>)
 8000dba:	f001 f803 	bl	8001dc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000dbe:	2340      	movs	r3, #64	; 0x40
 8000dc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dc6:	2303      	movs	r3, #3
 8000dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dca:	f107 0320 	add.w	r3, r7, #32
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4867      	ldr	r0, [pc, #412]	; (8000f70 <HAL_SPI_MspInit+0x21c>)
 8000dd2:	f000 fff7 	bl	8001dc4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8000dd6:	4b67      	ldr	r3, [pc, #412]	; (8000f74 <HAL_SPI_MspInit+0x220>)
 8000dd8:	4a67      	ldr	r2, [pc, #412]	; (8000f78 <HAL_SPI_MspInit+0x224>)
 8000dda:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ddc:	4b65      	ldr	r3, [pc, #404]	; (8000f74 <HAL_SPI_MspInit+0x220>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000de2:	4b64      	ldr	r3, [pc, #400]	; (8000f74 <HAL_SPI_MspInit+0x220>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000de8:	4b62      	ldr	r3, [pc, #392]	; (8000f74 <HAL_SPI_MspInit+0x220>)
 8000dea:	2280      	movs	r2, #128	; 0x80
 8000dec:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000dee:	4b61      	ldr	r3, [pc, #388]	; (8000f74 <HAL_SPI_MspInit+0x220>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000df4:	4b5f      	ldr	r3, [pc, #380]	; (8000f74 <HAL_SPI_MspInit+0x220>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8000dfa:	4b5e      	ldr	r3, [pc, #376]	; (8000f74 <HAL_SPI_MspInit+0x220>)
 8000dfc:	2220      	movs	r2, #32
 8000dfe:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000e00:	4b5c      	ldr	r3, [pc, #368]	; (8000f74 <HAL_SPI_MspInit+0x220>)
 8000e02:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e06:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000e08:	485a      	ldr	r0, [pc, #360]	; (8000f74 <HAL_SPI_MspInit+0x220>)
 8000e0a:	f000 fc21 	bl	8001650 <HAL_DMA_Init>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <HAL_SPI_MspInit+0xc4>
    {
      Error_Handler();
 8000e14:	f7ff fef0 	bl	8000bf8 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	4a56      	ldr	r2, [pc, #344]	; (8000f74 <HAL_SPI_MspInit+0x220>)
 8000e1c:	64da      	str	r2, [r3, #76]	; 0x4c
 8000e1e:	4a55      	ldr	r2, [pc, #340]	; (8000f74 <HAL_SPI_MspInit+0x220>)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8000e24:	4b55      	ldr	r3, [pc, #340]	; (8000f7c <HAL_SPI_MspInit+0x228>)
 8000e26:	4a56      	ldr	r2, [pc, #344]	; (8000f80 <HAL_SPI_MspInit+0x22c>)
 8000e28:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e2a:	4b54      	ldr	r3, [pc, #336]	; (8000f7c <HAL_SPI_MspInit+0x228>)
 8000e2c:	2210      	movs	r2, #16
 8000e2e:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e30:	4b52      	ldr	r3, [pc, #328]	; (8000f7c <HAL_SPI_MspInit+0x228>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e36:	4b51      	ldr	r3, [pc, #324]	; (8000f7c <HAL_SPI_MspInit+0x228>)
 8000e38:	2280      	movs	r2, #128	; 0x80
 8000e3a:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e3c:	4b4f      	ldr	r3, [pc, #316]	; (8000f7c <HAL_SPI_MspInit+0x228>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e42:	4b4e      	ldr	r3, [pc, #312]	; (8000f7c <HAL_SPI_MspInit+0x228>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 8000e48:	4b4c      	ldr	r3, [pc, #304]	; (8000f7c <HAL_SPI_MspInit+0x228>)
 8000e4a:	2220      	movs	r2, #32
 8000e4c:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000e4e:	4b4b      	ldr	r3, [pc, #300]	; (8000f7c <HAL_SPI_MspInit+0x228>)
 8000e50:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000e54:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000e56:	4849      	ldr	r0, [pc, #292]	; (8000f7c <HAL_SPI_MspInit+0x228>)
 8000e58:	f000 fbfa 	bl	8001650 <HAL_DMA_Init>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <HAL_SPI_MspInit+0x112>
    {
      Error_Handler();
 8000e62:	f7ff fec9 	bl	8000bf8 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4a44      	ldr	r2, [pc, #272]	; (8000f7c <HAL_SPI_MspInit+0x228>)
 8000e6a:	649a      	str	r2, [r3, #72]	; 0x48
 8000e6c:	4a43      	ldr	r2, [pc, #268]	; (8000f7c <HAL_SPI_MspInit+0x228>)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000e72:	2200      	movs	r2, #0
 8000e74:	2100      	movs	r1, #0
 8000e76:	2023      	movs	r0, #35	; 0x23
 8000e78:	f000 fbb3 	bl	80015e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000e7c:	2023      	movs	r0, #35	; 0x23
 8000e7e:	f000 fbcc 	bl	800161a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000e82:	e06c      	b.n	8000f5e <HAL_SPI_MspInit+0x20a>
  else if(spiHandle->Instance==SPI2)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a3e      	ldr	r2, [pc, #248]	; (8000f84 <HAL_SPI_MspInit+0x230>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d132      	bne.n	8000ef4 <HAL_SPI_MspInit+0x1a0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000e8e:	4b37      	ldr	r3, [pc, #220]	; (8000f6c <HAL_SPI_MspInit+0x218>)
 8000e90:	69db      	ldr	r3, [r3, #28]
 8000e92:	4a36      	ldr	r2, [pc, #216]	; (8000f6c <HAL_SPI_MspInit+0x218>)
 8000e94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e98:	61d3      	str	r3, [r2, #28]
 8000e9a:	4b34      	ldr	r3, [pc, #208]	; (8000f6c <HAL_SPI_MspInit+0x218>)
 8000e9c:	69db      	ldr	r3, [r3, #28]
 8000e9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ea2:	617b      	str	r3, [r7, #20]
 8000ea4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ea6:	4b31      	ldr	r3, [pc, #196]	; (8000f6c <HAL_SPI_MspInit+0x218>)
 8000ea8:	699b      	ldr	r3, [r3, #24]
 8000eaa:	4a30      	ldr	r2, [pc, #192]	; (8000f6c <HAL_SPI_MspInit+0x218>)
 8000eac:	f043 0308 	orr.w	r3, r3, #8
 8000eb0:	6193      	str	r3, [r2, #24]
 8000eb2:	4b2e      	ldr	r3, [pc, #184]	; (8000f6c <HAL_SPI_MspInit+0x218>)
 8000eb4:	699b      	ldr	r3, [r3, #24]
 8000eb6:	f003 0308 	and.w	r3, r3, #8
 8000eba:	613b      	str	r3, [r7, #16]
 8000ebc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000ebe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ec2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ec8:	2303      	movs	r3, #3
 8000eca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ecc:	f107 0320 	add.w	r3, r7, #32
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	482d      	ldr	r0, [pc, #180]	; (8000f88 <HAL_SPI_MspInit+0x234>)
 8000ed4:	f000 ff76 	bl	8001dc4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000ed8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000edc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ee6:	f107 0320 	add.w	r3, r7, #32
 8000eea:	4619      	mov	r1, r3
 8000eec:	4826      	ldr	r0, [pc, #152]	; (8000f88 <HAL_SPI_MspInit+0x234>)
 8000eee:	f000 ff69 	bl	8001dc4 <HAL_GPIO_Init>
}
 8000ef2:	e034      	b.n	8000f5e <HAL_SPI_MspInit+0x20a>
  else if(spiHandle->Instance==SPI3)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a24      	ldr	r2, [pc, #144]	; (8000f8c <HAL_SPI_MspInit+0x238>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d12f      	bne.n	8000f5e <HAL_SPI_MspInit+0x20a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000efe:	4b1b      	ldr	r3, [pc, #108]	; (8000f6c <HAL_SPI_MspInit+0x218>)
 8000f00:	69db      	ldr	r3, [r3, #28]
 8000f02:	4a1a      	ldr	r2, [pc, #104]	; (8000f6c <HAL_SPI_MspInit+0x218>)
 8000f04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f08:	61d3      	str	r3, [r2, #28]
 8000f0a:	4b18      	ldr	r3, [pc, #96]	; (8000f6c <HAL_SPI_MspInit+0x218>)
 8000f0c:	69db      	ldr	r3, [r3, #28]
 8000f0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f16:	4b15      	ldr	r3, [pc, #84]	; (8000f6c <HAL_SPI_MspInit+0x218>)
 8000f18:	699b      	ldr	r3, [r3, #24]
 8000f1a:	4a14      	ldr	r2, [pc, #80]	; (8000f6c <HAL_SPI_MspInit+0x218>)
 8000f1c:	f043 0308 	orr.w	r3, r3, #8
 8000f20:	6193      	str	r3, [r2, #24]
 8000f22:	4b12      	ldr	r3, [pc, #72]	; (8000f6c <HAL_SPI_MspInit+0x218>)
 8000f24:	699b      	ldr	r3, [r3, #24]
 8000f26:	f003 0308 	and.w	r3, r3, #8
 8000f2a:	60bb      	str	r3, [r7, #8]
 8000f2c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8000f2e:	2328      	movs	r3, #40	; 0x28
 8000f30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f32:	2302      	movs	r3, #2
 8000f34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f36:	2303      	movs	r3, #3
 8000f38:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f3a:	f107 0320 	add.w	r3, r7, #32
 8000f3e:	4619      	mov	r1, r3
 8000f40:	4811      	ldr	r0, [pc, #68]	; (8000f88 <HAL_SPI_MspInit+0x234>)
 8000f42:	f000 ff3f 	bl	8001dc4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000f46:	2310      	movs	r3, #16
 8000f48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f52:	f107 0320 	add.w	r3, r7, #32
 8000f56:	4619      	mov	r1, r3
 8000f58:	480b      	ldr	r0, [pc, #44]	; (8000f88 <HAL_SPI_MspInit+0x234>)
 8000f5a:	f000 ff33 	bl	8001dc4 <HAL_GPIO_Init>
}
 8000f5e:	bf00      	nop
 8000f60:	3730      	adds	r7, #48	; 0x30
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40013000 	.word	0x40013000
 8000f6c:	40021000 	.word	0x40021000
 8000f70:	40010800 	.word	0x40010800
 8000f74:	20002b0c 	.word	0x20002b0c
 8000f78:	4002001c 	.word	0x4002001c
 8000f7c:	20002b50 	.word	0x20002b50
 8000f80:	40020030 	.word	0x40020030
 8000f84:	40003800 	.word	0x40003800
 8000f88:	40010c00 	.word	0x40010c00
 8000f8c:	40003c00 	.word	0x40003c00

08000f90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b085      	sub	sp, #20
 8000f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f96:	4b15      	ldr	r3, [pc, #84]	; (8000fec <HAL_MspInit+0x5c>)
 8000f98:	699b      	ldr	r3, [r3, #24]
 8000f9a:	4a14      	ldr	r2, [pc, #80]	; (8000fec <HAL_MspInit+0x5c>)
 8000f9c:	f043 0301 	orr.w	r3, r3, #1
 8000fa0:	6193      	str	r3, [r2, #24]
 8000fa2:	4b12      	ldr	r3, [pc, #72]	; (8000fec <HAL_MspInit+0x5c>)
 8000fa4:	699b      	ldr	r3, [r3, #24]
 8000fa6:	f003 0301 	and.w	r3, r3, #1
 8000faa:	60bb      	str	r3, [r7, #8]
 8000fac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fae:	4b0f      	ldr	r3, [pc, #60]	; (8000fec <HAL_MspInit+0x5c>)
 8000fb0:	69db      	ldr	r3, [r3, #28]
 8000fb2:	4a0e      	ldr	r2, [pc, #56]	; (8000fec <HAL_MspInit+0x5c>)
 8000fb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fb8:	61d3      	str	r3, [r2, #28]
 8000fba:	4b0c      	ldr	r3, [pc, #48]	; (8000fec <HAL_MspInit+0x5c>)
 8000fbc:	69db      	ldr	r3, [r3, #28]
 8000fbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fc2:	607b      	str	r3, [r7, #4]
 8000fc4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000fc6:	4b0a      	ldr	r3, [pc, #40]	; (8000ff0 <HAL_MspInit+0x60>)
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000fd2:	60fb      	str	r3, [r7, #12]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fda:	60fb      	str	r3, [r7, #12]
 8000fdc:	4a04      	ldr	r2, [pc, #16]	; (8000ff0 <HAL_MspInit+0x60>)
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fe2:	bf00      	nop
 8000fe4:	3714      	adds	r7, #20
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bc80      	pop	{r7}
 8000fea:	4770      	bx	lr
 8000fec:	40021000 	.word	0x40021000
 8000ff0:	40010000 	.word	0x40010000

08000ff4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ff8:	bf00      	nop
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bc80      	pop	{r7}
 8000ffe:	4770      	bx	lr

08001000 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	dbprintf("%s",__func__);
 8001004:	4902      	ldr	r1, [pc, #8]	; (8001010 <HardFault_Handler+0x10>)
 8001006:	4803      	ldr	r0, [pc, #12]	; (8001014 <HardFault_Handler+0x14>)
 8001008:	f000 f956 	bl	80012b8 <dbprintf>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800100c:	e7fe      	b.n	800100c <HardFault_Handler+0xc>
 800100e:	bf00      	nop
 8001010:	080045f8 	.word	0x080045f8
 8001014:	080045d0 	.word	0x080045d0

08001018 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800101c:	e7fe      	b.n	800101c <MemManage_Handler+0x4>

0800101e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800101e:	b480      	push	{r7}
 8001020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001022:	e7fe      	b.n	8001022 <BusFault_Handler+0x4>

08001024 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001028:	e7fe      	b.n	8001028 <UsageFault_Handler+0x4>

0800102a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800102a:	b480      	push	{r7}
 800102c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800102e:	bf00      	nop
 8001030:	46bd      	mov	sp, r7
 8001032:	bc80      	pop	{r7}
 8001034:	4770      	bx	lr

08001036 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001036:	b480      	push	{r7}
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800103a:	bf00      	nop
 800103c:	46bd      	mov	sp, r7
 800103e:	bc80      	pop	{r7}
 8001040:	4770      	bx	lr

08001042 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001042:	b480      	push	{r7}
 8001044:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001046:	bf00      	nop
 8001048:	46bd      	mov	sp, r7
 800104a:	bc80      	pop	{r7}
 800104c:	4770      	bx	lr

0800104e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800104e:	b580      	push	{r7, lr}
 8001050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001052:	f000 f9af 	bl	80013b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001056:	bf00      	nop
 8001058:	bd80      	pop	{r7, pc}
	...

0800105c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001060:	4802      	ldr	r0, [pc, #8]	; (800106c <DMA1_Channel2_IRQHandler+0x10>)
 8001062:	f000 fc73 	bl	800194c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001066:	bf00      	nop
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	20002b0c 	.word	0x20002b0c

08001070 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001074:	4802      	ldr	r0, [pc, #8]	; (8001080 <DMA1_Channel3_IRQHandler+0x10>)
 8001076:	f000 fc69 	bl	800194c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800107a:	bf00      	nop
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	20002b50 	.word	0x20002b50

08001084 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001088:	4802      	ldr	r0, [pc, #8]	; (8001094 <DMA1_Channel4_IRQHandler+0x10>)
 800108a:	f000 fc5f 	bl	800194c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	20002b94 	.word	0x20002b94

08001098 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800109c:	2020      	movs	r0, #32
 800109e:	f001 f855 	bl	800214c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80010a2:	bf00      	nop
 80010a4:	bd80      	pop	{r7, pc}
	...

080010a8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80010ac:	4802      	ldr	r0, [pc, #8]	; (80010b8 <SPI1_IRQHandler+0x10>)
 80010ae:	f002 fa99 	bl	80035e4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */
	//dbprintf("%s",__func__);
  /* USER CODE END SPI1_IRQn 1 */
}
 80010b2:	bf00      	nop
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	20002ab4 	.word	0x20002ab4

080010bc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80010c4:	4b11      	ldr	r3, [pc, #68]	; (800110c <_sbrk+0x50>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d102      	bne.n	80010d2 <_sbrk+0x16>
		heap_end = &end;
 80010cc:	4b0f      	ldr	r3, [pc, #60]	; (800110c <_sbrk+0x50>)
 80010ce:	4a10      	ldr	r2, [pc, #64]	; (8001110 <_sbrk+0x54>)
 80010d0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80010d2:	4b0e      	ldr	r3, [pc, #56]	; (800110c <_sbrk+0x50>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80010d8:	4b0c      	ldr	r3, [pc, #48]	; (800110c <_sbrk+0x50>)
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	4413      	add	r3, r2
 80010e0:	466a      	mov	r2, sp
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d907      	bls.n	80010f6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80010e6:	f002 fddf 	bl	8003ca8 <__errno>
 80010ea:	4603      	mov	r3, r0
 80010ec:	220c      	movs	r2, #12
 80010ee:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80010f0:	f04f 33ff 	mov.w	r3, #4294967295
 80010f4:	e006      	b.n	8001104 <_sbrk+0x48>
	}

	heap_end += incr;
 80010f6:	4b05      	ldr	r3, [pc, #20]	; (800110c <_sbrk+0x50>)
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4413      	add	r3, r2
 80010fe:	4a03      	ldr	r2, [pc, #12]	; (800110c <_sbrk+0x50>)
 8001100:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001102:	68fb      	ldr	r3, [r7, #12]
}
 8001104:	4618      	mov	r0, r3
 8001106:	3710      	adds	r7, #16
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	20000494 	.word	0x20000494
 8001110:	20002c30 	.word	0x20002c30

08001114 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001118:	bf00      	nop
 800111a:	46bd      	mov	sp, r7
 800111c:	bc80      	pop	{r7}
 800111e:	4770      	bx	lr

08001120 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001124:	4b11      	ldr	r3, [pc, #68]	; (800116c <MX_USART1_UART_Init+0x4c>)
 8001126:	4a12      	ldr	r2, [pc, #72]	; (8001170 <MX_USART1_UART_Init+0x50>)
 8001128:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 800112a:	4b10      	ldr	r3, [pc, #64]	; (800116c <MX_USART1_UART_Init+0x4c>)
 800112c:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8001130:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001132:	4b0e      	ldr	r3, [pc, #56]	; (800116c <MX_USART1_UART_Init+0x4c>)
 8001134:	2200      	movs	r2, #0
 8001136:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001138:	4b0c      	ldr	r3, [pc, #48]	; (800116c <MX_USART1_UART_Init+0x4c>)
 800113a:	2200      	movs	r2, #0
 800113c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800113e:	4b0b      	ldr	r3, [pc, #44]	; (800116c <MX_USART1_UART_Init+0x4c>)
 8001140:	2200      	movs	r2, #0
 8001142:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001144:	4b09      	ldr	r3, [pc, #36]	; (800116c <MX_USART1_UART_Init+0x4c>)
 8001146:	220c      	movs	r2, #12
 8001148:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800114a:	4b08      	ldr	r3, [pc, #32]	; (800116c <MX_USART1_UART_Init+0x4c>)
 800114c:	2200      	movs	r2, #0
 800114e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001150:	4b06      	ldr	r3, [pc, #24]	; (800116c <MX_USART1_UART_Init+0x4c>)
 8001152:	2200      	movs	r2, #0
 8001154:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001156:	4805      	ldr	r0, [pc, #20]	; (800116c <MX_USART1_UART_Init+0x4c>)
 8001158:	f002 fbee 	bl	8003938 <HAL_UART_Init>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001162:	f7ff fd49 	bl	8000bf8 <Error_Handler>
  }

}
 8001166:	bf00      	nop
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	20002bd8 	.word	0x20002bd8
 8001170:	40013800 	.word	0x40013800

08001174 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b088      	sub	sp, #32
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800117c:	f107 0310 	add.w	r3, r7, #16
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	609a      	str	r2, [r3, #8]
 8001188:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a2f      	ldr	r2, [pc, #188]	; (800124c <HAL_UART_MspInit+0xd8>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d157      	bne.n	8001244 <HAL_UART_MspInit+0xd0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001194:	4b2e      	ldr	r3, [pc, #184]	; (8001250 <HAL_UART_MspInit+0xdc>)
 8001196:	699b      	ldr	r3, [r3, #24]
 8001198:	4a2d      	ldr	r2, [pc, #180]	; (8001250 <HAL_UART_MspInit+0xdc>)
 800119a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800119e:	6193      	str	r3, [r2, #24]
 80011a0:	4b2b      	ldr	r3, [pc, #172]	; (8001250 <HAL_UART_MspInit+0xdc>)
 80011a2:	699b      	ldr	r3, [r3, #24]
 80011a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011a8:	60fb      	str	r3, [r7, #12]
 80011aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ac:	4b28      	ldr	r3, [pc, #160]	; (8001250 <HAL_UART_MspInit+0xdc>)
 80011ae:	699b      	ldr	r3, [r3, #24]
 80011b0:	4a27      	ldr	r2, [pc, #156]	; (8001250 <HAL_UART_MspInit+0xdc>)
 80011b2:	f043 0304 	orr.w	r3, r3, #4
 80011b6:	6193      	str	r3, [r2, #24]
 80011b8:	4b25      	ldr	r3, [pc, #148]	; (8001250 <HAL_UART_MspInit+0xdc>)
 80011ba:	699b      	ldr	r3, [r3, #24]
 80011bc:	f003 0304 	and.w	r3, r3, #4
 80011c0:	60bb      	str	r3, [r7, #8]
 80011c2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = DBG_TX_Pin;
 80011c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ca:	2302      	movs	r3, #2
 80011cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011ce:	2303      	movs	r3, #3
 80011d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DBG_TX_GPIO_Port, &GPIO_InitStruct);
 80011d2:	f107 0310 	add.w	r3, r7, #16
 80011d6:	4619      	mov	r1, r3
 80011d8:	481e      	ldr	r0, [pc, #120]	; (8001254 <HAL_UART_MspInit+0xe0>)
 80011da:	f000 fdf3 	bl	8001dc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DBG_RX_Pin;
 80011de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011e4:	2300      	movs	r3, #0
 80011e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e8:	2300      	movs	r3, #0
 80011ea:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(DBG_RX_GPIO_Port, &GPIO_InitStruct);
 80011ec:	f107 0310 	add.w	r3, r7, #16
 80011f0:	4619      	mov	r1, r3
 80011f2:	4818      	ldr	r0, [pc, #96]	; (8001254 <HAL_UART_MspInit+0xe0>)
 80011f4:	f000 fde6 	bl	8001dc4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80011f8:	4b17      	ldr	r3, [pc, #92]	; (8001258 <HAL_UART_MspInit+0xe4>)
 80011fa:	4a18      	ldr	r2, [pc, #96]	; (800125c <HAL_UART_MspInit+0xe8>)
 80011fc:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80011fe:	4b16      	ldr	r3, [pc, #88]	; (8001258 <HAL_UART_MspInit+0xe4>)
 8001200:	2210      	movs	r2, #16
 8001202:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001204:	4b14      	ldr	r3, [pc, #80]	; (8001258 <HAL_UART_MspInit+0xe4>)
 8001206:	2200      	movs	r2, #0
 8001208:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800120a:	4b13      	ldr	r3, [pc, #76]	; (8001258 <HAL_UART_MspInit+0xe4>)
 800120c:	2280      	movs	r2, #128	; 0x80
 800120e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001210:	4b11      	ldr	r3, [pc, #68]	; (8001258 <HAL_UART_MspInit+0xe4>)
 8001212:	2200      	movs	r2, #0
 8001214:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001216:	4b10      	ldr	r3, [pc, #64]	; (8001258 <HAL_UART_MspInit+0xe4>)
 8001218:	2200      	movs	r2, #0
 800121a:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800121c:	4b0e      	ldr	r3, [pc, #56]	; (8001258 <HAL_UART_MspInit+0xe4>)
 800121e:	2200      	movs	r2, #0
 8001220:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001222:	4b0d      	ldr	r3, [pc, #52]	; (8001258 <HAL_UART_MspInit+0xe4>)
 8001224:	2200      	movs	r2, #0
 8001226:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001228:	480b      	ldr	r0, [pc, #44]	; (8001258 <HAL_UART_MspInit+0xe4>)
 800122a:	f000 fa11 	bl	8001650 <HAL_DMA_Init>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8001234:	f7ff fce0 	bl	8000bf8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	4a07      	ldr	r2, [pc, #28]	; (8001258 <HAL_UART_MspInit+0xe4>)
 800123c:	631a      	str	r2, [r3, #48]	; 0x30
 800123e:	4a06      	ldr	r2, [pc, #24]	; (8001258 <HAL_UART_MspInit+0xe4>)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001244:	bf00      	nop
 8001246:	3720      	adds	r7, #32
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	40013800 	.word	0x40013800
 8001250:	40021000 	.word	0x40021000
 8001254:	40010800 	.word	0x40010800
 8001258:	20002b94 	.word	0x20002b94
 800125c:	40020044 	.word	0x40020044

08001260 <vprintln>:
        HAL_UART_Transmit(&huart1, (uint8_t*)string, strlen(string), 0xffffff); // send message via UART
    }
}

void vprintln(const char *fmt, va_list argp)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b0b4      	sub	sp, #208	; 0xd0
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	6039      	str	r1, [r7, #0]
    char string[200];
    if(0 < vsprintf(string,fmt,argp)) // build string
 800126a:	f107 0308 	add.w	r3, r7, #8
 800126e:	683a      	ldr	r2, [r7, #0]
 8001270:	6879      	ldr	r1, [r7, #4]
 8001272:	4618      	mov	r0, r3
 8001274:	f002 fd88 	bl	8003d88 <vsiprintf>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	dd14      	ble.n	80012a8 <vprintln+0x48>
    {
        HAL_UART_Transmit(&huart1, (uint8_t*)string, strlen(string), 0xffffff); // send message via UART
 800127e:	f107 0308 	add.w	r3, r7, #8
 8001282:	4618      	mov	r0, r3
 8001284:	f7fe ffce 	bl	8000224 <strlen>
 8001288:	4603      	mov	r3, r0
 800128a:	b29a      	uxth	r2, r3
 800128c:	f107 0108 	add.w	r1, r7, #8
 8001290:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8001294:	4806      	ldr	r0, [pc, #24]	; (80012b0 <vprintln+0x50>)
 8001296:	f002 fb9c 	bl	80039d2 <HAL_UART_Transmit>
        HAL_UART_Transmit(&huart1, (uint8_t*)"\n\r",2, 0xffffff);
 800129a:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800129e:	2202      	movs	r2, #2
 80012a0:	4904      	ldr	r1, [pc, #16]	; (80012b4 <vprintln+0x54>)
 80012a2:	4803      	ldr	r0, [pc, #12]	; (80012b0 <vprintln+0x50>)
 80012a4:	f002 fb95 	bl	80039d2 <HAL_UART_Transmit>
    }
}
 80012a8:	bf00      	nop
 80012aa:	37d0      	adds	r7, #208	; 0xd0
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	20002bd8 	.word	0x20002bd8
 80012b4:	080045d4 	.word	0x080045d4

080012b8 <dbprintf>:

void dbprintf(const char *fmt, ...)
{
 80012b8:	b40f      	push	{r0, r1, r2, r3}
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b082      	sub	sp, #8
 80012be:	af00      	add	r7, sp, #0
    va_list argp;
    va_start(argp, fmt);
 80012c0:	f107 0314 	add.w	r3, r7, #20
 80012c4:	607b      	str	r3, [r7, #4]
    vprintln((const char *)fmt, argp);
 80012c6:	6879      	ldr	r1, [r7, #4]
 80012c8:	6938      	ldr	r0, [r7, #16]
 80012ca:	f7ff ffc9 	bl	8001260 <vprintln>
    va_end(argp);
}
 80012ce:	bf00      	nop
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80012d8:	b004      	add	sp, #16
 80012da:	4770      	bx	lr

080012dc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80012dc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80012de:	e003      	b.n	80012e8 <LoopCopyDataInit>

080012e0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80012e0:	4b0b      	ldr	r3, [pc, #44]	; (8001310 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80012e2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80012e4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80012e6:	3104      	adds	r1, #4

080012e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80012e8:	480a      	ldr	r0, [pc, #40]	; (8001314 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80012ea:	4b0b      	ldr	r3, [pc, #44]	; (8001318 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80012ec:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80012ee:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80012f0:	d3f6      	bcc.n	80012e0 <CopyDataInit>
  ldr r2, =_sbss
 80012f2:	4a0a      	ldr	r2, [pc, #40]	; (800131c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80012f4:	e002      	b.n	80012fc <LoopFillZerobss>

080012f6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80012f6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80012f8:	f842 3b04 	str.w	r3, [r2], #4

080012fc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80012fc:	4b08      	ldr	r3, [pc, #32]	; (8001320 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80012fe:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001300:	d3f9      	bcc.n	80012f6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001302:	f7ff ff07 	bl	8001114 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001306:	f002 fcd5 	bl	8003cb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800130a:	f7ff fb93 	bl	8000a34 <main>
  bx lr
 800130e:	4770      	bx	lr
  ldr r3, =_sidata
 8001310:	08004660 	.word	0x08004660
  ldr r0, =_sdata
 8001314:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001318:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 800131c:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8001320:	20002c2c 	.word	0x20002c2c

08001324 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001324:	e7fe      	b.n	8001324 <ADC1_2_IRQHandler>
	...

08001328 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800132c:	4b08      	ldr	r3, [pc, #32]	; (8001350 <HAL_Init+0x28>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a07      	ldr	r2, [pc, #28]	; (8001350 <HAL_Init+0x28>)
 8001332:	f043 0310 	orr.w	r3, r3, #16
 8001336:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001338:	2003      	movs	r0, #3
 800133a:	f000 f947 	bl	80015cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800133e:	2000      	movs	r0, #0
 8001340:	f000 f808 	bl	8001354 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001344:	f7ff fe24 	bl	8000f90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001348:	2300      	movs	r3, #0
}
 800134a:	4618      	mov	r0, r3
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	40022000 	.word	0x40022000

08001354 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800135c:	4b12      	ldr	r3, [pc, #72]	; (80013a8 <HAL_InitTick+0x54>)
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	4b12      	ldr	r3, [pc, #72]	; (80013ac <HAL_InitTick+0x58>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	4619      	mov	r1, r3
 8001366:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800136a:	fbb3 f3f1 	udiv	r3, r3, r1
 800136e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001372:	4618      	mov	r0, r3
 8001374:	f000 f95f 	bl	8001636 <HAL_SYSTICK_Config>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e00e      	b.n	80013a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2b0f      	cmp	r3, #15
 8001386:	d80a      	bhi.n	800139e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001388:	2200      	movs	r2, #0
 800138a:	6879      	ldr	r1, [r7, #4]
 800138c:	f04f 30ff 	mov.w	r0, #4294967295
 8001390:	f000 f927 	bl	80015e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001394:	4a06      	ldr	r2, [pc, #24]	; (80013b0 <HAL_InitTick+0x5c>)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800139a:	2300      	movs	r3, #0
 800139c:	e000      	b.n	80013a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	3708      	adds	r7, #8
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	20000000 	.word	0x20000000
 80013ac:	20000008 	.word	0x20000008
 80013b0:	20000004 	.word	0x20000004

080013b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013b8:	4b05      	ldr	r3, [pc, #20]	; (80013d0 <HAL_IncTick+0x1c>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	461a      	mov	r2, r3
 80013be:	4b05      	ldr	r3, [pc, #20]	; (80013d4 <HAL_IncTick+0x20>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4413      	add	r3, r2
 80013c4:	4a03      	ldr	r2, [pc, #12]	; (80013d4 <HAL_IncTick+0x20>)
 80013c6:	6013      	str	r3, [r2, #0]
}
 80013c8:	bf00      	nop
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bc80      	pop	{r7}
 80013ce:	4770      	bx	lr
 80013d0:	20000008 	.word	0x20000008
 80013d4:	20002c18 	.word	0x20002c18

080013d8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  return uwTick;
 80013dc:	4b02      	ldr	r3, [pc, #8]	; (80013e8 <HAL_GetTick+0x10>)
 80013de:	681b      	ldr	r3, [r3, #0]
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bc80      	pop	{r7}
 80013e6:	4770      	bx	lr
 80013e8:	20002c18 	.word	0x20002c18

080013ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013f4:	f7ff fff0 	bl	80013d8 <HAL_GetTick>
 80013f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001404:	d005      	beq.n	8001412 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001406:	4b0a      	ldr	r3, [pc, #40]	; (8001430 <HAL_Delay+0x44>)
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	461a      	mov	r2, r3
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	4413      	add	r3, r2
 8001410:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001412:	bf00      	nop
 8001414:	f7ff ffe0 	bl	80013d8 <HAL_GetTick>
 8001418:	4602      	mov	r2, r0
 800141a:	68bb      	ldr	r3, [r7, #8]
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	68fa      	ldr	r2, [r7, #12]
 8001420:	429a      	cmp	r2, r3
 8001422:	d8f7      	bhi.n	8001414 <HAL_Delay+0x28>
  {
  }
}
 8001424:	bf00      	nop
 8001426:	bf00      	nop
 8001428:	3710      	adds	r7, #16
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	20000008 	.word	0x20000008

08001434 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001434:	b480      	push	{r7}
 8001436:	b085      	sub	sp, #20
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	f003 0307 	and.w	r3, r3, #7
 8001442:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001444:	4b0c      	ldr	r3, [pc, #48]	; (8001478 <__NVIC_SetPriorityGrouping+0x44>)
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800144a:	68ba      	ldr	r2, [r7, #8]
 800144c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001450:	4013      	ands	r3, r2
 8001452:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800145c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001460:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001464:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001466:	4a04      	ldr	r2, [pc, #16]	; (8001478 <__NVIC_SetPriorityGrouping+0x44>)
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	60d3      	str	r3, [r2, #12]
}
 800146c:	bf00      	nop
 800146e:	3714      	adds	r7, #20
 8001470:	46bd      	mov	sp, r7
 8001472:	bc80      	pop	{r7}
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	e000ed00 	.word	0xe000ed00

0800147c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001480:	4b04      	ldr	r3, [pc, #16]	; (8001494 <__NVIC_GetPriorityGrouping+0x18>)
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	0a1b      	lsrs	r3, r3, #8
 8001486:	f003 0307 	and.w	r3, r3, #7
}
 800148a:	4618      	mov	r0, r3
 800148c:	46bd      	mov	sp, r7
 800148e:	bc80      	pop	{r7}
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	e000ed00 	.word	0xe000ed00

08001498 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	4603      	mov	r3, r0
 80014a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	db0b      	blt.n	80014c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014aa:	79fb      	ldrb	r3, [r7, #7]
 80014ac:	f003 021f 	and.w	r2, r3, #31
 80014b0:	4906      	ldr	r1, [pc, #24]	; (80014cc <__NVIC_EnableIRQ+0x34>)
 80014b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b6:	095b      	lsrs	r3, r3, #5
 80014b8:	2001      	movs	r0, #1
 80014ba:	fa00 f202 	lsl.w	r2, r0, r2
 80014be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014c2:	bf00      	nop
 80014c4:	370c      	adds	r7, #12
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bc80      	pop	{r7}
 80014ca:	4770      	bx	lr
 80014cc:	e000e100 	.word	0xe000e100

080014d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	4603      	mov	r3, r0
 80014d8:	6039      	str	r1, [r7, #0]
 80014da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	db0a      	blt.n	80014fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	b2da      	uxtb	r2, r3
 80014e8:	490c      	ldr	r1, [pc, #48]	; (800151c <__NVIC_SetPriority+0x4c>)
 80014ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ee:	0112      	lsls	r2, r2, #4
 80014f0:	b2d2      	uxtb	r2, r2
 80014f2:	440b      	add	r3, r1
 80014f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014f8:	e00a      	b.n	8001510 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	b2da      	uxtb	r2, r3
 80014fe:	4908      	ldr	r1, [pc, #32]	; (8001520 <__NVIC_SetPriority+0x50>)
 8001500:	79fb      	ldrb	r3, [r7, #7]
 8001502:	f003 030f 	and.w	r3, r3, #15
 8001506:	3b04      	subs	r3, #4
 8001508:	0112      	lsls	r2, r2, #4
 800150a:	b2d2      	uxtb	r2, r2
 800150c:	440b      	add	r3, r1
 800150e:	761a      	strb	r2, [r3, #24]
}
 8001510:	bf00      	nop
 8001512:	370c      	adds	r7, #12
 8001514:	46bd      	mov	sp, r7
 8001516:	bc80      	pop	{r7}
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	e000e100 	.word	0xe000e100
 8001520:	e000ed00 	.word	0xe000ed00

08001524 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001524:	b480      	push	{r7}
 8001526:	b089      	sub	sp, #36	; 0x24
 8001528:	af00      	add	r7, sp, #0
 800152a:	60f8      	str	r0, [r7, #12]
 800152c:	60b9      	str	r1, [r7, #8]
 800152e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	f003 0307 	and.w	r3, r3, #7
 8001536:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	f1c3 0307 	rsb	r3, r3, #7
 800153e:	2b04      	cmp	r3, #4
 8001540:	bf28      	it	cs
 8001542:	2304      	movcs	r3, #4
 8001544:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	3304      	adds	r3, #4
 800154a:	2b06      	cmp	r3, #6
 800154c:	d902      	bls.n	8001554 <NVIC_EncodePriority+0x30>
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	3b03      	subs	r3, #3
 8001552:	e000      	b.n	8001556 <NVIC_EncodePriority+0x32>
 8001554:	2300      	movs	r3, #0
 8001556:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001558:	f04f 32ff 	mov.w	r2, #4294967295
 800155c:	69bb      	ldr	r3, [r7, #24]
 800155e:	fa02 f303 	lsl.w	r3, r2, r3
 8001562:	43da      	mvns	r2, r3
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	401a      	ands	r2, r3
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800156c:	f04f 31ff 	mov.w	r1, #4294967295
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	fa01 f303 	lsl.w	r3, r1, r3
 8001576:	43d9      	mvns	r1, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800157c:	4313      	orrs	r3, r2
         );
}
 800157e:	4618      	mov	r0, r3
 8001580:	3724      	adds	r7, #36	; 0x24
 8001582:	46bd      	mov	sp, r7
 8001584:	bc80      	pop	{r7}
 8001586:	4770      	bx	lr

08001588 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	3b01      	subs	r3, #1
 8001594:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001598:	d301      	bcc.n	800159e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800159a:	2301      	movs	r3, #1
 800159c:	e00f      	b.n	80015be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800159e:	4a0a      	ldr	r2, [pc, #40]	; (80015c8 <SysTick_Config+0x40>)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	3b01      	subs	r3, #1
 80015a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015a6:	210f      	movs	r1, #15
 80015a8:	f04f 30ff 	mov.w	r0, #4294967295
 80015ac:	f7ff ff90 	bl	80014d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015b0:	4b05      	ldr	r3, [pc, #20]	; (80015c8 <SysTick_Config+0x40>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015b6:	4b04      	ldr	r3, [pc, #16]	; (80015c8 <SysTick_Config+0x40>)
 80015b8:	2207      	movs	r2, #7
 80015ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015bc:	2300      	movs	r3, #0
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	e000e010 	.word	0xe000e010

080015cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	f7ff ff2d 	bl	8001434 <__NVIC_SetPriorityGrouping>
}
 80015da:	bf00      	nop
 80015dc:	3708      	adds	r7, #8
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}

080015e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015e2:	b580      	push	{r7, lr}
 80015e4:	b086      	sub	sp, #24
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	4603      	mov	r3, r0
 80015ea:	60b9      	str	r1, [r7, #8]
 80015ec:	607a      	str	r2, [r7, #4]
 80015ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015f0:	2300      	movs	r3, #0
 80015f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015f4:	f7ff ff42 	bl	800147c <__NVIC_GetPriorityGrouping>
 80015f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015fa:	687a      	ldr	r2, [r7, #4]
 80015fc:	68b9      	ldr	r1, [r7, #8]
 80015fe:	6978      	ldr	r0, [r7, #20]
 8001600:	f7ff ff90 	bl	8001524 <NVIC_EncodePriority>
 8001604:	4602      	mov	r2, r0
 8001606:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800160a:	4611      	mov	r1, r2
 800160c:	4618      	mov	r0, r3
 800160e:	f7ff ff5f 	bl	80014d0 <__NVIC_SetPriority>
}
 8001612:	bf00      	nop
 8001614:	3718      	adds	r7, #24
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}

0800161a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800161a:	b580      	push	{r7, lr}
 800161c:	b082      	sub	sp, #8
 800161e:	af00      	add	r7, sp, #0
 8001620:	4603      	mov	r3, r0
 8001622:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001624:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001628:	4618      	mov	r0, r3
 800162a:	f7ff ff35 	bl	8001498 <__NVIC_EnableIRQ>
}
 800162e:	bf00      	nop
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}

08001636 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001636:	b580      	push	{r7, lr}
 8001638:	b082      	sub	sp, #8
 800163a:	af00      	add	r7, sp, #0
 800163c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f7ff ffa2 	bl	8001588 <SysTick_Config>
 8001644:	4603      	mov	r3, r0
}
 8001646:	4618      	mov	r0, r3
 8001648:	3708      	adds	r7, #8
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
	...

08001650 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001650:	b480      	push	{r7}
 8001652:	b085      	sub	sp, #20
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001658:	2300      	movs	r3, #0
 800165a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d101      	bne.n	8001666 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e059      	b.n	800171a <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	461a      	mov	r2, r3
 800166c:	4b2d      	ldr	r3, [pc, #180]	; (8001724 <HAL_DMA_Init+0xd4>)
 800166e:	429a      	cmp	r2, r3
 8001670:	d80f      	bhi.n	8001692 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	461a      	mov	r2, r3
 8001678:	4b2b      	ldr	r3, [pc, #172]	; (8001728 <HAL_DMA_Init+0xd8>)
 800167a:	4413      	add	r3, r2
 800167c:	4a2b      	ldr	r2, [pc, #172]	; (800172c <HAL_DMA_Init+0xdc>)
 800167e:	fba2 2303 	umull	r2, r3, r2, r3
 8001682:	091b      	lsrs	r3, r3, #4
 8001684:	009a      	lsls	r2, r3, #2
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4a28      	ldr	r2, [pc, #160]	; (8001730 <HAL_DMA_Init+0xe0>)
 800168e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001690:	e00e      	b.n	80016b0 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	461a      	mov	r2, r3
 8001698:	4b26      	ldr	r3, [pc, #152]	; (8001734 <HAL_DMA_Init+0xe4>)
 800169a:	4413      	add	r3, r2
 800169c:	4a23      	ldr	r2, [pc, #140]	; (800172c <HAL_DMA_Init+0xdc>)
 800169e:	fba2 2303 	umull	r2, r3, r2, r3
 80016a2:	091b      	lsrs	r3, r3, #4
 80016a4:	009a      	lsls	r2, r3, #2
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4a22      	ldr	r2, [pc, #136]	; (8001738 <HAL_DMA_Init+0xe8>)
 80016ae:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2202      	movs	r2, #2
 80016b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80016c6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80016ca:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80016d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	68db      	ldr	r3, [r3, #12]
 80016da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	695b      	ldr	r3, [r3, #20]
 80016e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	69db      	ldr	r3, [r3, #28]
 80016f2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80016f4:	68fa      	ldr	r2, [r7, #12]
 80016f6:	4313      	orrs	r3, r2
 80016f8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	68fa      	ldr	r2, [r7, #12]
 8001700:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2200      	movs	r2, #0
 8001706:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2201      	movs	r2, #1
 800170c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2200      	movs	r2, #0
 8001714:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	3714      	adds	r7, #20
 800171e:	46bd      	mov	sp, r7
 8001720:	bc80      	pop	{r7}
 8001722:	4770      	bx	lr
 8001724:	40020407 	.word	0x40020407
 8001728:	bffdfff8 	.word	0xbffdfff8
 800172c:	cccccccd 	.word	0xcccccccd
 8001730:	40020000 	.word	0x40020000
 8001734:	bffdfbf8 	.word	0xbffdfbf8
 8001738:	40020400 	.word	0x40020400

0800173c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001744:	2300      	movs	r3, #0
 8001746:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800174e:	2b02      	cmp	r3, #2
 8001750:	d005      	beq.n	800175e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2204      	movs	r2, #4
 8001756:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	73fb      	strb	r3, [r7, #15]
 800175c:	e0d6      	b.n	800190c <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f022 020e 	bic.w	r2, r2, #14
 800176c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f022 0201 	bic.w	r2, r2, #1
 800177c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	461a      	mov	r2, r3
 8001784:	4b64      	ldr	r3, [pc, #400]	; (8001918 <HAL_DMA_Abort_IT+0x1dc>)
 8001786:	429a      	cmp	r2, r3
 8001788:	d958      	bls.n	800183c <HAL_DMA_Abort_IT+0x100>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a63      	ldr	r2, [pc, #396]	; (800191c <HAL_DMA_Abort_IT+0x1e0>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d04f      	beq.n	8001834 <HAL_DMA_Abort_IT+0xf8>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a61      	ldr	r2, [pc, #388]	; (8001920 <HAL_DMA_Abort_IT+0x1e4>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d048      	beq.n	8001830 <HAL_DMA_Abort_IT+0xf4>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a60      	ldr	r2, [pc, #384]	; (8001924 <HAL_DMA_Abort_IT+0x1e8>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d040      	beq.n	800182a <HAL_DMA_Abort_IT+0xee>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a5e      	ldr	r2, [pc, #376]	; (8001928 <HAL_DMA_Abort_IT+0x1ec>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d038      	beq.n	8001824 <HAL_DMA_Abort_IT+0xe8>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a5d      	ldr	r2, [pc, #372]	; (800192c <HAL_DMA_Abort_IT+0x1f0>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d030      	beq.n	800181e <HAL_DMA_Abort_IT+0xe2>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a5b      	ldr	r2, [pc, #364]	; (8001930 <HAL_DMA_Abort_IT+0x1f4>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d028      	beq.n	8001818 <HAL_DMA_Abort_IT+0xdc>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a53      	ldr	r2, [pc, #332]	; (8001918 <HAL_DMA_Abort_IT+0x1dc>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d020      	beq.n	8001812 <HAL_DMA_Abort_IT+0xd6>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a57      	ldr	r2, [pc, #348]	; (8001934 <HAL_DMA_Abort_IT+0x1f8>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d019      	beq.n	800180e <HAL_DMA_Abort_IT+0xd2>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a56      	ldr	r2, [pc, #344]	; (8001938 <HAL_DMA_Abort_IT+0x1fc>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d012      	beq.n	800180a <HAL_DMA_Abort_IT+0xce>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a54      	ldr	r2, [pc, #336]	; (800193c <HAL_DMA_Abort_IT+0x200>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d00a      	beq.n	8001804 <HAL_DMA_Abort_IT+0xc8>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a53      	ldr	r2, [pc, #332]	; (8001940 <HAL_DMA_Abort_IT+0x204>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d102      	bne.n	80017fe <HAL_DMA_Abort_IT+0xc2>
 80017f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017fc:	e01b      	b.n	8001836 <HAL_DMA_Abort_IT+0xfa>
 80017fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001802:	e018      	b.n	8001836 <HAL_DMA_Abort_IT+0xfa>
 8001804:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001808:	e015      	b.n	8001836 <HAL_DMA_Abort_IT+0xfa>
 800180a:	2310      	movs	r3, #16
 800180c:	e013      	b.n	8001836 <HAL_DMA_Abort_IT+0xfa>
 800180e:	2301      	movs	r3, #1
 8001810:	e011      	b.n	8001836 <HAL_DMA_Abort_IT+0xfa>
 8001812:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001816:	e00e      	b.n	8001836 <HAL_DMA_Abort_IT+0xfa>
 8001818:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800181c:	e00b      	b.n	8001836 <HAL_DMA_Abort_IT+0xfa>
 800181e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001822:	e008      	b.n	8001836 <HAL_DMA_Abort_IT+0xfa>
 8001824:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001828:	e005      	b.n	8001836 <HAL_DMA_Abort_IT+0xfa>
 800182a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800182e:	e002      	b.n	8001836 <HAL_DMA_Abort_IT+0xfa>
 8001830:	2310      	movs	r3, #16
 8001832:	e000      	b.n	8001836 <HAL_DMA_Abort_IT+0xfa>
 8001834:	2301      	movs	r3, #1
 8001836:	4a43      	ldr	r2, [pc, #268]	; (8001944 <HAL_DMA_Abort_IT+0x208>)
 8001838:	6053      	str	r3, [r2, #4]
 800183a:	e057      	b.n	80018ec <HAL_DMA_Abort_IT+0x1b0>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a36      	ldr	r2, [pc, #216]	; (800191c <HAL_DMA_Abort_IT+0x1e0>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d04f      	beq.n	80018e6 <HAL_DMA_Abort_IT+0x1aa>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a35      	ldr	r2, [pc, #212]	; (8001920 <HAL_DMA_Abort_IT+0x1e4>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d048      	beq.n	80018e2 <HAL_DMA_Abort_IT+0x1a6>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a33      	ldr	r2, [pc, #204]	; (8001924 <HAL_DMA_Abort_IT+0x1e8>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d040      	beq.n	80018dc <HAL_DMA_Abort_IT+0x1a0>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a32      	ldr	r2, [pc, #200]	; (8001928 <HAL_DMA_Abort_IT+0x1ec>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d038      	beq.n	80018d6 <HAL_DMA_Abort_IT+0x19a>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a30      	ldr	r2, [pc, #192]	; (800192c <HAL_DMA_Abort_IT+0x1f0>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d030      	beq.n	80018d0 <HAL_DMA_Abort_IT+0x194>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a2f      	ldr	r2, [pc, #188]	; (8001930 <HAL_DMA_Abort_IT+0x1f4>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d028      	beq.n	80018ca <HAL_DMA_Abort_IT+0x18e>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a26      	ldr	r2, [pc, #152]	; (8001918 <HAL_DMA_Abort_IT+0x1dc>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d020      	beq.n	80018c4 <HAL_DMA_Abort_IT+0x188>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a2b      	ldr	r2, [pc, #172]	; (8001934 <HAL_DMA_Abort_IT+0x1f8>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d019      	beq.n	80018c0 <HAL_DMA_Abort_IT+0x184>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a29      	ldr	r2, [pc, #164]	; (8001938 <HAL_DMA_Abort_IT+0x1fc>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d012      	beq.n	80018bc <HAL_DMA_Abort_IT+0x180>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a28      	ldr	r2, [pc, #160]	; (800193c <HAL_DMA_Abort_IT+0x200>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d00a      	beq.n	80018b6 <HAL_DMA_Abort_IT+0x17a>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a26      	ldr	r2, [pc, #152]	; (8001940 <HAL_DMA_Abort_IT+0x204>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d102      	bne.n	80018b0 <HAL_DMA_Abort_IT+0x174>
 80018aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018ae:	e01b      	b.n	80018e8 <HAL_DMA_Abort_IT+0x1ac>
 80018b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018b4:	e018      	b.n	80018e8 <HAL_DMA_Abort_IT+0x1ac>
 80018b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018ba:	e015      	b.n	80018e8 <HAL_DMA_Abort_IT+0x1ac>
 80018bc:	2310      	movs	r3, #16
 80018be:	e013      	b.n	80018e8 <HAL_DMA_Abort_IT+0x1ac>
 80018c0:	2301      	movs	r3, #1
 80018c2:	e011      	b.n	80018e8 <HAL_DMA_Abort_IT+0x1ac>
 80018c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80018c8:	e00e      	b.n	80018e8 <HAL_DMA_Abort_IT+0x1ac>
 80018ca:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80018ce:	e00b      	b.n	80018e8 <HAL_DMA_Abort_IT+0x1ac>
 80018d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018d4:	e008      	b.n	80018e8 <HAL_DMA_Abort_IT+0x1ac>
 80018d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018da:	e005      	b.n	80018e8 <HAL_DMA_Abort_IT+0x1ac>
 80018dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018e0:	e002      	b.n	80018e8 <HAL_DMA_Abort_IT+0x1ac>
 80018e2:	2310      	movs	r3, #16
 80018e4:	e000      	b.n	80018e8 <HAL_DMA_Abort_IT+0x1ac>
 80018e6:	2301      	movs	r3, #1
 80018e8:	4a17      	ldr	r2, [pc, #92]	; (8001948 <HAL_DMA_Abort_IT+0x20c>)
 80018ea:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2201      	movs	r2, #1
 80018f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2200      	movs	r2, #0
 80018f8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001900:	2b00      	cmp	r3, #0
 8001902:	d003      	beq.n	800190c <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	4798      	blx	r3
    } 
  }
  return status;
 800190c:	7bfb      	ldrb	r3, [r7, #15]
}
 800190e:	4618      	mov	r0, r3
 8001910:	3710      	adds	r7, #16
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	40020080 	.word	0x40020080
 800191c:	40020008 	.word	0x40020008
 8001920:	4002001c 	.word	0x4002001c
 8001924:	40020030 	.word	0x40020030
 8001928:	40020044 	.word	0x40020044
 800192c:	40020058 	.word	0x40020058
 8001930:	4002006c 	.word	0x4002006c
 8001934:	40020408 	.word	0x40020408
 8001938:	4002041c 	.word	0x4002041c
 800193c:	40020430 	.word	0x40020430
 8001940:	40020444 	.word	0x40020444
 8001944:	40020400 	.word	0x40020400
 8001948:	40020000 	.word	0x40020000

0800194c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001968:	2204      	movs	r2, #4
 800196a:	409a      	lsls	r2, r3
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	4013      	ands	r3, r2
 8001970:	2b00      	cmp	r3, #0
 8001972:	f000 80d6 	beq.w	8001b22 <HAL_DMA_IRQHandler+0x1d6>
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	f003 0304 	and.w	r3, r3, #4
 800197c:	2b00      	cmp	r3, #0
 800197e:	f000 80d0 	beq.w	8001b22 <HAL_DMA_IRQHandler+0x1d6>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 0320 	and.w	r3, r3, #32
 800198c:	2b00      	cmp	r3, #0
 800198e:	d107      	bne.n	80019a0 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f022 0204 	bic.w	r2, r2, #4
 800199e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	461a      	mov	r2, r3
 80019a6:	4b9b      	ldr	r3, [pc, #620]	; (8001c14 <HAL_DMA_IRQHandler+0x2c8>)
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d958      	bls.n	8001a5e <HAL_DMA_IRQHandler+0x112>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a99      	ldr	r2, [pc, #612]	; (8001c18 <HAL_DMA_IRQHandler+0x2cc>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d04f      	beq.n	8001a56 <HAL_DMA_IRQHandler+0x10a>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a98      	ldr	r2, [pc, #608]	; (8001c1c <HAL_DMA_IRQHandler+0x2d0>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d048      	beq.n	8001a52 <HAL_DMA_IRQHandler+0x106>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a96      	ldr	r2, [pc, #600]	; (8001c20 <HAL_DMA_IRQHandler+0x2d4>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d040      	beq.n	8001a4c <HAL_DMA_IRQHandler+0x100>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a95      	ldr	r2, [pc, #596]	; (8001c24 <HAL_DMA_IRQHandler+0x2d8>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d038      	beq.n	8001a46 <HAL_DMA_IRQHandler+0xfa>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a93      	ldr	r2, [pc, #588]	; (8001c28 <HAL_DMA_IRQHandler+0x2dc>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d030      	beq.n	8001a40 <HAL_DMA_IRQHandler+0xf4>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a92      	ldr	r2, [pc, #584]	; (8001c2c <HAL_DMA_IRQHandler+0x2e0>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d028      	beq.n	8001a3a <HAL_DMA_IRQHandler+0xee>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a89      	ldr	r2, [pc, #548]	; (8001c14 <HAL_DMA_IRQHandler+0x2c8>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d020      	beq.n	8001a34 <HAL_DMA_IRQHandler+0xe8>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a8e      	ldr	r2, [pc, #568]	; (8001c30 <HAL_DMA_IRQHandler+0x2e4>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d019      	beq.n	8001a30 <HAL_DMA_IRQHandler+0xe4>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a8c      	ldr	r2, [pc, #560]	; (8001c34 <HAL_DMA_IRQHandler+0x2e8>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d012      	beq.n	8001a2c <HAL_DMA_IRQHandler+0xe0>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a8b      	ldr	r2, [pc, #556]	; (8001c38 <HAL_DMA_IRQHandler+0x2ec>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d00a      	beq.n	8001a26 <HAL_DMA_IRQHandler+0xda>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a89      	ldr	r2, [pc, #548]	; (8001c3c <HAL_DMA_IRQHandler+0x2f0>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d102      	bne.n	8001a20 <HAL_DMA_IRQHandler+0xd4>
 8001a1a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a1e:	e01b      	b.n	8001a58 <HAL_DMA_IRQHandler+0x10c>
 8001a20:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001a24:	e018      	b.n	8001a58 <HAL_DMA_IRQHandler+0x10c>
 8001a26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a2a:	e015      	b.n	8001a58 <HAL_DMA_IRQHandler+0x10c>
 8001a2c:	2340      	movs	r3, #64	; 0x40
 8001a2e:	e013      	b.n	8001a58 <HAL_DMA_IRQHandler+0x10c>
 8001a30:	2304      	movs	r3, #4
 8001a32:	e011      	b.n	8001a58 <HAL_DMA_IRQHandler+0x10c>
 8001a34:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001a38:	e00e      	b.n	8001a58 <HAL_DMA_IRQHandler+0x10c>
 8001a3a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a3e:	e00b      	b.n	8001a58 <HAL_DMA_IRQHandler+0x10c>
 8001a40:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001a44:	e008      	b.n	8001a58 <HAL_DMA_IRQHandler+0x10c>
 8001a46:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a4a:	e005      	b.n	8001a58 <HAL_DMA_IRQHandler+0x10c>
 8001a4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a50:	e002      	b.n	8001a58 <HAL_DMA_IRQHandler+0x10c>
 8001a52:	2340      	movs	r3, #64	; 0x40
 8001a54:	e000      	b.n	8001a58 <HAL_DMA_IRQHandler+0x10c>
 8001a56:	2304      	movs	r3, #4
 8001a58:	4a79      	ldr	r2, [pc, #484]	; (8001c40 <HAL_DMA_IRQHandler+0x2f4>)
 8001a5a:	6053      	str	r3, [r2, #4]
 8001a5c:	e057      	b.n	8001b0e <HAL_DMA_IRQHandler+0x1c2>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a6d      	ldr	r2, [pc, #436]	; (8001c18 <HAL_DMA_IRQHandler+0x2cc>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d04f      	beq.n	8001b08 <HAL_DMA_IRQHandler+0x1bc>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a6b      	ldr	r2, [pc, #428]	; (8001c1c <HAL_DMA_IRQHandler+0x2d0>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d048      	beq.n	8001b04 <HAL_DMA_IRQHandler+0x1b8>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a6a      	ldr	r2, [pc, #424]	; (8001c20 <HAL_DMA_IRQHandler+0x2d4>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d040      	beq.n	8001afe <HAL_DMA_IRQHandler+0x1b2>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a68      	ldr	r2, [pc, #416]	; (8001c24 <HAL_DMA_IRQHandler+0x2d8>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d038      	beq.n	8001af8 <HAL_DMA_IRQHandler+0x1ac>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a67      	ldr	r2, [pc, #412]	; (8001c28 <HAL_DMA_IRQHandler+0x2dc>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d030      	beq.n	8001af2 <HAL_DMA_IRQHandler+0x1a6>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a65      	ldr	r2, [pc, #404]	; (8001c2c <HAL_DMA_IRQHandler+0x2e0>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d028      	beq.n	8001aec <HAL_DMA_IRQHandler+0x1a0>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a5d      	ldr	r2, [pc, #372]	; (8001c14 <HAL_DMA_IRQHandler+0x2c8>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d020      	beq.n	8001ae6 <HAL_DMA_IRQHandler+0x19a>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a61      	ldr	r2, [pc, #388]	; (8001c30 <HAL_DMA_IRQHandler+0x2e4>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d019      	beq.n	8001ae2 <HAL_DMA_IRQHandler+0x196>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a60      	ldr	r2, [pc, #384]	; (8001c34 <HAL_DMA_IRQHandler+0x2e8>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d012      	beq.n	8001ade <HAL_DMA_IRQHandler+0x192>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a5e      	ldr	r2, [pc, #376]	; (8001c38 <HAL_DMA_IRQHandler+0x2ec>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d00a      	beq.n	8001ad8 <HAL_DMA_IRQHandler+0x18c>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a5d      	ldr	r2, [pc, #372]	; (8001c3c <HAL_DMA_IRQHandler+0x2f0>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d102      	bne.n	8001ad2 <HAL_DMA_IRQHandler+0x186>
 8001acc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001ad0:	e01b      	b.n	8001b0a <HAL_DMA_IRQHandler+0x1be>
 8001ad2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001ad6:	e018      	b.n	8001b0a <HAL_DMA_IRQHandler+0x1be>
 8001ad8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001adc:	e015      	b.n	8001b0a <HAL_DMA_IRQHandler+0x1be>
 8001ade:	2340      	movs	r3, #64	; 0x40
 8001ae0:	e013      	b.n	8001b0a <HAL_DMA_IRQHandler+0x1be>
 8001ae2:	2304      	movs	r3, #4
 8001ae4:	e011      	b.n	8001b0a <HAL_DMA_IRQHandler+0x1be>
 8001ae6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001aea:	e00e      	b.n	8001b0a <HAL_DMA_IRQHandler+0x1be>
 8001aec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001af0:	e00b      	b.n	8001b0a <HAL_DMA_IRQHandler+0x1be>
 8001af2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001af6:	e008      	b.n	8001b0a <HAL_DMA_IRQHandler+0x1be>
 8001af8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001afc:	e005      	b.n	8001b0a <HAL_DMA_IRQHandler+0x1be>
 8001afe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b02:	e002      	b.n	8001b0a <HAL_DMA_IRQHandler+0x1be>
 8001b04:	2340      	movs	r3, #64	; 0x40
 8001b06:	e000      	b.n	8001b0a <HAL_DMA_IRQHandler+0x1be>
 8001b08:	2304      	movs	r3, #4
 8001b0a:	4a4e      	ldr	r2, [pc, #312]	; (8001c44 <HAL_DMA_IRQHandler+0x2f8>)
 8001b0c:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	f000 8136 	beq.w	8001d84 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001b20:	e130      	b.n	8001d84 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b26:	2202      	movs	r2, #2
 8001b28:	409a      	lsls	r2, r3
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	f000 80f8 	beq.w	8001d24 <HAL_DMA_IRQHandler+0x3d8>
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	f003 0302 	and.w	r3, r3, #2
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	f000 80f2 	beq.w	8001d24 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0320 	and.w	r3, r3, #32
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d10b      	bne.n	8001b66 <HAL_DMA_IRQHandler+0x21a>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f022 020a 	bic.w	r2, r2, #10
 8001b5c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2201      	movs	r2, #1
 8001b62:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	4b29      	ldr	r3, [pc, #164]	; (8001c14 <HAL_DMA_IRQHandler+0x2c8>)
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d973      	bls.n	8001c5a <HAL_DMA_IRQHandler+0x30e>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a28      	ldr	r2, [pc, #160]	; (8001c18 <HAL_DMA_IRQHandler+0x2cc>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d06a      	beq.n	8001c52 <HAL_DMA_IRQHandler+0x306>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a26      	ldr	r2, [pc, #152]	; (8001c1c <HAL_DMA_IRQHandler+0x2d0>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d063      	beq.n	8001c4e <HAL_DMA_IRQHandler+0x302>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a25      	ldr	r2, [pc, #148]	; (8001c20 <HAL_DMA_IRQHandler+0x2d4>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d05b      	beq.n	8001c48 <HAL_DMA_IRQHandler+0x2fc>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a23      	ldr	r2, [pc, #140]	; (8001c24 <HAL_DMA_IRQHandler+0x2d8>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d038      	beq.n	8001c0c <HAL_DMA_IRQHandler+0x2c0>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a22      	ldr	r2, [pc, #136]	; (8001c28 <HAL_DMA_IRQHandler+0x2dc>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d030      	beq.n	8001c06 <HAL_DMA_IRQHandler+0x2ba>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a20      	ldr	r2, [pc, #128]	; (8001c2c <HAL_DMA_IRQHandler+0x2e0>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d028      	beq.n	8001c00 <HAL_DMA_IRQHandler+0x2b4>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a18      	ldr	r2, [pc, #96]	; (8001c14 <HAL_DMA_IRQHandler+0x2c8>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d020      	beq.n	8001bfa <HAL_DMA_IRQHandler+0x2ae>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a1c      	ldr	r2, [pc, #112]	; (8001c30 <HAL_DMA_IRQHandler+0x2e4>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d019      	beq.n	8001bf6 <HAL_DMA_IRQHandler+0x2aa>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a1b      	ldr	r2, [pc, #108]	; (8001c34 <HAL_DMA_IRQHandler+0x2e8>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d012      	beq.n	8001bf2 <HAL_DMA_IRQHandler+0x2a6>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a19      	ldr	r2, [pc, #100]	; (8001c38 <HAL_DMA_IRQHandler+0x2ec>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d00a      	beq.n	8001bec <HAL_DMA_IRQHandler+0x2a0>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a18      	ldr	r2, [pc, #96]	; (8001c3c <HAL_DMA_IRQHandler+0x2f0>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d102      	bne.n	8001be6 <HAL_DMA_IRQHandler+0x29a>
 8001be0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001be4:	e036      	b.n	8001c54 <HAL_DMA_IRQHandler+0x308>
 8001be6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bea:	e033      	b.n	8001c54 <HAL_DMA_IRQHandler+0x308>
 8001bec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bf0:	e030      	b.n	8001c54 <HAL_DMA_IRQHandler+0x308>
 8001bf2:	2320      	movs	r3, #32
 8001bf4:	e02e      	b.n	8001c54 <HAL_DMA_IRQHandler+0x308>
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	e02c      	b.n	8001c54 <HAL_DMA_IRQHandler+0x308>
 8001bfa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001bfe:	e029      	b.n	8001c54 <HAL_DMA_IRQHandler+0x308>
 8001c00:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001c04:	e026      	b.n	8001c54 <HAL_DMA_IRQHandler+0x308>
 8001c06:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c0a:	e023      	b.n	8001c54 <HAL_DMA_IRQHandler+0x308>
 8001c0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c10:	e020      	b.n	8001c54 <HAL_DMA_IRQHandler+0x308>
 8001c12:	bf00      	nop
 8001c14:	40020080 	.word	0x40020080
 8001c18:	40020008 	.word	0x40020008
 8001c1c:	4002001c 	.word	0x4002001c
 8001c20:	40020030 	.word	0x40020030
 8001c24:	40020044 	.word	0x40020044
 8001c28:	40020058 	.word	0x40020058
 8001c2c:	4002006c 	.word	0x4002006c
 8001c30:	40020408 	.word	0x40020408
 8001c34:	4002041c 	.word	0x4002041c
 8001c38:	40020430 	.word	0x40020430
 8001c3c:	40020444 	.word	0x40020444
 8001c40:	40020400 	.word	0x40020400
 8001c44:	40020000 	.word	0x40020000
 8001c48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c4c:	e002      	b.n	8001c54 <HAL_DMA_IRQHandler+0x308>
 8001c4e:	2320      	movs	r3, #32
 8001c50:	e000      	b.n	8001c54 <HAL_DMA_IRQHandler+0x308>
 8001c52:	2302      	movs	r3, #2
 8001c54:	4a4e      	ldr	r2, [pc, #312]	; (8001d90 <HAL_DMA_IRQHandler+0x444>)
 8001c56:	6053      	str	r3, [r2, #4]
 8001c58:	e057      	b.n	8001d0a <HAL_DMA_IRQHandler+0x3be>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a4d      	ldr	r2, [pc, #308]	; (8001d94 <HAL_DMA_IRQHandler+0x448>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d04f      	beq.n	8001d04 <HAL_DMA_IRQHandler+0x3b8>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a4b      	ldr	r2, [pc, #300]	; (8001d98 <HAL_DMA_IRQHandler+0x44c>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d048      	beq.n	8001d00 <HAL_DMA_IRQHandler+0x3b4>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a4a      	ldr	r2, [pc, #296]	; (8001d9c <HAL_DMA_IRQHandler+0x450>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d040      	beq.n	8001cfa <HAL_DMA_IRQHandler+0x3ae>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a48      	ldr	r2, [pc, #288]	; (8001da0 <HAL_DMA_IRQHandler+0x454>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d038      	beq.n	8001cf4 <HAL_DMA_IRQHandler+0x3a8>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a47      	ldr	r2, [pc, #284]	; (8001da4 <HAL_DMA_IRQHandler+0x458>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d030      	beq.n	8001cee <HAL_DMA_IRQHandler+0x3a2>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a45      	ldr	r2, [pc, #276]	; (8001da8 <HAL_DMA_IRQHandler+0x45c>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d028      	beq.n	8001ce8 <HAL_DMA_IRQHandler+0x39c>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a44      	ldr	r2, [pc, #272]	; (8001dac <HAL_DMA_IRQHandler+0x460>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d020      	beq.n	8001ce2 <HAL_DMA_IRQHandler+0x396>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a42      	ldr	r2, [pc, #264]	; (8001db0 <HAL_DMA_IRQHandler+0x464>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d019      	beq.n	8001cde <HAL_DMA_IRQHandler+0x392>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a41      	ldr	r2, [pc, #260]	; (8001db4 <HAL_DMA_IRQHandler+0x468>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d012      	beq.n	8001cda <HAL_DMA_IRQHandler+0x38e>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a3f      	ldr	r2, [pc, #252]	; (8001db8 <HAL_DMA_IRQHandler+0x46c>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d00a      	beq.n	8001cd4 <HAL_DMA_IRQHandler+0x388>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a3e      	ldr	r2, [pc, #248]	; (8001dbc <HAL_DMA_IRQHandler+0x470>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d102      	bne.n	8001cce <HAL_DMA_IRQHandler+0x382>
 8001cc8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ccc:	e01b      	b.n	8001d06 <HAL_DMA_IRQHandler+0x3ba>
 8001cce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cd2:	e018      	b.n	8001d06 <HAL_DMA_IRQHandler+0x3ba>
 8001cd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cd8:	e015      	b.n	8001d06 <HAL_DMA_IRQHandler+0x3ba>
 8001cda:	2320      	movs	r3, #32
 8001cdc:	e013      	b.n	8001d06 <HAL_DMA_IRQHandler+0x3ba>
 8001cde:	2302      	movs	r3, #2
 8001ce0:	e011      	b.n	8001d06 <HAL_DMA_IRQHandler+0x3ba>
 8001ce2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ce6:	e00e      	b.n	8001d06 <HAL_DMA_IRQHandler+0x3ba>
 8001ce8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001cec:	e00b      	b.n	8001d06 <HAL_DMA_IRQHandler+0x3ba>
 8001cee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cf2:	e008      	b.n	8001d06 <HAL_DMA_IRQHandler+0x3ba>
 8001cf4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cf8:	e005      	b.n	8001d06 <HAL_DMA_IRQHandler+0x3ba>
 8001cfa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cfe:	e002      	b.n	8001d06 <HAL_DMA_IRQHandler+0x3ba>
 8001d00:	2320      	movs	r3, #32
 8001d02:	e000      	b.n	8001d06 <HAL_DMA_IRQHandler+0x3ba>
 8001d04:	2302      	movs	r3, #2
 8001d06:	4a2e      	ldr	r2, [pc, #184]	; (8001dc0 <HAL_DMA_IRQHandler+0x474>)
 8001d08:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d034      	beq.n	8001d84 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001d22:	e02f      	b.n	8001d84 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d28:	2208      	movs	r2, #8
 8001d2a:	409a      	lsls	r2, r3
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	4013      	ands	r3, r2
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d028      	beq.n	8001d86 <HAL_DMA_IRQHandler+0x43a>
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	f003 0308 	and.w	r3, r3, #8
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d023      	beq.n	8001d86 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f022 020e 	bic.w	r2, r2, #14
 8001d4c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d56:	2101      	movs	r1, #1
 8001d58:	fa01 f202 	lsl.w	r2, r1, r2
 8001d5c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2201      	movs	r2, #1
 8001d62:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2201      	movs	r2, #1
 8001d68:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d004      	beq.n	8001d86 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	4798      	blx	r3
    }
  }
  return;
 8001d84:	bf00      	nop
 8001d86:	bf00      	nop
}
 8001d88:	3710      	adds	r7, #16
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	40020400 	.word	0x40020400
 8001d94:	40020008 	.word	0x40020008
 8001d98:	4002001c 	.word	0x4002001c
 8001d9c:	40020030 	.word	0x40020030
 8001da0:	40020044 	.word	0x40020044
 8001da4:	40020058 	.word	0x40020058
 8001da8:	4002006c 	.word	0x4002006c
 8001dac:	40020080 	.word	0x40020080
 8001db0:	40020408 	.word	0x40020408
 8001db4:	4002041c 	.word	0x4002041c
 8001db8:	40020430 	.word	0x40020430
 8001dbc:	40020444 	.word	0x40020444
 8001dc0:	40020000 	.word	0x40020000

08001dc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b08b      	sub	sp, #44	; 0x2c
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dd6:	e179      	b.n	80020cc <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001dd8:	2201      	movs	r2, #1
 8001dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	69fa      	ldr	r2, [r7, #28]
 8001de8:	4013      	ands	r3, r2
 8001dea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	f040 8168 	bne.w	80020c6 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	4aa0      	ldr	r2, [pc, #640]	; (800207c <HAL_GPIO_Init+0x2b8>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d05e      	beq.n	8001ebe <HAL_GPIO_Init+0xfa>
 8001e00:	4a9e      	ldr	r2, [pc, #632]	; (800207c <HAL_GPIO_Init+0x2b8>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d875      	bhi.n	8001ef2 <HAL_GPIO_Init+0x12e>
 8001e06:	4a9e      	ldr	r2, [pc, #632]	; (8002080 <HAL_GPIO_Init+0x2bc>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d058      	beq.n	8001ebe <HAL_GPIO_Init+0xfa>
 8001e0c:	4a9c      	ldr	r2, [pc, #624]	; (8002080 <HAL_GPIO_Init+0x2bc>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d86f      	bhi.n	8001ef2 <HAL_GPIO_Init+0x12e>
 8001e12:	4a9c      	ldr	r2, [pc, #624]	; (8002084 <HAL_GPIO_Init+0x2c0>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d052      	beq.n	8001ebe <HAL_GPIO_Init+0xfa>
 8001e18:	4a9a      	ldr	r2, [pc, #616]	; (8002084 <HAL_GPIO_Init+0x2c0>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d869      	bhi.n	8001ef2 <HAL_GPIO_Init+0x12e>
 8001e1e:	4a9a      	ldr	r2, [pc, #616]	; (8002088 <HAL_GPIO_Init+0x2c4>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d04c      	beq.n	8001ebe <HAL_GPIO_Init+0xfa>
 8001e24:	4a98      	ldr	r2, [pc, #608]	; (8002088 <HAL_GPIO_Init+0x2c4>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d863      	bhi.n	8001ef2 <HAL_GPIO_Init+0x12e>
 8001e2a:	4a98      	ldr	r2, [pc, #608]	; (800208c <HAL_GPIO_Init+0x2c8>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d046      	beq.n	8001ebe <HAL_GPIO_Init+0xfa>
 8001e30:	4a96      	ldr	r2, [pc, #600]	; (800208c <HAL_GPIO_Init+0x2c8>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d85d      	bhi.n	8001ef2 <HAL_GPIO_Init+0x12e>
 8001e36:	2b12      	cmp	r3, #18
 8001e38:	d82a      	bhi.n	8001e90 <HAL_GPIO_Init+0xcc>
 8001e3a:	2b12      	cmp	r3, #18
 8001e3c:	d859      	bhi.n	8001ef2 <HAL_GPIO_Init+0x12e>
 8001e3e:	a201      	add	r2, pc, #4	; (adr r2, 8001e44 <HAL_GPIO_Init+0x80>)
 8001e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e44:	08001ebf 	.word	0x08001ebf
 8001e48:	08001e99 	.word	0x08001e99
 8001e4c:	08001eab 	.word	0x08001eab
 8001e50:	08001eed 	.word	0x08001eed
 8001e54:	08001ef3 	.word	0x08001ef3
 8001e58:	08001ef3 	.word	0x08001ef3
 8001e5c:	08001ef3 	.word	0x08001ef3
 8001e60:	08001ef3 	.word	0x08001ef3
 8001e64:	08001ef3 	.word	0x08001ef3
 8001e68:	08001ef3 	.word	0x08001ef3
 8001e6c:	08001ef3 	.word	0x08001ef3
 8001e70:	08001ef3 	.word	0x08001ef3
 8001e74:	08001ef3 	.word	0x08001ef3
 8001e78:	08001ef3 	.word	0x08001ef3
 8001e7c:	08001ef3 	.word	0x08001ef3
 8001e80:	08001ef3 	.word	0x08001ef3
 8001e84:	08001ef3 	.word	0x08001ef3
 8001e88:	08001ea1 	.word	0x08001ea1
 8001e8c:	08001eb5 	.word	0x08001eb5
 8001e90:	4a7f      	ldr	r2, [pc, #508]	; (8002090 <HAL_GPIO_Init+0x2cc>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d013      	beq.n	8001ebe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e96:	e02c      	b.n	8001ef2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	623b      	str	r3, [r7, #32]
          break;
 8001e9e:	e029      	b.n	8001ef4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	3304      	adds	r3, #4
 8001ea6:	623b      	str	r3, [r7, #32]
          break;
 8001ea8:	e024      	b.n	8001ef4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	68db      	ldr	r3, [r3, #12]
 8001eae:	3308      	adds	r3, #8
 8001eb0:	623b      	str	r3, [r7, #32]
          break;
 8001eb2:	e01f      	b.n	8001ef4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	330c      	adds	r3, #12
 8001eba:	623b      	str	r3, [r7, #32]
          break;
 8001ebc:	e01a      	b.n	8001ef4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d102      	bne.n	8001ecc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ec6:	2304      	movs	r3, #4
 8001ec8:	623b      	str	r3, [r7, #32]
          break;
 8001eca:	e013      	b.n	8001ef4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d105      	bne.n	8001ee0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ed4:	2308      	movs	r3, #8
 8001ed6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	69fa      	ldr	r2, [r7, #28]
 8001edc:	611a      	str	r2, [r3, #16]
          break;
 8001ede:	e009      	b.n	8001ef4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ee0:	2308      	movs	r3, #8
 8001ee2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	69fa      	ldr	r2, [r7, #28]
 8001ee8:	615a      	str	r2, [r3, #20]
          break;
 8001eea:	e003      	b.n	8001ef4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001eec:	2300      	movs	r3, #0
 8001eee:	623b      	str	r3, [r7, #32]
          break;
 8001ef0:	e000      	b.n	8001ef4 <HAL_GPIO_Init+0x130>
          break;
 8001ef2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ef4:	69bb      	ldr	r3, [r7, #24]
 8001ef6:	2bff      	cmp	r3, #255	; 0xff
 8001ef8:	d801      	bhi.n	8001efe <HAL_GPIO_Init+0x13a>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	e001      	b.n	8001f02 <HAL_GPIO_Init+0x13e>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	3304      	adds	r3, #4
 8001f02:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f04:	69bb      	ldr	r3, [r7, #24]
 8001f06:	2bff      	cmp	r3, #255	; 0xff
 8001f08:	d802      	bhi.n	8001f10 <HAL_GPIO_Init+0x14c>
 8001f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	e002      	b.n	8001f16 <HAL_GPIO_Init+0x152>
 8001f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f12:	3b08      	subs	r3, #8
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	210f      	movs	r1, #15
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	fa01 f303 	lsl.w	r3, r1, r3
 8001f24:	43db      	mvns	r3, r3
 8001f26:	401a      	ands	r2, r3
 8001f28:	6a39      	ldr	r1, [r7, #32]
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f30:	431a      	orrs	r2, r3
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	f000 80c1 	beq.w	80020c6 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f44:	4b53      	ldr	r3, [pc, #332]	; (8002094 <HAL_GPIO_Init+0x2d0>)
 8001f46:	699b      	ldr	r3, [r3, #24]
 8001f48:	4a52      	ldr	r2, [pc, #328]	; (8002094 <HAL_GPIO_Init+0x2d0>)
 8001f4a:	f043 0301 	orr.w	r3, r3, #1
 8001f4e:	6193      	str	r3, [r2, #24]
 8001f50:	4b50      	ldr	r3, [pc, #320]	; (8002094 <HAL_GPIO_Init+0x2d0>)
 8001f52:	699b      	ldr	r3, [r3, #24]
 8001f54:	f003 0301 	and.w	r3, r3, #1
 8001f58:	60bb      	str	r3, [r7, #8]
 8001f5a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f5c:	4a4e      	ldr	r2, [pc, #312]	; (8002098 <HAL_GPIO_Init+0x2d4>)
 8001f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f60:	089b      	lsrs	r3, r3, #2
 8001f62:	3302      	adds	r3, #2
 8001f64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f68:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6c:	f003 0303 	and.w	r3, r3, #3
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	220f      	movs	r2, #15
 8001f74:	fa02 f303 	lsl.w	r3, r2, r3
 8001f78:	43db      	mvns	r3, r3
 8001f7a:	68fa      	ldr	r2, [r7, #12]
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	4a46      	ldr	r2, [pc, #280]	; (800209c <HAL_GPIO_Init+0x2d8>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d01f      	beq.n	8001fc8 <HAL_GPIO_Init+0x204>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	4a45      	ldr	r2, [pc, #276]	; (80020a0 <HAL_GPIO_Init+0x2dc>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d019      	beq.n	8001fc4 <HAL_GPIO_Init+0x200>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	4a44      	ldr	r2, [pc, #272]	; (80020a4 <HAL_GPIO_Init+0x2e0>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d013      	beq.n	8001fc0 <HAL_GPIO_Init+0x1fc>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	4a43      	ldr	r2, [pc, #268]	; (80020a8 <HAL_GPIO_Init+0x2e4>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d00d      	beq.n	8001fbc <HAL_GPIO_Init+0x1f8>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	4a42      	ldr	r2, [pc, #264]	; (80020ac <HAL_GPIO_Init+0x2e8>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d007      	beq.n	8001fb8 <HAL_GPIO_Init+0x1f4>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	4a41      	ldr	r2, [pc, #260]	; (80020b0 <HAL_GPIO_Init+0x2ec>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d101      	bne.n	8001fb4 <HAL_GPIO_Init+0x1f0>
 8001fb0:	2305      	movs	r3, #5
 8001fb2:	e00a      	b.n	8001fca <HAL_GPIO_Init+0x206>
 8001fb4:	2306      	movs	r3, #6
 8001fb6:	e008      	b.n	8001fca <HAL_GPIO_Init+0x206>
 8001fb8:	2304      	movs	r3, #4
 8001fba:	e006      	b.n	8001fca <HAL_GPIO_Init+0x206>
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e004      	b.n	8001fca <HAL_GPIO_Init+0x206>
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	e002      	b.n	8001fca <HAL_GPIO_Init+0x206>
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e000      	b.n	8001fca <HAL_GPIO_Init+0x206>
 8001fc8:	2300      	movs	r3, #0
 8001fca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fcc:	f002 0203 	and.w	r2, r2, #3
 8001fd0:	0092      	lsls	r2, r2, #2
 8001fd2:	4093      	lsls	r3, r2
 8001fd4:	68fa      	ldr	r2, [r7, #12]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001fda:	492f      	ldr	r1, [pc, #188]	; (8002098 <HAL_GPIO_Init+0x2d4>)
 8001fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fde:	089b      	lsrs	r3, r3, #2
 8001fe0:	3302      	adds	r3, #2
 8001fe2:	68fa      	ldr	r2, [r7, #12]
 8001fe4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d006      	beq.n	8002002 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ff4:	4b2f      	ldr	r3, [pc, #188]	; (80020b4 <HAL_GPIO_Init+0x2f0>)
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	492e      	ldr	r1, [pc, #184]	; (80020b4 <HAL_GPIO_Init+0x2f0>)
 8001ffa:	69bb      	ldr	r3, [r7, #24]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	600b      	str	r3, [r1, #0]
 8002000:	e006      	b.n	8002010 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002002:	4b2c      	ldr	r3, [pc, #176]	; (80020b4 <HAL_GPIO_Init+0x2f0>)
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	69bb      	ldr	r3, [r7, #24]
 8002008:	43db      	mvns	r3, r3
 800200a:	492a      	ldr	r1, [pc, #168]	; (80020b4 <HAL_GPIO_Init+0x2f0>)
 800200c:	4013      	ands	r3, r2
 800200e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002018:	2b00      	cmp	r3, #0
 800201a:	d006      	beq.n	800202a <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800201c:	4b25      	ldr	r3, [pc, #148]	; (80020b4 <HAL_GPIO_Init+0x2f0>)
 800201e:	685a      	ldr	r2, [r3, #4]
 8002020:	4924      	ldr	r1, [pc, #144]	; (80020b4 <HAL_GPIO_Init+0x2f0>)
 8002022:	69bb      	ldr	r3, [r7, #24]
 8002024:	4313      	orrs	r3, r2
 8002026:	604b      	str	r3, [r1, #4]
 8002028:	e006      	b.n	8002038 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800202a:	4b22      	ldr	r3, [pc, #136]	; (80020b4 <HAL_GPIO_Init+0x2f0>)
 800202c:	685a      	ldr	r2, [r3, #4]
 800202e:	69bb      	ldr	r3, [r7, #24]
 8002030:	43db      	mvns	r3, r3
 8002032:	4920      	ldr	r1, [pc, #128]	; (80020b4 <HAL_GPIO_Init+0x2f0>)
 8002034:	4013      	ands	r3, r2
 8002036:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002040:	2b00      	cmp	r3, #0
 8002042:	d006      	beq.n	8002052 <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002044:	4b1b      	ldr	r3, [pc, #108]	; (80020b4 <HAL_GPIO_Init+0x2f0>)
 8002046:	689a      	ldr	r2, [r3, #8]
 8002048:	491a      	ldr	r1, [pc, #104]	; (80020b4 <HAL_GPIO_Init+0x2f0>)
 800204a:	69bb      	ldr	r3, [r7, #24]
 800204c:	4313      	orrs	r3, r2
 800204e:	608b      	str	r3, [r1, #8]
 8002050:	e006      	b.n	8002060 <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002052:	4b18      	ldr	r3, [pc, #96]	; (80020b4 <HAL_GPIO_Init+0x2f0>)
 8002054:	689a      	ldr	r2, [r3, #8]
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	43db      	mvns	r3, r3
 800205a:	4916      	ldr	r1, [pc, #88]	; (80020b4 <HAL_GPIO_Init+0x2f0>)
 800205c:	4013      	ands	r3, r2
 800205e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002068:	2b00      	cmp	r3, #0
 800206a:	d025      	beq.n	80020b8 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800206c:	4b11      	ldr	r3, [pc, #68]	; (80020b4 <HAL_GPIO_Init+0x2f0>)
 800206e:	68da      	ldr	r2, [r3, #12]
 8002070:	4910      	ldr	r1, [pc, #64]	; (80020b4 <HAL_GPIO_Init+0x2f0>)
 8002072:	69bb      	ldr	r3, [r7, #24]
 8002074:	4313      	orrs	r3, r2
 8002076:	60cb      	str	r3, [r1, #12]
 8002078:	e025      	b.n	80020c6 <HAL_GPIO_Init+0x302>
 800207a:	bf00      	nop
 800207c:	10320000 	.word	0x10320000
 8002080:	10310000 	.word	0x10310000
 8002084:	10220000 	.word	0x10220000
 8002088:	10210000 	.word	0x10210000
 800208c:	10120000 	.word	0x10120000
 8002090:	10110000 	.word	0x10110000
 8002094:	40021000 	.word	0x40021000
 8002098:	40010000 	.word	0x40010000
 800209c:	40010800 	.word	0x40010800
 80020a0:	40010c00 	.word	0x40010c00
 80020a4:	40011000 	.word	0x40011000
 80020a8:	40011400 	.word	0x40011400
 80020ac:	40011800 	.word	0x40011800
 80020b0:	40011c00 	.word	0x40011c00
 80020b4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80020b8:	4b0b      	ldr	r3, [pc, #44]	; (80020e8 <HAL_GPIO_Init+0x324>)
 80020ba:	68da      	ldr	r2, [r3, #12]
 80020bc:	69bb      	ldr	r3, [r7, #24]
 80020be:	43db      	mvns	r3, r3
 80020c0:	4909      	ldr	r1, [pc, #36]	; (80020e8 <HAL_GPIO_Init+0x324>)
 80020c2:	4013      	ands	r3, r2
 80020c4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80020c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c8:	3301      	adds	r3, #1
 80020ca:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d2:	fa22 f303 	lsr.w	r3, r2, r3
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	f47f ae7e 	bne.w	8001dd8 <HAL_GPIO_Init+0x14>
  }
}
 80020dc:	bf00      	nop
 80020de:	bf00      	nop
 80020e0:	372c      	adds	r7, #44	; 0x2c
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bc80      	pop	{r7}
 80020e6:	4770      	bx	lr
 80020e8:	40010400 	.word	0x40010400

080020ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b085      	sub	sp, #20
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	460b      	mov	r3, r1
 80020f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	689a      	ldr	r2, [r3, #8]
 80020fc:	887b      	ldrh	r3, [r7, #2]
 80020fe:	4013      	ands	r3, r2
 8002100:	2b00      	cmp	r3, #0
 8002102:	d002      	beq.n	800210a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002104:	2301      	movs	r3, #1
 8002106:	73fb      	strb	r3, [r7, #15]
 8002108:	e001      	b.n	800210e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800210a:	2300      	movs	r3, #0
 800210c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800210e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002110:	4618      	mov	r0, r3
 8002112:	3714      	adds	r7, #20
 8002114:	46bd      	mov	sp, r7
 8002116:	bc80      	pop	{r7}
 8002118:	4770      	bx	lr

0800211a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800211a:	b480      	push	{r7}
 800211c:	b083      	sub	sp, #12
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
 8002122:	460b      	mov	r3, r1
 8002124:	807b      	strh	r3, [r7, #2]
 8002126:	4613      	mov	r3, r2
 8002128:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800212a:	787b      	ldrb	r3, [r7, #1]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d003      	beq.n	8002138 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002130:	887a      	ldrh	r2, [r7, #2]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002136:	e003      	b.n	8002140 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002138:	887b      	ldrh	r3, [r7, #2]
 800213a:	041a      	lsls	r2, r3, #16
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	611a      	str	r2, [r3, #16]
}
 8002140:	bf00      	nop
 8002142:	370c      	adds	r7, #12
 8002144:	46bd      	mov	sp, r7
 8002146:	bc80      	pop	{r7}
 8002148:	4770      	bx	lr
	...

0800214c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	4603      	mov	r3, r0
 8002154:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002156:	4b08      	ldr	r3, [pc, #32]	; (8002178 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002158:	695a      	ldr	r2, [r3, #20]
 800215a:	88fb      	ldrh	r3, [r7, #6]
 800215c:	4013      	ands	r3, r2
 800215e:	2b00      	cmp	r3, #0
 8002160:	d006      	beq.n	8002170 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002162:	4a05      	ldr	r2, [pc, #20]	; (8002178 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002164:	88fb      	ldrh	r3, [r7, #6]
 8002166:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002168:	88fb      	ldrh	r3, [r7, #6]
 800216a:	4618      	mov	r0, r3
 800216c:	f7fe fd1c 	bl	8000ba8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002170:	bf00      	nop
 8002172:	3708      	adds	r7, #8
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	40010400 	.word	0x40010400

0800217c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d101      	bne.n	800218e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e12b      	b.n	80023e6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002194:	b2db      	uxtb	r3, r3
 8002196:	2b00      	cmp	r3, #0
 8002198:	d106      	bne.n	80021a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2200      	movs	r2, #0
 800219e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f7fe fc08 	bl	80009b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2224      	movs	r2, #36	; 0x24
 80021ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f022 0201 	bic.w	r2, r2, #1
 80021be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80021e0:	f000 fffa 	bl	80031d8 <HAL_RCC_GetPCLK1Freq>
 80021e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	4a81      	ldr	r2, [pc, #516]	; (80023f0 <HAL_I2C_Init+0x274>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d807      	bhi.n	8002200 <HAL_I2C_Init+0x84>
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	4a80      	ldr	r2, [pc, #512]	; (80023f4 <HAL_I2C_Init+0x278>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	bf94      	ite	ls
 80021f8:	2301      	movls	r3, #1
 80021fa:	2300      	movhi	r3, #0
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	e006      	b.n	800220e <HAL_I2C_Init+0x92>
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	4a7d      	ldr	r2, [pc, #500]	; (80023f8 <HAL_I2C_Init+0x27c>)
 8002204:	4293      	cmp	r3, r2
 8002206:	bf94      	ite	ls
 8002208:	2301      	movls	r3, #1
 800220a:	2300      	movhi	r3, #0
 800220c:	b2db      	uxtb	r3, r3
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e0e7      	b.n	80023e6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	4a78      	ldr	r2, [pc, #480]	; (80023fc <HAL_I2C_Init+0x280>)
 800221a:	fba2 2303 	umull	r2, r3, r2, r3
 800221e:	0c9b      	lsrs	r3, r3, #18
 8002220:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	68ba      	ldr	r2, [r7, #8]
 8002232:	430a      	orrs	r2, r1
 8002234:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	6a1b      	ldr	r3, [r3, #32]
 800223c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	4a6a      	ldr	r2, [pc, #424]	; (80023f0 <HAL_I2C_Init+0x274>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d802      	bhi.n	8002250 <HAL_I2C_Init+0xd4>
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	3301      	adds	r3, #1
 800224e:	e009      	b.n	8002264 <HAL_I2C_Init+0xe8>
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002256:	fb02 f303 	mul.w	r3, r2, r3
 800225a:	4a69      	ldr	r2, [pc, #420]	; (8002400 <HAL_I2C_Init+0x284>)
 800225c:	fba2 2303 	umull	r2, r3, r2, r3
 8002260:	099b      	lsrs	r3, r3, #6
 8002262:	3301      	adds	r3, #1
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	6812      	ldr	r2, [r2, #0]
 8002268:	430b      	orrs	r3, r1
 800226a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	69db      	ldr	r3, [r3, #28]
 8002272:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002276:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	495c      	ldr	r1, [pc, #368]	; (80023f0 <HAL_I2C_Init+0x274>)
 8002280:	428b      	cmp	r3, r1
 8002282:	d819      	bhi.n	80022b8 <HAL_I2C_Init+0x13c>
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	1e59      	subs	r1, r3, #1
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	005b      	lsls	r3, r3, #1
 800228e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002292:	1c59      	adds	r1, r3, #1
 8002294:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002298:	400b      	ands	r3, r1
 800229a:	2b00      	cmp	r3, #0
 800229c:	d00a      	beq.n	80022b4 <HAL_I2C_Init+0x138>
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	1e59      	subs	r1, r3, #1
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	005b      	lsls	r3, r3, #1
 80022a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80022ac:	3301      	adds	r3, #1
 80022ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022b2:	e051      	b.n	8002358 <HAL_I2C_Init+0x1dc>
 80022b4:	2304      	movs	r3, #4
 80022b6:	e04f      	b.n	8002358 <HAL_I2C_Init+0x1dc>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d111      	bne.n	80022e4 <HAL_I2C_Init+0x168>
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	1e58      	subs	r0, r3, #1
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6859      	ldr	r1, [r3, #4]
 80022c8:	460b      	mov	r3, r1
 80022ca:	005b      	lsls	r3, r3, #1
 80022cc:	440b      	add	r3, r1
 80022ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80022d2:	3301      	adds	r3, #1
 80022d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022d8:	2b00      	cmp	r3, #0
 80022da:	bf0c      	ite	eq
 80022dc:	2301      	moveq	r3, #1
 80022de:	2300      	movne	r3, #0
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	e012      	b.n	800230a <HAL_I2C_Init+0x18e>
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	1e58      	subs	r0, r3, #1
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6859      	ldr	r1, [r3, #4]
 80022ec:	460b      	mov	r3, r1
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	440b      	add	r3, r1
 80022f2:	0099      	lsls	r1, r3, #2
 80022f4:	440b      	add	r3, r1
 80022f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80022fa:	3301      	adds	r3, #1
 80022fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002300:	2b00      	cmp	r3, #0
 8002302:	bf0c      	ite	eq
 8002304:	2301      	moveq	r3, #1
 8002306:	2300      	movne	r3, #0
 8002308:	b2db      	uxtb	r3, r3
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <HAL_I2C_Init+0x196>
 800230e:	2301      	movs	r3, #1
 8002310:	e022      	b.n	8002358 <HAL_I2C_Init+0x1dc>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d10e      	bne.n	8002338 <HAL_I2C_Init+0x1bc>
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	1e58      	subs	r0, r3, #1
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6859      	ldr	r1, [r3, #4]
 8002322:	460b      	mov	r3, r1
 8002324:	005b      	lsls	r3, r3, #1
 8002326:	440b      	add	r3, r1
 8002328:	fbb0 f3f3 	udiv	r3, r0, r3
 800232c:	3301      	adds	r3, #1
 800232e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002332:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002336:	e00f      	b.n	8002358 <HAL_I2C_Init+0x1dc>
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	1e58      	subs	r0, r3, #1
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6859      	ldr	r1, [r3, #4]
 8002340:	460b      	mov	r3, r1
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	440b      	add	r3, r1
 8002346:	0099      	lsls	r1, r3, #2
 8002348:	440b      	add	r3, r1
 800234a:	fbb0 f3f3 	udiv	r3, r0, r3
 800234e:	3301      	adds	r3, #1
 8002350:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002354:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002358:	6879      	ldr	r1, [r7, #4]
 800235a:	6809      	ldr	r1, [r1, #0]
 800235c:	4313      	orrs	r3, r2
 800235e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	69da      	ldr	r2, [r3, #28]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6a1b      	ldr	r3, [r3, #32]
 8002372:	431a      	orrs	r2, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	430a      	orrs	r2, r1
 800237a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002386:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	6911      	ldr	r1, [r2, #16]
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	68d2      	ldr	r2, [r2, #12]
 8002392:	4311      	orrs	r1, r2
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	6812      	ldr	r2, [r2, #0]
 8002398:	430b      	orrs	r3, r1
 800239a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	695a      	ldr	r2, [r3, #20]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	699b      	ldr	r3, [r3, #24]
 80023ae:	431a      	orrs	r2, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	430a      	orrs	r2, r1
 80023b6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f042 0201 	orr.w	r2, r2, #1
 80023c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2220      	movs	r2, #32
 80023d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2200      	movs	r2, #0
 80023da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2200      	movs	r2, #0
 80023e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80023e4:	2300      	movs	r3, #0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3710      	adds	r7, #16
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	000186a0 	.word	0x000186a0
 80023f4:	001e847f 	.word	0x001e847f
 80023f8:	003d08ff 	.word	0x003d08ff
 80023fc:	431bde83 	.word	0x431bde83
 8002400:	10624dd3 	.word	0x10624dd3

08002404 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b088      	sub	sp, #32
 8002408:	af02      	add	r7, sp, #8
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	4608      	mov	r0, r1
 800240e:	4611      	mov	r1, r2
 8002410:	461a      	mov	r2, r3
 8002412:	4603      	mov	r3, r0
 8002414:	817b      	strh	r3, [r7, #10]
 8002416:	460b      	mov	r3, r1
 8002418:	813b      	strh	r3, [r7, #8]
 800241a:	4613      	mov	r3, r2
 800241c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800241e:	f7fe ffdb 	bl	80013d8 <HAL_GetTick>
 8002422:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800242a:	b2db      	uxtb	r3, r3
 800242c:	2b20      	cmp	r3, #32
 800242e:	f040 80d9 	bne.w	80025e4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	9300      	str	r3, [sp, #0]
 8002436:	2319      	movs	r3, #25
 8002438:	2201      	movs	r2, #1
 800243a:	496d      	ldr	r1, [pc, #436]	; (80025f0 <HAL_I2C_Mem_Write+0x1ec>)
 800243c:	68f8      	ldr	r0, [r7, #12]
 800243e:	f000 f971 	bl	8002724 <I2C_WaitOnFlagUntilTimeout>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d001      	beq.n	800244c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002448:	2302      	movs	r3, #2
 800244a:	e0cc      	b.n	80025e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002452:	2b01      	cmp	r3, #1
 8002454:	d101      	bne.n	800245a <HAL_I2C_Mem_Write+0x56>
 8002456:	2302      	movs	r3, #2
 8002458:	e0c5      	b.n	80025e6 <HAL_I2C_Mem_Write+0x1e2>
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2201      	movs	r2, #1
 800245e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0301 	and.w	r3, r3, #1
 800246c:	2b01      	cmp	r3, #1
 800246e:	d007      	beq.n	8002480 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f042 0201 	orr.w	r2, r2, #1
 800247e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800248e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2221      	movs	r2, #33	; 0x21
 8002494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2240      	movs	r2, #64	; 0x40
 800249c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2200      	movs	r2, #0
 80024a4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	6a3a      	ldr	r2, [r7, #32]
 80024aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80024b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024b6:	b29a      	uxth	r2, r3
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	4a4d      	ldr	r2, [pc, #308]	; (80025f4 <HAL_I2C_Mem_Write+0x1f0>)
 80024c0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80024c2:	88f8      	ldrh	r0, [r7, #6]
 80024c4:	893a      	ldrh	r2, [r7, #8]
 80024c6:	8979      	ldrh	r1, [r7, #10]
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	9301      	str	r3, [sp, #4]
 80024cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ce:	9300      	str	r3, [sp, #0]
 80024d0:	4603      	mov	r3, r0
 80024d2:	68f8      	ldr	r0, [r7, #12]
 80024d4:	f000 f890 	bl	80025f8 <I2C_RequestMemoryWrite>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d052      	beq.n	8002584 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e081      	b.n	80025e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024e2:	697a      	ldr	r2, [r7, #20]
 80024e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80024e6:	68f8      	ldr	r0, [r7, #12]
 80024e8:	f000 f9f2 	bl	80028d0 <I2C_WaitOnTXEFlagUntilTimeout>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d00d      	beq.n	800250e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f6:	2b04      	cmp	r3, #4
 80024f8:	d107      	bne.n	800250a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002508:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e06b      	b.n	80025e6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002512:	781a      	ldrb	r2, [r3, #0]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251e:	1c5a      	adds	r2, r3, #1
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002528:	3b01      	subs	r3, #1
 800252a:	b29a      	uxth	r2, r3
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002534:	b29b      	uxth	r3, r3
 8002536:	3b01      	subs	r3, #1
 8002538:	b29a      	uxth	r2, r3
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	695b      	ldr	r3, [r3, #20]
 8002544:	f003 0304 	and.w	r3, r3, #4
 8002548:	2b04      	cmp	r3, #4
 800254a:	d11b      	bne.n	8002584 <HAL_I2C_Mem_Write+0x180>
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002550:	2b00      	cmp	r3, #0
 8002552:	d017      	beq.n	8002584 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002558:	781a      	ldrb	r2, [r3, #0]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002564:	1c5a      	adds	r2, r3, #1
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800256e:	3b01      	subs	r3, #1
 8002570:	b29a      	uxth	r2, r3
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800257a:	b29b      	uxth	r3, r3
 800257c:	3b01      	subs	r3, #1
 800257e:	b29a      	uxth	r2, r3
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002588:	2b00      	cmp	r3, #0
 800258a:	d1aa      	bne.n	80024e2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800258c:	697a      	ldr	r2, [r7, #20]
 800258e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002590:	68f8      	ldr	r0, [r7, #12]
 8002592:	f000 f9de 	bl	8002952 <I2C_WaitOnBTFFlagUntilTimeout>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d00d      	beq.n	80025b8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a0:	2b04      	cmp	r3, #4
 80025a2:	d107      	bne.n	80025b4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025b2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e016      	b.n	80025e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2220      	movs	r2, #32
 80025cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2200      	movs	r2, #0
 80025d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2200      	movs	r2, #0
 80025dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80025e0:	2300      	movs	r3, #0
 80025e2:	e000      	b.n	80025e6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80025e4:	2302      	movs	r3, #2
  }
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3718      	adds	r7, #24
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	00100002 	.word	0x00100002
 80025f4:	ffff0000 	.word	0xffff0000

080025f8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b088      	sub	sp, #32
 80025fc:	af02      	add	r7, sp, #8
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	4608      	mov	r0, r1
 8002602:	4611      	mov	r1, r2
 8002604:	461a      	mov	r2, r3
 8002606:	4603      	mov	r3, r0
 8002608:	817b      	strh	r3, [r7, #10]
 800260a:	460b      	mov	r3, r1
 800260c:	813b      	strh	r3, [r7, #8]
 800260e:	4613      	mov	r3, r2
 8002610:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002620:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002624:	9300      	str	r3, [sp, #0]
 8002626:	6a3b      	ldr	r3, [r7, #32]
 8002628:	2200      	movs	r2, #0
 800262a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800262e:	68f8      	ldr	r0, [r7, #12]
 8002630:	f000 f878 	bl	8002724 <I2C_WaitOnFlagUntilTimeout>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d00d      	beq.n	8002656 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002644:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002648:	d103      	bne.n	8002652 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002650:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e05f      	b.n	8002716 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002656:	897b      	ldrh	r3, [r7, #10]
 8002658:	b2db      	uxtb	r3, r3
 800265a:	461a      	mov	r2, r3
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002664:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002668:	6a3a      	ldr	r2, [r7, #32]
 800266a:	492d      	ldr	r1, [pc, #180]	; (8002720 <I2C_RequestMemoryWrite+0x128>)
 800266c:	68f8      	ldr	r0, [r7, #12]
 800266e:	f000 f8b0 	bl	80027d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d001      	beq.n	800267c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e04c      	b.n	8002716 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800267c:	2300      	movs	r3, #0
 800267e:	617b      	str	r3, [r7, #20]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	695b      	ldr	r3, [r3, #20]
 8002686:	617b      	str	r3, [r7, #20]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	699b      	ldr	r3, [r3, #24]
 800268e:	617b      	str	r3, [r7, #20]
 8002690:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002692:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002694:	6a39      	ldr	r1, [r7, #32]
 8002696:	68f8      	ldr	r0, [r7, #12]
 8002698:	f000 f91a 	bl	80028d0 <I2C_WaitOnTXEFlagUntilTimeout>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d00d      	beq.n	80026be <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a6:	2b04      	cmp	r3, #4
 80026a8:	d107      	bne.n	80026ba <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026b8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e02b      	b.n	8002716 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80026be:	88fb      	ldrh	r3, [r7, #6]
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d105      	bne.n	80026d0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80026c4:	893b      	ldrh	r3, [r7, #8]
 80026c6:	b2da      	uxtb	r2, r3
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	611a      	str	r2, [r3, #16]
 80026ce:	e021      	b.n	8002714 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80026d0:	893b      	ldrh	r3, [r7, #8]
 80026d2:	0a1b      	lsrs	r3, r3, #8
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	b2da      	uxtb	r2, r3
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026e0:	6a39      	ldr	r1, [r7, #32]
 80026e2:	68f8      	ldr	r0, [r7, #12]
 80026e4:	f000 f8f4 	bl	80028d0 <I2C_WaitOnTXEFlagUntilTimeout>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d00d      	beq.n	800270a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f2:	2b04      	cmp	r3, #4
 80026f4:	d107      	bne.n	8002706 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002704:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e005      	b.n	8002716 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800270a:	893b      	ldrh	r3, [r7, #8]
 800270c:	b2da      	uxtb	r2, r3
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002714:	2300      	movs	r3, #0
}
 8002716:	4618      	mov	r0, r3
 8002718:	3718      	adds	r7, #24
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	00010002 	.word	0x00010002

08002724 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	60b9      	str	r1, [r7, #8]
 800272e:	603b      	str	r3, [r7, #0]
 8002730:	4613      	mov	r3, r2
 8002732:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002734:	e025      	b.n	8002782 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800273c:	d021      	beq.n	8002782 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800273e:	f7fe fe4b 	bl	80013d8 <HAL_GetTick>
 8002742:	4602      	mov	r2, r0
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	683a      	ldr	r2, [r7, #0]
 800274a:	429a      	cmp	r2, r3
 800274c:	d302      	bcc.n	8002754 <I2C_WaitOnFlagUntilTimeout+0x30>
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d116      	bne.n	8002782 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2200      	movs	r2, #0
 8002758:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2220      	movs	r2, #32
 800275e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2200      	movs	r2, #0
 8002766:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276e:	f043 0220 	orr.w	r2, r3, #32
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2200      	movs	r2, #0
 800277a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e023      	b.n	80027ca <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	0c1b      	lsrs	r3, r3, #16
 8002786:	b2db      	uxtb	r3, r3
 8002788:	2b01      	cmp	r3, #1
 800278a:	d10d      	bne.n	80027a8 <I2C_WaitOnFlagUntilTimeout+0x84>
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	695b      	ldr	r3, [r3, #20]
 8002792:	43da      	mvns	r2, r3
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	4013      	ands	r3, r2
 8002798:	b29b      	uxth	r3, r3
 800279a:	2b00      	cmp	r3, #0
 800279c:	bf0c      	ite	eq
 800279e:	2301      	moveq	r3, #1
 80027a0:	2300      	movne	r3, #0
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	461a      	mov	r2, r3
 80027a6:	e00c      	b.n	80027c2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	699b      	ldr	r3, [r3, #24]
 80027ae:	43da      	mvns	r2, r3
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	4013      	ands	r3, r2
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	bf0c      	ite	eq
 80027ba:	2301      	moveq	r3, #1
 80027bc:	2300      	movne	r3, #0
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	461a      	mov	r2, r3
 80027c2:	79fb      	ldrb	r3, [r7, #7]
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d0b6      	beq.n	8002736 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3710      	adds	r7, #16
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}

080027d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80027d2:	b580      	push	{r7, lr}
 80027d4:	b084      	sub	sp, #16
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	60f8      	str	r0, [r7, #12]
 80027da:	60b9      	str	r1, [r7, #8]
 80027dc:	607a      	str	r2, [r7, #4]
 80027de:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80027e0:	e051      	b.n	8002886 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	695b      	ldr	r3, [r3, #20]
 80027e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027f0:	d123      	bne.n	800283a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002800:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800280a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2200      	movs	r2, #0
 8002810:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2220      	movs	r2, #32
 8002816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2200      	movs	r2, #0
 800281e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002826:	f043 0204 	orr.w	r2, r3, #4
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2200      	movs	r2, #0
 8002832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e046      	b.n	80028c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002840:	d021      	beq.n	8002886 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002842:	f7fe fdc9 	bl	80013d8 <HAL_GetTick>
 8002846:	4602      	mov	r2, r0
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	687a      	ldr	r2, [r7, #4]
 800284e:	429a      	cmp	r2, r3
 8002850:	d302      	bcc.n	8002858 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d116      	bne.n	8002886 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2200      	movs	r2, #0
 800285c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2220      	movs	r2, #32
 8002862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2200      	movs	r2, #0
 800286a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002872:	f043 0220 	orr.w	r2, r3, #32
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2200      	movs	r2, #0
 800287e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e020      	b.n	80028c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	0c1b      	lsrs	r3, r3, #16
 800288a:	b2db      	uxtb	r3, r3
 800288c:	2b01      	cmp	r3, #1
 800288e:	d10c      	bne.n	80028aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	695b      	ldr	r3, [r3, #20]
 8002896:	43da      	mvns	r2, r3
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	4013      	ands	r3, r2
 800289c:	b29b      	uxth	r3, r3
 800289e:	2b00      	cmp	r3, #0
 80028a0:	bf14      	ite	ne
 80028a2:	2301      	movne	r3, #1
 80028a4:	2300      	moveq	r3, #0
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	e00b      	b.n	80028c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	699b      	ldr	r3, [r3, #24]
 80028b0:	43da      	mvns	r2, r3
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	4013      	ands	r3, r2
 80028b6:	b29b      	uxth	r3, r3
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	bf14      	ite	ne
 80028bc:	2301      	movne	r3, #1
 80028be:	2300      	moveq	r3, #0
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d18d      	bne.n	80027e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80028c6:	2300      	movs	r3, #0
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3710      	adds	r7, #16
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	60f8      	str	r0, [r7, #12]
 80028d8:	60b9      	str	r1, [r7, #8]
 80028da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028dc:	e02d      	b.n	800293a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80028de:	68f8      	ldr	r0, [r7, #12]
 80028e0:	f000 f878 	bl	80029d4 <I2C_IsAcknowledgeFailed>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d001      	beq.n	80028ee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e02d      	b.n	800294a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028f4:	d021      	beq.n	800293a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028f6:	f7fe fd6f 	bl	80013d8 <HAL_GetTick>
 80028fa:	4602      	mov	r2, r0
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	68ba      	ldr	r2, [r7, #8]
 8002902:	429a      	cmp	r2, r3
 8002904:	d302      	bcc.n	800290c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d116      	bne.n	800293a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2200      	movs	r2, #0
 8002910:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2220      	movs	r2, #32
 8002916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2200      	movs	r2, #0
 800291e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002926:	f043 0220 	orr.w	r2, r3, #32
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2200      	movs	r2, #0
 8002932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e007      	b.n	800294a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	695b      	ldr	r3, [r3, #20]
 8002940:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002944:	2b80      	cmp	r3, #128	; 0x80
 8002946:	d1ca      	bne.n	80028de <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002948:	2300      	movs	r3, #0
}
 800294a:	4618      	mov	r0, r3
 800294c:	3710      	adds	r7, #16
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}

08002952 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002952:	b580      	push	{r7, lr}
 8002954:	b084      	sub	sp, #16
 8002956:	af00      	add	r7, sp, #0
 8002958:	60f8      	str	r0, [r7, #12]
 800295a:	60b9      	str	r1, [r7, #8]
 800295c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800295e:	e02d      	b.n	80029bc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002960:	68f8      	ldr	r0, [r7, #12]
 8002962:	f000 f837 	bl	80029d4 <I2C_IsAcknowledgeFailed>
 8002966:	4603      	mov	r3, r0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d001      	beq.n	8002970 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e02d      	b.n	80029cc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002976:	d021      	beq.n	80029bc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002978:	f7fe fd2e 	bl	80013d8 <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	68ba      	ldr	r2, [r7, #8]
 8002984:	429a      	cmp	r2, r3
 8002986:	d302      	bcc.n	800298e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d116      	bne.n	80029bc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2200      	movs	r2, #0
 8002992:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2220      	movs	r2, #32
 8002998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2200      	movs	r2, #0
 80029a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a8:	f043 0220 	orr.w	r2, r3, #32
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2200      	movs	r2, #0
 80029b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e007      	b.n	80029cc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	695b      	ldr	r3, [r3, #20]
 80029c2:	f003 0304 	and.w	r3, r3, #4
 80029c6:	2b04      	cmp	r3, #4
 80029c8:	d1ca      	bne.n	8002960 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80029ca:	2300      	movs	r3, #0
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3710      	adds	r7, #16
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}

080029d4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	695b      	ldr	r3, [r3, #20]
 80029e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029ea:	d11b      	bne.n	8002a24 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80029f4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2200      	movs	r2, #0
 80029fa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2220      	movs	r2, #32
 8002a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a10:	f043 0204 	orr.w	r2, r3, #4
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e000      	b.n	8002a26 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002a24:	2300      	movs	r3, #0
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	370c      	adds	r7, #12
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bc80      	pop	{r7}
 8002a2e:	4770      	bx	lr

08002a30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b086      	sub	sp, #24
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d101      	bne.n	8002a42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e26c      	b.n	8002f1c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0301 	and.w	r3, r3, #1
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	f000 8087 	beq.w	8002b5e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a50:	4b92      	ldr	r3, [pc, #584]	; (8002c9c <HAL_RCC_OscConfig+0x26c>)
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f003 030c 	and.w	r3, r3, #12
 8002a58:	2b04      	cmp	r3, #4
 8002a5a:	d00c      	beq.n	8002a76 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a5c:	4b8f      	ldr	r3, [pc, #572]	; (8002c9c <HAL_RCC_OscConfig+0x26c>)
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f003 030c 	and.w	r3, r3, #12
 8002a64:	2b08      	cmp	r3, #8
 8002a66:	d112      	bne.n	8002a8e <HAL_RCC_OscConfig+0x5e>
 8002a68:	4b8c      	ldr	r3, [pc, #560]	; (8002c9c <HAL_RCC_OscConfig+0x26c>)
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a74:	d10b      	bne.n	8002a8e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a76:	4b89      	ldr	r3, [pc, #548]	; (8002c9c <HAL_RCC_OscConfig+0x26c>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d06c      	beq.n	8002b5c <HAL_RCC_OscConfig+0x12c>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d168      	bne.n	8002b5c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e246      	b.n	8002f1c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a96:	d106      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x76>
 8002a98:	4b80      	ldr	r3, [pc, #512]	; (8002c9c <HAL_RCC_OscConfig+0x26c>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a7f      	ldr	r2, [pc, #508]	; (8002c9c <HAL_RCC_OscConfig+0x26c>)
 8002a9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aa2:	6013      	str	r3, [r2, #0]
 8002aa4:	e02e      	b.n	8002b04 <HAL_RCC_OscConfig+0xd4>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d10c      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x98>
 8002aae:	4b7b      	ldr	r3, [pc, #492]	; (8002c9c <HAL_RCC_OscConfig+0x26c>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a7a      	ldr	r2, [pc, #488]	; (8002c9c <HAL_RCC_OscConfig+0x26c>)
 8002ab4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ab8:	6013      	str	r3, [r2, #0]
 8002aba:	4b78      	ldr	r3, [pc, #480]	; (8002c9c <HAL_RCC_OscConfig+0x26c>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a77      	ldr	r2, [pc, #476]	; (8002c9c <HAL_RCC_OscConfig+0x26c>)
 8002ac0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ac4:	6013      	str	r3, [r2, #0]
 8002ac6:	e01d      	b.n	8002b04 <HAL_RCC_OscConfig+0xd4>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ad0:	d10c      	bne.n	8002aec <HAL_RCC_OscConfig+0xbc>
 8002ad2:	4b72      	ldr	r3, [pc, #456]	; (8002c9c <HAL_RCC_OscConfig+0x26c>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a71      	ldr	r2, [pc, #452]	; (8002c9c <HAL_RCC_OscConfig+0x26c>)
 8002ad8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002adc:	6013      	str	r3, [r2, #0]
 8002ade:	4b6f      	ldr	r3, [pc, #444]	; (8002c9c <HAL_RCC_OscConfig+0x26c>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a6e      	ldr	r2, [pc, #440]	; (8002c9c <HAL_RCC_OscConfig+0x26c>)
 8002ae4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ae8:	6013      	str	r3, [r2, #0]
 8002aea:	e00b      	b.n	8002b04 <HAL_RCC_OscConfig+0xd4>
 8002aec:	4b6b      	ldr	r3, [pc, #428]	; (8002c9c <HAL_RCC_OscConfig+0x26c>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a6a      	ldr	r2, [pc, #424]	; (8002c9c <HAL_RCC_OscConfig+0x26c>)
 8002af2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002af6:	6013      	str	r3, [r2, #0]
 8002af8:	4b68      	ldr	r3, [pc, #416]	; (8002c9c <HAL_RCC_OscConfig+0x26c>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a67      	ldr	r2, [pc, #412]	; (8002c9c <HAL_RCC_OscConfig+0x26c>)
 8002afe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b02:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d013      	beq.n	8002b34 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b0c:	f7fe fc64 	bl	80013d8 <HAL_GetTick>
 8002b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b12:	e008      	b.n	8002b26 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b14:	f7fe fc60 	bl	80013d8 <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	2b64      	cmp	r3, #100	; 0x64
 8002b20:	d901      	bls.n	8002b26 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e1fa      	b.n	8002f1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b26:	4b5d      	ldr	r3, [pc, #372]	; (8002c9c <HAL_RCC_OscConfig+0x26c>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d0f0      	beq.n	8002b14 <HAL_RCC_OscConfig+0xe4>
 8002b32:	e014      	b.n	8002b5e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b34:	f7fe fc50 	bl	80013d8 <HAL_GetTick>
 8002b38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b3a:	e008      	b.n	8002b4e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b3c:	f7fe fc4c 	bl	80013d8 <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	2b64      	cmp	r3, #100	; 0x64
 8002b48:	d901      	bls.n	8002b4e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e1e6      	b.n	8002f1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b4e:	4b53      	ldr	r3, [pc, #332]	; (8002c9c <HAL_RCC_OscConfig+0x26c>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d1f0      	bne.n	8002b3c <HAL_RCC_OscConfig+0x10c>
 8002b5a:	e000      	b.n	8002b5e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0302 	and.w	r3, r3, #2
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d063      	beq.n	8002c32 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b6a:	4b4c      	ldr	r3, [pc, #304]	; (8002c9c <HAL_RCC_OscConfig+0x26c>)
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f003 030c 	and.w	r3, r3, #12
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d00b      	beq.n	8002b8e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002b76:	4b49      	ldr	r3, [pc, #292]	; (8002c9c <HAL_RCC_OscConfig+0x26c>)
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	f003 030c 	and.w	r3, r3, #12
 8002b7e:	2b08      	cmp	r3, #8
 8002b80:	d11c      	bne.n	8002bbc <HAL_RCC_OscConfig+0x18c>
 8002b82:	4b46      	ldr	r3, [pc, #280]	; (8002c9c <HAL_RCC_OscConfig+0x26c>)
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d116      	bne.n	8002bbc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b8e:	4b43      	ldr	r3, [pc, #268]	; (8002c9c <HAL_RCC_OscConfig+0x26c>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0302 	and.w	r3, r3, #2
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d005      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x176>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	691b      	ldr	r3, [r3, #16]
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d001      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e1ba      	b.n	8002f1c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ba6:	4b3d      	ldr	r3, [pc, #244]	; (8002c9c <HAL_RCC_OscConfig+0x26c>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	695b      	ldr	r3, [r3, #20]
 8002bb2:	00db      	lsls	r3, r3, #3
 8002bb4:	4939      	ldr	r1, [pc, #228]	; (8002c9c <HAL_RCC_OscConfig+0x26c>)
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bba:	e03a      	b.n	8002c32 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	691b      	ldr	r3, [r3, #16]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d020      	beq.n	8002c06 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bc4:	4b36      	ldr	r3, [pc, #216]	; (8002ca0 <HAL_RCC_OscConfig+0x270>)
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bca:	f7fe fc05 	bl	80013d8 <HAL_GetTick>
 8002bce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bd0:	e008      	b.n	8002be4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bd2:	f7fe fc01 	bl	80013d8 <HAL_GetTick>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d901      	bls.n	8002be4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002be0:	2303      	movs	r3, #3
 8002be2:	e19b      	b.n	8002f1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002be4:	4b2d      	ldr	r3, [pc, #180]	; (8002c9c <HAL_RCC_OscConfig+0x26c>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0302 	and.w	r3, r3, #2
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d0f0      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bf0:	4b2a      	ldr	r3, [pc, #168]	; (8002c9c <HAL_RCC_OscConfig+0x26c>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	695b      	ldr	r3, [r3, #20]
 8002bfc:	00db      	lsls	r3, r3, #3
 8002bfe:	4927      	ldr	r1, [pc, #156]	; (8002c9c <HAL_RCC_OscConfig+0x26c>)
 8002c00:	4313      	orrs	r3, r2
 8002c02:	600b      	str	r3, [r1, #0]
 8002c04:	e015      	b.n	8002c32 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c06:	4b26      	ldr	r3, [pc, #152]	; (8002ca0 <HAL_RCC_OscConfig+0x270>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c0c:	f7fe fbe4 	bl	80013d8 <HAL_GetTick>
 8002c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c12:	e008      	b.n	8002c26 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c14:	f7fe fbe0 	bl	80013d8 <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d901      	bls.n	8002c26 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e17a      	b.n	8002f1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c26:	4b1d      	ldr	r3, [pc, #116]	; (8002c9c <HAL_RCC_OscConfig+0x26c>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0302 	and.w	r3, r3, #2
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d1f0      	bne.n	8002c14 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0308 	and.w	r3, r3, #8
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d03a      	beq.n	8002cb4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	699b      	ldr	r3, [r3, #24]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d019      	beq.n	8002c7a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c46:	4b17      	ldr	r3, [pc, #92]	; (8002ca4 <HAL_RCC_OscConfig+0x274>)
 8002c48:	2201      	movs	r2, #1
 8002c4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c4c:	f7fe fbc4 	bl	80013d8 <HAL_GetTick>
 8002c50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c52:	e008      	b.n	8002c66 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c54:	f7fe fbc0 	bl	80013d8 <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d901      	bls.n	8002c66 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	e15a      	b.n	8002f1c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c66:	4b0d      	ldr	r3, [pc, #52]	; (8002c9c <HAL_RCC_OscConfig+0x26c>)
 8002c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6a:	f003 0302 	and.w	r3, r3, #2
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d0f0      	beq.n	8002c54 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002c72:	2001      	movs	r0, #1
 8002c74:	f000 fad8 	bl	8003228 <RCC_Delay>
 8002c78:	e01c      	b.n	8002cb4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c7a:	4b0a      	ldr	r3, [pc, #40]	; (8002ca4 <HAL_RCC_OscConfig+0x274>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c80:	f7fe fbaa 	bl	80013d8 <HAL_GetTick>
 8002c84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c86:	e00f      	b.n	8002ca8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c88:	f7fe fba6 	bl	80013d8 <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d908      	bls.n	8002ca8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e140      	b.n	8002f1c <HAL_RCC_OscConfig+0x4ec>
 8002c9a:	bf00      	nop
 8002c9c:	40021000 	.word	0x40021000
 8002ca0:	42420000 	.word	0x42420000
 8002ca4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ca8:	4b9e      	ldr	r3, [pc, #632]	; (8002f24 <HAL_RCC_OscConfig+0x4f4>)
 8002caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cac:	f003 0302 	and.w	r3, r3, #2
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d1e9      	bne.n	8002c88 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0304 	and.w	r3, r3, #4
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	f000 80a6 	beq.w	8002e0e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cc6:	4b97      	ldr	r3, [pc, #604]	; (8002f24 <HAL_RCC_OscConfig+0x4f4>)
 8002cc8:	69db      	ldr	r3, [r3, #28]
 8002cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d10d      	bne.n	8002cee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cd2:	4b94      	ldr	r3, [pc, #592]	; (8002f24 <HAL_RCC_OscConfig+0x4f4>)
 8002cd4:	69db      	ldr	r3, [r3, #28]
 8002cd6:	4a93      	ldr	r2, [pc, #588]	; (8002f24 <HAL_RCC_OscConfig+0x4f4>)
 8002cd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cdc:	61d3      	str	r3, [r2, #28]
 8002cde:	4b91      	ldr	r3, [pc, #580]	; (8002f24 <HAL_RCC_OscConfig+0x4f4>)
 8002ce0:	69db      	ldr	r3, [r3, #28]
 8002ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ce6:	60bb      	str	r3, [r7, #8]
 8002ce8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cea:	2301      	movs	r3, #1
 8002cec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cee:	4b8e      	ldr	r3, [pc, #568]	; (8002f28 <HAL_RCC_OscConfig+0x4f8>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d118      	bne.n	8002d2c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cfa:	4b8b      	ldr	r3, [pc, #556]	; (8002f28 <HAL_RCC_OscConfig+0x4f8>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a8a      	ldr	r2, [pc, #552]	; (8002f28 <HAL_RCC_OscConfig+0x4f8>)
 8002d00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d06:	f7fe fb67 	bl	80013d8 <HAL_GetTick>
 8002d0a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d0c:	e008      	b.n	8002d20 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d0e:	f7fe fb63 	bl	80013d8 <HAL_GetTick>
 8002d12:	4602      	mov	r2, r0
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	2b64      	cmp	r3, #100	; 0x64
 8002d1a:	d901      	bls.n	8002d20 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	e0fd      	b.n	8002f1c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d20:	4b81      	ldr	r3, [pc, #516]	; (8002f28 <HAL_RCC_OscConfig+0x4f8>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d0f0      	beq.n	8002d0e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d106      	bne.n	8002d42 <HAL_RCC_OscConfig+0x312>
 8002d34:	4b7b      	ldr	r3, [pc, #492]	; (8002f24 <HAL_RCC_OscConfig+0x4f4>)
 8002d36:	6a1b      	ldr	r3, [r3, #32]
 8002d38:	4a7a      	ldr	r2, [pc, #488]	; (8002f24 <HAL_RCC_OscConfig+0x4f4>)
 8002d3a:	f043 0301 	orr.w	r3, r3, #1
 8002d3e:	6213      	str	r3, [r2, #32]
 8002d40:	e02d      	b.n	8002d9e <HAL_RCC_OscConfig+0x36e>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	68db      	ldr	r3, [r3, #12]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d10c      	bne.n	8002d64 <HAL_RCC_OscConfig+0x334>
 8002d4a:	4b76      	ldr	r3, [pc, #472]	; (8002f24 <HAL_RCC_OscConfig+0x4f4>)
 8002d4c:	6a1b      	ldr	r3, [r3, #32]
 8002d4e:	4a75      	ldr	r2, [pc, #468]	; (8002f24 <HAL_RCC_OscConfig+0x4f4>)
 8002d50:	f023 0301 	bic.w	r3, r3, #1
 8002d54:	6213      	str	r3, [r2, #32]
 8002d56:	4b73      	ldr	r3, [pc, #460]	; (8002f24 <HAL_RCC_OscConfig+0x4f4>)
 8002d58:	6a1b      	ldr	r3, [r3, #32]
 8002d5a:	4a72      	ldr	r2, [pc, #456]	; (8002f24 <HAL_RCC_OscConfig+0x4f4>)
 8002d5c:	f023 0304 	bic.w	r3, r3, #4
 8002d60:	6213      	str	r3, [r2, #32]
 8002d62:	e01c      	b.n	8002d9e <HAL_RCC_OscConfig+0x36e>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	2b05      	cmp	r3, #5
 8002d6a:	d10c      	bne.n	8002d86 <HAL_RCC_OscConfig+0x356>
 8002d6c:	4b6d      	ldr	r3, [pc, #436]	; (8002f24 <HAL_RCC_OscConfig+0x4f4>)
 8002d6e:	6a1b      	ldr	r3, [r3, #32]
 8002d70:	4a6c      	ldr	r2, [pc, #432]	; (8002f24 <HAL_RCC_OscConfig+0x4f4>)
 8002d72:	f043 0304 	orr.w	r3, r3, #4
 8002d76:	6213      	str	r3, [r2, #32]
 8002d78:	4b6a      	ldr	r3, [pc, #424]	; (8002f24 <HAL_RCC_OscConfig+0x4f4>)
 8002d7a:	6a1b      	ldr	r3, [r3, #32]
 8002d7c:	4a69      	ldr	r2, [pc, #420]	; (8002f24 <HAL_RCC_OscConfig+0x4f4>)
 8002d7e:	f043 0301 	orr.w	r3, r3, #1
 8002d82:	6213      	str	r3, [r2, #32]
 8002d84:	e00b      	b.n	8002d9e <HAL_RCC_OscConfig+0x36e>
 8002d86:	4b67      	ldr	r3, [pc, #412]	; (8002f24 <HAL_RCC_OscConfig+0x4f4>)
 8002d88:	6a1b      	ldr	r3, [r3, #32]
 8002d8a:	4a66      	ldr	r2, [pc, #408]	; (8002f24 <HAL_RCC_OscConfig+0x4f4>)
 8002d8c:	f023 0301 	bic.w	r3, r3, #1
 8002d90:	6213      	str	r3, [r2, #32]
 8002d92:	4b64      	ldr	r3, [pc, #400]	; (8002f24 <HAL_RCC_OscConfig+0x4f4>)
 8002d94:	6a1b      	ldr	r3, [r3, #32]
 8002d96:	4a63      	ldr	r2, [pc, #396]	; (8002f24 <HAL_RCC_OscConfig+0x4f4>)
 8002d98:	f023 0304 	bic.w	r3, r3, #4
 8002d9c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d015      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002da6:	f7fe fb17 	bl	80013d8 <HAL_GetTick>
 8002daa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dac:	e00a      	b.n	8002dc4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dae:	f7fe fb13 	bl	80013d8 <HAL_GetTick>
 8002db2:	4602      	mov	r2, r0
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d901      	bls.n	8002dc4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	e0ab      	b.n	8002f1c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dc4:	4b57      	ldr	r3, [pc, #348]	; (8002f24 <HAL_RCC_OscConfig+0x4f4>)
 8002dc6:	6a1b      	ldr	r3, [r3, #32]
 8002dc8:	f003 0302 	and.w	r3, r3, #2
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d0ee      	beq.n	8002dae <HAL_RCC_OscConfig+0x37e>
 8002dd0:	e014      	b.n	8002dfc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dd2:	f7fe fb01 	bl	80013d8 <HAL_GetTick>
 8002dd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dd8:	e00a      	b.n	8002df0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dda:	f7fe fafd 	bl	80013d8 <HAL_GetTick>
 8002dde:	4602      	mov	r2, r0
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d901      	bls.n	8002df0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002dec:	2303      	movs	r3, #3
 8002dee:	e095      	b.n	8002f1c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002df0:	4b4c      	ldr	r3, [pc, #304]	; (8002f24 <HAL_RCC_OscConfig+0x4f4>)
 8002df2:	6a1b      	ldr	r3, [r3, #32]
 8002df4:	f003 0302 	and.w	r3, r3, #2
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d1ee      	bne.n	8002dda <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002dfc:	7dfb      	ldrb	r3, [r7, #23]
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d105      	bne.n	8002e0e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e02:	4b48      	ldr	r3, [pc, #288]	; (8002f24 <HAL_RCC_OscConfig+0x4f4>)
 8002e04:	69db      	ldr	r3, [r3, #28]
 8002e06:	4a47      	ldr	r2, [pc, #284]	; (8002f24 <HAL_RCC_OscConfig+0x4f4>)
 8002e08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e0c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	69db      	ldr	r3, [r3, #28]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	f000 8081 	beq.w	8002f1a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e18:	4b42      	ldr	r3, [pc, #264]	; (8002f24 <HAL_RCC_OscConfig+0x4f4>)
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	f003 030c 	and.w	r3, r3, #12
 8002e20:	2b08      	cmp	r3, #8
 8002e22:	d061      	beq.n	8002ee8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	69db      	ldr	r3, [r3, #28]
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d146      	bne.n	8002eba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e2c:	4b3f      	ldr	r3, [pc, #252]	; (8002f2c <HAL_RCC_OscConfig+0x4fc>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e32:	f7fe fad1 	bl	80013d8 <HAL_GetTick>
 8002e36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e38:	e008      	b.n	8002e4c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e3a:	f7fe facd 	bl	80013d8 <HAL_GetTick>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	1ad3      	subs	r3, r2, r3
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	d901      	bls.n	8002e4c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	e067      	b.n	8002f1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e4c:	4b35      	ldr	r3, [pc, #212]	; (8002f24 <HAL_RCC_OscConfig+0x4f4>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d1f0      	bne.n	8002e3a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6a1b      	ldr	r3, [r3, #32]
 8002e5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e60:	d108      	bne.n	8002e74 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002e62:	4b30      	ldr	r3, [pc, #192]	; (8002f24 <HAL_RCC_OscConfig+0x4f4>)
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	492d      	ldr	r1, [pc, #180]	; (8002f24 <HAL_RCC_OscConfig+0x4f4>)
 8002e70:	4313      	orrs	r3, r2
 8002e72:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e74:	4b2b      	ldr	r3, [pc, #172]	; (8002f24 <HAL_RCC_OscConfig+0x4f4>)
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6a19      	ldr	r1, [r3, #32]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e84:	430b      	orrs	r3, r1
 8002e86:	4927      	ldr	r1, [pc, #156]	; (8002f24 <HAL_RCC_OscConfig+0x4f4>)
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e8c:	4b27      	ldr	r3, [pc, #156]	; (8002f2c <HAL_RCC_OscConfig+0x4fc>)
 8002e8e:	2201      	movs	r2, #1
 8002e90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e92:	f7fe faa1 	bl	80013d8 <HAL_GetTick>
 8002e96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e98:	e008      	b.n	8002eac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e9a:	f7fe fa9d 	bl	80013d8 <HAL_GetTick>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	2b02      	cmp	r3, #2
 8002ea6:	d901      	bls.n	8002eac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	e037      	b.n	8002f1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002eac:	4b1d      	ldr	r3, [pc, #116]	; (8002f24 <HAL_RCC_OscConfig+0x4f4>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d0f0      	beq.n	8002e9a <HAL_RCC_OscConfig+0x46a>
 8002eb8:	e02f      	b.n	8002f1a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eba:	4b1c      	ldr	r3, [pc, #112]	; (8002f2c <HAL_RCC_OscConfig+0x4fc>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec0:	f7fe fa8a 	bl	80013d8 <HAL_GetTick>
 8002ec4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ec6:	e008      	b.n	8002eda <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ec8:	f7fe fa86 	bl	80013d8 <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d901      	bls.n	8002eda <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e020      	b.n	8002f1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002eda:	4b12      	ldr	r3, [pc, #72]	; (8002f24 <HAL_RCC_OscConfig+0x4f4>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d1f0      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x498>
 8002ee6:	e018      	b.n	8002f1a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	69db      	ldr	r3, [r3, #28]
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d101      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e013      	b.n	8002f1c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ef4:	4b0b      	ldr	r3, [pc, #44]	; (8002f24 <HAL_RCC_OscConfig+0x4f4>)
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6a1b      	ldr	r3, [r3, #32]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d106      	bne.n	8002f16 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d001      	beq.n	8002f1a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e000      	b.n	8002f1c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002f1a:	2300      	movs	r3, #0
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3718      	adds	r7, #24
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	40021000 	.word	0x40021000
 8002f28:	40007000 	.word	0x40007000
 8002f2c:	42420060 	.word	0x42420060

08002f30 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b084      	sub	sp, #16
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d101      	bne.n	8002f44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e0d0      	b.n	80030e6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f44:	4b6a      	ldr	r3, [pc, #424]	; (80030f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 0307 	and.w	r3, r3, #7
 8002f4c:	683a      	ldr	r2, [r7, #0]
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d910      	bls.n	8002f74 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f52:	4b67      	ldr	r3, [pc, #412]	; (80030f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f023 0207 	bic.w	r2, r3, #7
 8002f5a:	4965      	ldr	r1, [pc, #404]	; (80030f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f62:	4b63      	ldr	r3, [pc, #396]	; (80030f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0307 	and.w	r3, r3, #7
 8002f6a:	683a      	ldr	r2, [r7, #0]
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d001      	beq.n	8002f74 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e0b8      	b.n	80030e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 0302 	and.w	r3, r3, #2
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d020      	beq.n	8002fc2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0304 	and.w	r3, r3, #4
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d005      	beq.n	8002f98 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f8c:	4b59      	ldr	r3, [pc, #356]	; (80030f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	4a58      	ldr	r2, [pc, #352]	; (80030f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f92:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002f96:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0308 	and.w	r3, r3, #8
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d005      	beq.n	8002fb0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fa4:	4b53      	ldr	r3, [pc, #332]	; (80030f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	4a52      	ldr	r2, [pc, #328]	; (80030f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002faa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002fae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fb0:	4b50      	ldr	r3, [pc, #320]	; (80030f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	494d      	ldr	r1, [pc, #308]	; (80030f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0301 	and.w	r3, r3, #1
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d040      	beq.n	8003050 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d107      	bne.n	8002fe6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fd6:	4b47      	ldr	r3, [pc, #284]	; (80030f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d115      	bne.n	800300e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e07f      	b.n	80030e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d107      	bne.n	8002ffe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fee:	4b41      	ldr	r3, [pc, #260]	; (80030f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d109      	bne.n	800300e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e073      	b.n	80030e6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ffe:	4b3d      	ldr	r3, [pc, #244]	; (80030f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0302 	and.w	r3, r3, #2
 8003006:	2b00      	cmp	r3, #0
 8003008:	d101      	bne.n	800300e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e06b      	b.n	80030e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800300e:	4b39      	ldr	r3, [pc, #228]	; (80030f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f023 0203 	bic.w	r2, r3, #3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	4936      	ldr	r1, [pc, #216]	; (80030f4 <HAL_RCC_ClockConfig+0x1c4>)
 800301c:	4313      	orrs	r3, r2
 800301e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003020:	f7fe f9da 	bl	80013d8 <HAL_GetTick>
 8003024:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003026:	e00a      	b.n	800303e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003028:	f7fe f9d6 	bl	80013d8 <HAL_GetTick>
 800302c:	4602      	mov	r2, r0
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	f241 3288 	movw	r2, #5000	; 0x1388
 8003036:	4293      	cmp	r3, r2
 8003038:	d901      	bls.n	800303e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e053      	b.n	80030e6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800303e:	4b2d      	ldr	r3, [pc, #180]	; (80030f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	f003 020c 	and.w	r2, r3, #12
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	429a      	cmp	r2, r3
 800304e:	d1eb      	bne.n	8003028 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003050:	4b27      	ldr	r3, [pc, #156]	; (80030f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0307 	and.w	r3, r3, #7
 8003058:	683a      	ldr	r2, [r7, #0]
 800305a:	429a      	cmp	r2, r3
 800305c:	d210      	bcs.n	8003080 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800305e:	4b24      	ldr	r3, [pc, #144]	; (80030f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f023 0207 	bic.w	r2, r3, #7
 8003066:	4922      	ldr	r1, [pc, #136]	; (80030f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	4313      	orrs	r3, r2
 800306c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800306e:	4b20      	ldr	r3, [pc, #128]	; (80030f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0307 	and.w	r3, r3, #7
 8003076:	683a      	ldr	r2, [r7, #0]
 8003078:	429a      	cmp	r2, r3
 800307a:	d001      	beq.n	8003080 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	e032      	b.n	80030e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 0304 	and.w	r3, r3, #4
 8003088:	2b00      	cmp	r3, #0
 800308a:	d008      	beq.n	800309e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800308c:	4b19      	ldr	r3, [pc, #100]	; (80030f4 <HAL_RCC_ClockConfig+0x1c4>)
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	4916      	ldr	r1, [pc, #88]	; (80030f4 <HAL_RCC_ClockConfig+0x1c4>)
 800309a:	4313      	orrs	r3, r2
 800309c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0308 	and.w	r3, r3, #8
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d009      	beq.n	80030be <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80030aa:	4b12      	ldr	r3, [pc, #72]	; (80030f4 <HAL_RCC_ClockConfig+0x1c4>)
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	691b      	ldr	r3, [r3, #16]
 80030b6:	00db      	lsls	r3, r3, #3
 80030b8:	490e      	ldr	r1, [pc, #56]	; (80030f4 <HAL_RCC_ClockConfig+0x1c4>)
 80030ba:	4313      	orrs	r3, r2
 80030bc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80030be:	f000 f821 	bl	8003104 <HAL_RCC_GetSysClockFreq>
 80030c2:	4602      	mov	r2, r0
 80030c4:	4b0b      	ldr	r3, [pc, #44]	; (80030f4 <HAL_RCC_ClockConfig+0x1c4>)
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	091b      	lsrs	r3, r3, #4
 80030ca:	f003 030f 	and.w	r3, r3, #15
 80030ce:	490a      	ldr	r1, [pc, #40]	; (80030f8 <HAL_RCC_ClockConfig+0x1c8>)
 80030d0:	5ccb      	ldrb	r3, [r1, r3]
 80030d2:	fa22 f303 	lsr.w	r3, r2, r3
 80030d6:	4a09      	ldr	r2, [pc, #36]	; (80030fc <HAL_RCC_ClockConfig+0x1cc>)
 80030d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80030da:	4b09      	ldr	r3, [pc, #36]	; (8003100 <HAL_RCC_ClockConfig+0x1d0>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4618      	mov	r0, r3
 80030e0:	f7fe f938 	bl	8001354 <HAL_InitTick>

  return HAL_OK;
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3710      	adds	r7, #16
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	40022000 	.word	0x40022000
 80030f4:	40021000 	.word	0x40021000
 80030f8:	0800460c 	.word	0x0800460c
 80030fc:	20000000 	.word	0x20000000
 8003100:	20000004 	.word	0x20000004

08003104 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003104:	b490      	push	{r4, r7}
 8003106:	b08a      	sub	sp, #40	; 0x28
 8003108:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800310a:	4b2a      	ldr	r3, [pc, #168]	; (80031b4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800310c:	1d3c      	adds	r4, r7, #4
 800310e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003110:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003114:	f240 2301 	movw	r3, #513	; 0x201
 8003118:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800311a:	2300      	movs	r3, #0
 800311c:	61fb      	str	r3, [r7, #28]
 800311e:	2300      	movs	r3, #0
 8003120:	61bb      	str	r3, [r7, #24]
 8003122:	2300      	movs	r3, #0
 8003124:	627b      	str	r3, [r7, #36]	; 0x24
 8003126:	2300      	movs	r3, #0
 8003128:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800312a:	2300      	movs	r3, #0
 800312c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800312e:	4b22      	ldr	r3, [pc, #136]	; (80031b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	f003 030c 	and.w	r3, r3, #12
 800313a:	2b04      	cmp	r3, #4
 800313c:	d002      	beq.n	8003144 <HAL_RCC_GetSysClockFreq+0x40>
 800313e:	2b08      	cmp	r3, #8
 8003140:	d003      	beq.n	800314a <HAL_RCC_GetSysClockFreq+0x46>
 8003142:	e02d      	b.n	80031a0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003144:	4b1d      	ldr	r3, [pc, #116]	; (80031bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003146:	623b      	str	r3, [r7, #32]
      break;
 8003148:	e02d      	b.n	80031a6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	0c9b      	lsrs	r3, r3, #18
 800314e:	f003 030f 	and.w	r3, r3, #15
 8003152:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003156:	4413      	add	r3, r2
 8003158:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800315c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003164:	2b00      	cmp	r3, #0
 8003166:	d013      	beq.n	8003190 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003168:	4b13      	ldr	r3, [pc, #76]	; (80031b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	0c5b      	lsrs	r3, r3, #17
 800316e:	f003 0301 	and.w	r3, r3, #1
 8003172:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003176:	4413      	add	r3, r2
 8003178:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800317c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	4a0e      	ldr	r2, [pc, #56]	; (80031bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003182:	fb02 f203 	mul.w	r2, r2, r3
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	fbb2 f3f3 	udiv	r3, r2, r3
 800318c:	627b      	str	r3, [r7, #36]	; 0x24
 800318e:	e004      	b.n	800319a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	4a0b      	ldr	r2, [pc, #44]	; (80031c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003194:	fb02 f303 	mul.w	r3, r2, r3
 8003198:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800319a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319c:	623b      	str	r3, [r7, #32]
      break;
 800319e:	e002      	b.n	80031a6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80031a0:	4b06      	ldr	r3, [pc, #24]	; (80031bc <HAL_RCC_GetSysClockFreq+0xb8>)
 80031a2:	623b      	str	r3, [r7, #32]
      break;
 80031a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031a6:	6a3b      	ldr	r3, [r7, #32]
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3728      	adds	r7, #40	; 0x28
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bc90      	pop	{r4, r7}
 80031b0:	4770      	bx	lr
 80031b2:	bf00      	nop
 80031b4:	080045d8 	.word	0x080045d8
 80031b8:	40021000 	.word	0x40021000
 80031bc:	007a1200 	.word	0x007a1200
 80031c0:	003d0900 	.word	0x003d0900

080031c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031c4:	b480      	push	{r7}
 80031c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031c8:	4b02      	ldr	r3, [pc, #8]	; (80031d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80031ca:	681b      	ldr	r3, [r3, #0]
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bc80      	pop	{r7}
 80031d2:	4770      	bx	lr
 80031d4:	20000000 	.word	0x20000000

080031d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80031dc:	f7ff fff2 	bl	80031c4 <HAL_RCC_GetHCLKFreq>
 80031e0:	4602      	mov	r2, r0
 80031e2:	4b05      	ldr	r3, [pc, #20]	; (80031f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	0a1b      	lsrs	r3, r3, #8
 80031e8:	f003 0307 	and.w	r3, r3, #7
 80031ec:	4903      	ldr	r1, [pc, #12]	; (80031fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80031ee:	5ccb      	ldrb	r3, [r1, r3]
 80031f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	40021000 	.word	0x40021000
 80031fc:	0800461c 	.word	0x0800461c

08003200 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003204:	f7ff ffde 	bl	80031c4 <HAL_RCC_GetHCLKFreq>
 8003208:	4602      	mov	r2, r0
 800320a:	4b05      	ldr	r3, [pc, #20]	; (8003220 <HAL_RCC_GetPCLK2Freq+0x20>)
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	0adb      	lsrs	r3, r3, #11
 8003210:	f003 0307 	and.w	r3, r3, #7
 8003214:	4903      	ldr	r1, [pc, #12]	; (8003224 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003216:	5ccb      	ldrb	r3, [r1, r3]
 8003218:	fa22 f303 	lsr.w	r3, r2, r3
}
 800321c:	4618      	mov	r0, r3
 800321e:	bd80      	pop	{r7, pc}
 8003220:	40021000 	.word	0x40021000
 8003224:	0800461c 	.word	0x0800461c

08003228 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003228:	b480      	push	{r7}
 800322a:	b085      	sub	sp, #20
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003230:	4b0a      	ldr	r3, [pc, #40]	; (800325c <RCC_Delay+0x34>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a0a      	ldr	r2, [pc, #40]	; (8003260 <RCC_Delay+0x38>)
 8003236:	fba2 2303 	umull	r2, r3, r2, r3
 800323a:	0a5b      	lsrs	r3, r3, #9
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	fb02 f303 	mul.w	r3, r2, r3
 8003242:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003244:	bf00      	nop
  }
  while (Delay --);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	1e5a      	subs	r2, r3, #1
 800324a:	60fa      	str	r2, [r7, #12]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d1f9      	bne.n	8003244 <RCC_Delay+0x1c>
}
 8003250:	bf00      	nop
 8003252:	bf00      	nop
 8003254:	3714      	adds	r7, #20
 8003256:	46bd      	mov	sp, r7
 8003258:	bc80      	pop	{r7}
 800325a:	4770      	bx	lr
 800325c:	20000000 	.word	0x20000000
 8003260:	10624dd3 	.word	0x10624dd3

08003264 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d101      	bne.n	8003276 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e076      	b.n	8003364 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327a:	2b00      	cmp	r3, #0
 800327c:	d108      	bne.n	8003290 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003286:	d009      	beq.n	800329c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	61da      	str	r2, [r3, #28]
 800328e:	e005      	b.n	800329c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d106      	bne.n	80032bc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f7fd fd4c 	bl	8000d54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2202      	movs	r2, #2
 80032c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032d2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80032e4:	431a      	orrs	r2, r3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	68db      	ldr	r3, [r3, #12]
 80032ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032ee:	431a      	orrs	r2, r3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	691b      	ldr	r3, [r3, #16]
 80032f4:	f003 0302 	and.w	r3, r3, #2
 80032f8:	431a      	orrs	r2, r3
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	695b      	ldr	r3, [r3, #20]
 80032fe:	f003 0301 	and.w	r3, r3, #1
 8003302:	431a      	orrs	r2, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	699b      	ldr	r3, [r3, #24]
 8003308:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800330c:	431a      	orrs	r2, r3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	69db      	ldr	r3, [r3, #28]
 8003312:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003316:	431a      	orrs	r2, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6a1b      	ldr	r3, [r3, #32]
 800331c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003320:	ea42 0103 	orr.w	r1, r2, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003328:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	430a      	orrs	r2, r1
 8003332:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	699b      	ldr	r3, [r3, #24]
 8003338:	0c1a      	lsrs	r2, r3, #16
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f002 0204 	and.w	r2, r2, #4
 8003342:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	69da      	ldr	r2, [r3, #28]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003352:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2200      	movs	r2, #0
 8003358:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2201      	movs	r2, #1
 800335e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003362:	2300      	movs	r3, #0
}
 8003364:	4618      	mov	r0, r3
 8003366:	3708      	adds	r7, #8
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}

0800336c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b088      	sub	sp, #32
 8003370:	af00      	add	r7, sp, #0
 8003372:	60f8      	str	r0, [r7, #12]
 8003374:	60b9      	str	r1, [r7, #8]
 8003376:	603b      	str	r3, [r7, #0]
 8003378:	4613      	mov	r3, r2
 800337a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800337c:	2300      	movs	r3, #0
 800337e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003386:	2b01      	cmp	r3, #1
 8003388:	d101      	bne.n	800338e <HAL_SPI_Transmit+0x22>
 800338a:	2302      	movs	r3, #2
 800338c:	e126      	b.n	80035dc <HAL_SPI_Transmit+0x270>
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2201      	movs	r2, #1
 8003392:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003396:	f7fe f81f 	bl	80013d8 <HAL_GetTick>
 800339a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800339c:	88fb      	ldrh	r3, [r7, #6]
 800339e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d002      	beq.n	80033b2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80033ac:	2302      	movs	r3, #2
 80033ae:	77fb      	strb	r3, [r7, #31]
    goto error;
 80033b0:	e10b      	b.n	80035ca <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d002      	beq.n	80033be <HAL_SPI_Transmit+0x52>
 80033b8:	88fb      	ldrh	r3, [r7, #6]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d102      	bne.n	80033c4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80033c2:	e102      	b.n	80035ca <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2203      	movs	r2, #3
 80033c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2200      	movs	r2, #0
 80033d0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	68ba      	ldr	r2, [r7, #8]
 80033d6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	88fa      	ldrh	r2, [r7, #6]
 80033dc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	88fa      	ldrh	r2, [r7, #6]
 80033e2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2200      	movs	r2, #0
 80033e8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2200      	movs	r2, #0
 80033ee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2200      	movs	r2, #0
 80033f4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2200      	movs	r2, #0
 80033fa:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2200      	movs	r2, #0
 8003400:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800340a:	d10f      	bne.n	800342c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800341a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800342a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003436:	2b40      	cmp	r3, #64	; 0x40
 8003438:	d007      	beq.n	800344a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003448:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	68db      	ldr	r3, [r3, #12]
 800344e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003452:	d14b      	bne.n	80034ec <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d002      	beq.n	8003462 <HAL_SPI_Transmit+0xf6>
 800345c:	8afb      	ldrh	r3, [r7, #22]
 800345e:	2b01      	cmp	r3, #1
 8003460:	d13e      	bne.n	80034e0 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003466:	881a      	ldrh	r2, [r3, #0]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003472:	1c9a      	adds	r2, r3, #2
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800347c:	b29b      	uxth	r3, r3
 800347e:	3b01      	subs	r3, #1
 8003480:	b29a      	uxth	r2, r3
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003486:	e02b      	b.n	80034e0 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	f003 0302 	and.w	r3, r3, #2
 8003492:	2b02      	cmp	r3, #2
 8003494:	d112      	bne.n	80034bc <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349a:	881a      	ldrh	r2, [r3, #0]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a6:	1c9a      	adds	r2, r3, #2
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	3b01      	subs	r3, #1
 80034b4:	b29a      	uxth	r2, r3
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	86da      	strh	r2, [r3, #54]	; 0x36
 80034ba:	e011      	b.n	80034e0 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80034bc:	f7fd ff8c 	bl	80013d8 <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	69bb      	ldr	r3, [r7, #24]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	683a      	ldr	r2, [r7, #0]
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d803      	bhi.n	80034d4 <HAL_SPI_Transmit+0x168>
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034d2:	d102      	bne.n	80034da <HAL_SPI_Transmit+0x16e>
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d102      	bne.n	80034e0 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80034de:	e074      	b.n	80035ca <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d1ce      	bne.n	8003488 <HAL_SPI_Transmit+0x11c>
 80034ea:	e04c      	b.n	8003586 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d002      	beq.n	80034fa <HAL_SPI_Transmit+0x18e>
 80034f4:	8afb      	ldrh	r3, [r7, #22]
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d140      	bne.n	800357c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	330c      	adds	r3, #12
 8003504:	7812      	ldrb	r2, [r2, #0]
 8003506:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800350c:	1c5a      	adds	r2, r3, #1
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003516:	b29b      	uxth	r3, r3
 8003518:	3b01      	subs	r3, #1
 800351a:	b29a      	uxth	r2, r3
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003520:	e02c      	b.n	800357c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	f003 0302 	and.w	r3, r3, #2
 800352c:	2b02      	cmp	r3, #2
 800352e:	d113      	bne.n	8003558 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	330c      	adds	r3, #12
 800353a:	7812      	ldrb	r2, [r2, #0]
 800353c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003542:	1c5a      	adds	r2, r3, #1
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800354c:	b29b      	uxth	r3, r3
 800354e:	3b01      	subs	r3, #1
 8003550:	b29a      	uxth	r2, r3
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	86da      	strh	r2, [r3, #54]	; 0x36
 8003556:	e011      	b.n	800357c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003558:	f7fd ff3e 	bl	80013d8 <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	69bb      	ldr	r3, [r7, #24]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	683a      	ldr	r2, [r7, #0]
 8003564:	429a      	cmp	r2, r3
 8003566:	d803      	bhi.n	8003570 <HAL_SPI_Transmit+0x204>
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800356e:	d102      	bne.n	8003576 <HAL_SPI_Transmit+0x20a>
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d102      	bne.n	800357c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	77fb      	strb	r3, [r7, #31]
          goto error;
 800357a:	e026      	b.n	80035ca <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003580:	b29b      	uxth	r3, r3
 8003582:	2b00      	cmp	r3, #0
 8003584:	d1cd      	bne.n	8003522 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003586:	69ba      	ldr	r2, [r7, #24]
 8003588:	6839      	ldr	r1, [r7, #0]
 800358a:	68f8      	ldr	r0, [r7, #12]
 800358c:	f000 f9b6 	bl	80038fc <SPI_EndRxTxTransaction>
 8003590:	4603      	mov	r3, r0
 8003592:	2b00      	cmp	r3, #0
 8003594:	d002      	beq.n	800359c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2220      	movs	r2, #32
 800359a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d10a      	bne.n	80035ba <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80035a4:	2300      	movs	r3, #0
 80035a6:	613b      	str	r3, [r7, #16]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	68db      	ldr	r3, [r3, #12]
 80035ae:	613b      	str	r3, [r7, #16]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	613b      	str	r3, [r7, #16]
 80035b8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d002      	beq.n	80035c8 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	77fb      	strb	r3, [r7, #31]
 80035c6:	e000      	b.n	80035ca <HAL_SPI_Transmit+0x25e>
  }

error:
 80035c8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2201      	movs	r2, #1
 80035ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2200      	movs	r2, #0
 80035d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80035da:	7ffb      	ldrb	r3, [r7, #31]
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3720      	adds	r7, #32
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b088      	sub	sp, #32
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80035fc:	69bb      	ldr	r3, [r7, #24]
 80035fe:	099b      	lsrs	r3, r3, #6
 8003600:	f003 0301 	and.w	r3, r3, #1
 8003604:	2b00      	cmp	r3, #0
 8003606:	d10f      	bne.n	8003628 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800360e:	2b00      	cmp	r3, #0
 8003610:	d00a      	beq.n	8003628 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	099b      	lsrs	r3, r3, #6
 8003616:	f003 0301 	and.w	r3, r3, #1
 800361a:	2b00      	cmp	r3, #0
 800361c:	d004      	beq.n	8003628 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	4798      	blx	r3
    return;
 8003626:	e0be      	b.n	80037a6 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003628:	69bb      	ldr	r3, [r7, #24]
 800362a:	085b      	lsrs	r3, r3, #1
 800362c:	f003 0301 	and.w	r3, r3, #1
 8003630:	2b00      	cmp	r3, #0
 8003632:	d00a      	beq.n	800364a <HAL_SPI_IRQHandler+0x66>
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	09db      	lsrs	r3, r3, #7
 8003638:	f003 0301 	and.w	r3, r3, #1
 800363c:	2b00      	cmp	r3, #0
 800363e:	d004      	beq.n	800364a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	4798      	blx	r3
    return;
 8003648:	e0ad      	b.n	80037a6 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 800364a:	69bb      	ldr	r3, [r7, #24]
 800364c:	095b      	lsrs	r3, r3, #5
 800364e:	f003 0301 	and.w	r3, r3, #1
 8003652:	2b00      	cmp	r3, #0
 8003654:	d106      	bne.n	8003664 <HAL_SPI_IRQHandler+0x80>
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	099b      	lsrs	r3, r3, #6
 800365a:	f003 0301 	and.w	r3, r3, #1
 800365e:	2b00      	cmp	r3, #0
 8003660:	f000 80a1 	beq.w	80037a6 <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003664:	69fb      	ldr	r3, [r7, #28]
 8003666:	095b      	lsrs	r3, r3, #5
 8003668:	f003 0301 	and.w	r3, r3, #1
 800366c:	2b00      	cmp	r3, #0
 800366e:	f000 809a 	beq.w	80037a6 <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003672:	69bb      	ldr	r3, [r7, #24]
 8003674:	099b      	lsrs	r3, r3, #6
 8003676:	f003 0301 	and.w	r3, r3, #1
 800367a:	2b00      	cmp	r3, #0
 800367c:	d023      	beq.n	80036c6 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003684:	b2db      	uxtb	r3, r3
 8003686:	2b03      	cmp	r3, #3
 8003688:	d011      	beq.n	80036ae <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800368e:	f043 0204 	orr.w	r2, r3, #4
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003696:	2300      	movs	r3, #0
 8003698:	617b      	str	r3, [r7, #20]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	617b      	str	r3, [r7, #20]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	617b      	str	r3, [r7, #20]
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	e00b      	b.n	80036c6 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80036ae:	2300      	movs	r3, #0
 80036b0:	613b      	str	r3, [r7, #16]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	613b      	str	r3, [r7, #16]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	613b      	str	r3, [r7, #16]
 80036c2:	693b      	ldr	r3, [r7, #16]
        return;
 80036c4:	e06f      	b.n	80037a6 <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80036c6:	69bb      	ldr	r3, [r7, #24]
 80036c8:	095b      	lsrs	r3, r3, #5
 80036ca:	f003 0301 	and.w	r3, r3, #1
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d014      	beq.n	80036fc <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036d6:	f043 0201 	orr.w	r2, r3, #1
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80036de:	2300      	movs	r3, #0
 80036e0:	60fb      	str	r3, [r7, #12]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	60fb      	str	r3, [r7, #12]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036f8:	601a      	str	r2, [r3, #0]
 80036fa:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003700:	2b00      	cmp	r3, #0
 8003702:	d04f      	beq.n	80037a4 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	685a      	ldr	r2, [r3, #4]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003712:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	f003 0302 	and.w	r3, r3, #2
 8003722:	2b00      	cmp	r3, #0
 8003724:	d104      	bne.n	8003730 <HAL_SPI_IRQHandler+0x14c>
 8003726:	69fb      	ldr	r3, [r7, #28]
 8003728:	f003 0301 	and.w	r3, r3, #1
 800372c:	2b00      	cmp	r3, #0
 800372e:	d034      	beq.n	800379a <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	685a      	ldr	r2, [r3, #4]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f022 0203 	bic.w	r2, r2, #3
 800373e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003744:	2b00      	cmp	r3, #0
 8003746:	d011      	beq.n	800376c <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800374c:	4a17      	ldr	r2, [pc, #92]	; (80037ac <HAL_SPI_IRQHandler+0x1c8>)
 800374e:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003754:	4618      	mov	r0, r3
 8003756:	f7fd fff1 	bl	800173c <HAL_DMA_Abort_IT>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d005      	beq.n	800376c <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003764:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003770:	2b00      	cmp	r3, #0
 8003772:	d016      	beq.n	80037a2 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003778:	4a0c      	ldr	r2, [pc, #48]	; (80037ac <HAL_SPI_IRQHandler+0x1c8>)
 800377a:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003780:	4618      	mov	r0, r3
 8003782:	f7fd ffdb 	bl	800173c <HAL_DMA_Abort_IT>
 8003786:	4603      	mov	r3, r0
 8003788:	2b00      	cmp	r3, #0
 800378a:	d00a      	beq.n	80037a2 <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003790:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8003798:	e003      	b.n	80037a2 <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f000 f808 	bl	80037b0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80037a0:	e000      	b.n	80037a4 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 80037a2:	bf00      	nop
    return;
 80037a4:	bf00      	nop
  }
}
 80037a6:	3720      	adds	r7, #32
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	080037c3 	.word	0x080037c3

080037b0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80037b8:	bf00      	nop
 80037ba:	370c      	adds	r7, #12
 80037bc:	46bd      	mov	sp, r7
 80037be:	bc80      	pop	{r7}
 80037c0:	4770      	bx	lr

080037c2 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80037c2:	b580      	push	{r7, lr}
 80037c4:	b084      	sub	sp, #16
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ce:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2200      	movs	r2, #0
 80037d4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2200      	movs	r2, #0
 80037da:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80037dc:	68f8      	ldr	r0, [r7, #12]
 80037de:	f7ff ffe7 	bl	80037b0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80037e2:	bf00      	nop
 80037e4:	3710      	adds	r7, #16
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
	...

080037ec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b088      	sub	sp, #32
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	60f8      	str	r0, [r7, #12]
 80037f4:	60b9      	str	r1, [r7, #8]
 80037f6:	603b      	str	r3, [r7, #0]
 80037f8:	4613      	mov	r3, r2
 80037fa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80037fc:	f7fd fdec 	bl	80013d8 <HAL_GetTick>
 8003800:	4602      	mov	r2, r0
 8003802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003804:	1a9b      	subs	r3, r3, r2
 8003806:	683a      	ldr	r2, [r7, #0]
 8003808:	4413      	add	r3, r2
 800380a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800380c:	f7fd fde4 	bl	80013d8 <HAL_GetTick>
 8003810:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003812:	4b39      	ldr	r3, [pc, #228]	; (80038f8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	015b      	lsls	r3, r3, #5
 8003818:	0d1b      	lsrs	r3, r3, #20
 800381a:	69fa      	ldr	r2, [r7, #28]
 800381c:	fb02 f303 	mul.w	r3, r2, r3
 8003820:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003822:	e054      	b.n	80038ce <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	f1b3 3fff 	cmp.w	r3, #4294967295
 800382a:	d050      	beq.n	80038ce <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800382c:	f7fd fdd4 	bl	80013d8 <HAL_GetTick>
 8003830:	4602      	mov	r2, r0
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	69fa      	ldr	r2, [r7, #28]
 8003838:	429a      	cmp	r2, r3
 800383a:	d902      	bls.n	8003842 <SPI_WaitFlagStateUntilTimeout+0x56>
 800383c:	69fb      	ldr	r3, [r7, #28]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d13d      	bne.n	80038be <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	685a      	ldr	r2, [r3, #4]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003850:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800385a:	d111      	bne.n	8003880 <SPI_WaitFlagStateUntilTimeout+0x94>
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003864:	d004      	beq.n	8003870 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800386e:	d107      	bne.n	8003880 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800387e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003884:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003888:	d10f      	bne.n	80038aa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003898:	601a      	str	r2, [r3, #0]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038a8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2201      	movs	r2, #1
 80038ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2200      	movs	r2, #0
 80038b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e017      	b.n	80038ee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d101      	bne.n	80038c8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80038c4:	2300      	movs	r3, #0
 80038c6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	3b01      	subs	r3, #1
 80038cc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	689a      	ldr	r2, [r3, #8]
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	4013      	ands	r3, r2
 80038d8:	68ba      	ldr	r2, [r7, #8]
 80038da:	429a      	cmp	r2, r3
 80038dc:	bf0c      	ite	eq
 80038de:	2301      	moveq	r3, #1
 80038e0:	2300      	movne	r3, #0
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	461a      	mov	r2, r3
 80038e6:	79fb      	ldrb	r3, [r7, #7]
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d19b      	bne.n	8003824 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80038ec:	2300      	movs	r3, #0
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3720      	adds	r7, #32
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	20000000 	.word	0x20000000

080038fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b086      	sub	sp, #24
 8003900:	af02      	add	r7, sp, #8
 8003902:	60f8      	str	r0, [r7, #12]
 8003904:	60b9      	str	r1, [r7, #8]
 8003906:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	9300      	str	r3, [sp, #0]
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	2200      	movs	r2, #0
 8003910:	2180      	movs	r1, #128	; 0x80
 8003912:	68f8      	ldr	r0, [r7, #12]
 8003914:	f7ff ff6a 	bl	80037ec <SPI_WaitFlagStateUntilTimeout>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d007      	beq.n	800392e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003922:	f043 0220 	orr.w	r2, r3, #32
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e000      	b.n	8003930 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800392e:	2300      	movs	r3, #0
}
 8003930:	4618      	mov	r0, r3
 8003932:	3710      	adds	r7, #16
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}

08003938 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b082      	sub	sp, #8
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d101      	bne.n	800394a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e03f      	b.n	80039ca <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003950:	b2db      	uxtb	r3, r3
 8003952:	2b00      	cmp	r3, #0
 8003954:	d106      	bne.n	8003964 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f7fd fc08 	bl	8001174 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2224      	movs	r2, #36	; 0x24
 8003968:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	68da      	ldr	r2, [r3, #12]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800397a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f000 f905 	bl	8003b8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	691a      	ldr	r2, [r3, #16]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003990:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	695a      	ldr	r2, [r3, #20]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	68da      	ldr	r2, [r3, #12]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80039b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2200      	movs	r2, #0
 80039b6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2220      	movs	r2, #32
 80039bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2220      	movs	r2, #32
 80039c4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80039c8:	2300      	movs	r3, #0
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3708      	adds	r7, #8
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}

080039d2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039d2:	b580      	push	{r7, lr}
 80039d4:	b08a      	sub	sp, #40	; 0x28
 80039d6:	af02      	add	r7, sp, #8
 80039d8:	60f8      	str	r0, [r7, #12]
 80039da:	60b9      	str	r1, [r7, #8]
 80039dc:	603b      	str	r3, [r7, #0]
 80039de:	4613      	mov	r3, r2
 80039e0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80039e2:	2300      	movs	r3, #0
 80039e4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	2b20      	cmp	r3, #32
 80039f0:	d17c      	bne.n	8003aec <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d002      	beq.n	80039fe <HAL_UART_Transmit+0x2c>
 80039f8:	88fb      	ldrh	r3, [r7, #6]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d101      	bne.n	8003a02 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e075      	b.n	8003aee <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d101      	bne.n	8003a10 <HAL_UART_Transmit+0x3e>
 8003a0c:	2302      	movs	r3, #2
 8003a0e:	e06e      	b.n	8003aee <HAL_UART_Transmit+0x11c>
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2201      	movs	r2, #1
 8003a14:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2221      	movs	r2, #33	; 0x21
 8003a22:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003a26:	f7fd fcd7 	bl	80013d8 <HAL_GetTick>
 8003a2a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	88fa      	ldrh	r2, [r7, #6]
 8003a30:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	88fa      	ldrh	r2, [r7, #6]
 8003a36:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a40:	d108      	bne.n	8003a54 <HAL_UART_Transmit+0x82>
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	691b      	ldr	r3, [r3, #16]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d104      	bne.n	8003a54 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	61bb      	str	r3, [r7, #24]
 8003a52:	e003      	b.n	8003a5c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003a64:	e02a      	b.n	8003abc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	9300      	str	r3, [sp, #0]
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	2180      	movs	r1, #128	; 0x80
 8003a70:	68f8      	ldr	r0, [r7, #12]
 8003a72:	f000 f840 	bl	8003af6 <UART_WaitOnFlagUntilTimeout>
 8003a76:	4603      	mov	r3, r0
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d001      	beq.n	8003a80 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003a7c:	2303      	movs	r3, #3
 8003a7e:	e036      	b.n	8003aee <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d10b      	bne.n	8003a9e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a86:	69bb      	ldr	r3, [r7, #24]
 8003a88:	881b      	ldrh	r3, [r3, #0]
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a94:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003a96:	69bb      	ldr	r3, [r7, #24]
 8003a98:	3302      	adds	r3, #2
 8003a9a:	61bb      	str	r3, [r7, #24]
 8003a9c:	e007      	b.n	8003aae <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	781a      	ldrb	r2, [r3, #0]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	3301      	adds	r3, #1
 8003aac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	3b01      	subs	r3, #1
 8003ab6:	b29a      	uxth	r2, r3
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d1cf      	bne.n	8003a66 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	9300      	str	r3, [sp, #0]
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	2200      	movs	r2, #0
 8003ace:	2140      	movs	r1, #64	; 0x40
 8003ad0:	68f8      	ldr	r0, [r7, #12]
 8003ad2:	f000 f810 	bl	8003af6 <UART_WaitOnFlagUntilTimeout>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d001      	beq.n	8003ae0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003adc:	2303      	movs	r3, #3
 8003ade:	e006      	b.n	8003aee <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2220      	movs	r2, #32
 8003ae4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	e000      	b.n	8003aee <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003aec:	2302      	movs	r3, #2
  }
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3720      	adds	r7, #32
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}

08003af6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003af6:	b580      	push	{r7, lr}
 8003af8:	b084      	sub	sp, #16
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	60f8      	str	r0, [r7, #12]
 8003afe:	60b9      	str	r1, [r7, #8]
 8003b00:	603b      	str	r3, [r7, #0]
 8003b02:	4613      	mov	r3, r2
 8003b04:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b06:	e02c      	b.n	8003b62 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b08:	69bb      	ldr	r3, [r7, #24]
 8003b0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b0e:	d028      	beq.n	8003b62 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003b10:	69bb      	ldr	r3, [r7, #24]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d007      	beq.n	8003b26 <UART_WaitOnFlagUntilTimeout+0x30>
 8003b16:	f7fd fc5f 	bl	80013d8 <HAL_GetTick>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	1ad3      	subs	r3, r2, r3
 8003b20:	69ba      	ldr	r2, [r7, #24]
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d21d      	bcs.n	8003b62 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	68da      	ldr	r2, [r3, #12]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003b34:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	695a      	ldr	r2, [r3, #20]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f022 0201 	bic.w	r2, r2, #1
 8003b44:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2220      	movs	r2, #32
 8003b4a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2220      	movs	r2, #32
 8003b52:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	e00f      	b.n	8003b82 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	68ba      	ldr	r2, [r7, #8]
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	bf0c      	ite	eq
 8003b72:	2301      	moveq	r3, #1
 8003b74:	2300      	movne	r3, #0
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	461a      	mov	r2, r3
 8003b7a:	79fb      	ldrb	r3, [r7, #7]
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d0c3      	beq.n	8003b08 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b80:	2300      	movs	r3, #0
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3710      	adds	r7, #16
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
	...

08003b8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b084      	sub	sp, #16
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	691b      	ldr	r3, [r3, #16]
 8003b9a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	68da      	ldr	r2, [r3, #12]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	430a      	orrs	r2, r1
 8003ba8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	689a      	ldr	r2, [r3, #8]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	691b      	ldr	r3, [r3, #16]
 8003bb2:	431a      	orrs	r2, r3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	695b      	ldr	r3, [r3, #20]
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	68db      	ldr	r3, [r3, #12]
 8003bc2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003bc6:	f023 030c 	bic.w	r3, r3, #12
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	6812      	ldr	r2, [r2, #0]
 8003bce:	68b9      	ldr	r1, [r7, #8]
 8003bd0:	430b      	orrs	r3, r1
 8003bd2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	695b      	ldr	r3, [r3, #20]
 8003bda:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	699a      	ldr	r2, [r3, #24]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	430a      	orrs	r2, r1
 8003be8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a2c      	ldr	r2, [pc, #176]	; (8003ca0 <UART_SetConfig+0x114>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d103      	bne.n	8003bfc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003bf4:	f7ff fb04 	bl	8003200 <HAL_RCC_GetPCLK2Freq>
 8003bf8:	60f8      	str	r0, [r7, #12]
 8003bfa:	e002      	b.n	8003c02 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003bfc:	f7ff faec 	bl	80031d8 <HAL_RCC_GetPCLK1Freq>
 8003c00:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c02:	68fa      	ldr	r2, [r7, #12]
 8003c04:	4613      	mov	r3, r2
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	4413      	add	r3, r2
 8003c0a:	009a      	lsls	r2, r3, #2
 8003c0c:	441a      	add	r2, r3
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c18:	4a22      	ldr	r2, [pc, #136]	; (8003ca4 <UART_SetConfig+0x118>)
 8003c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c1e:	095b      	lsrs	r3, r3, #5
 8003c20:	0119      	lsls	r1, r3, #4
 8003c22:	68fa      	ldr	r2, [r7, #12]
 8003c24:	4613      	mov	r3, r2
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	4413      	add	r3, r2
 8003c2a:	009a      	lsls	r2, r3, #2
 8003c2c:	441a      	add	r2, r3
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c38:	4b1a      	ldr	r3, [pc, #104]	; (8003ca4 <UART_SetConfig+0x118>)
 8003c3a:	fba3 0302 	umull	r0, r3, r3, r2
 8003c3e:	095b      	lsrs	r3, r3, #5
 8003c40:	2064      	movs	r0, #100	; 0x64
 8003c42:	fb00 f303 	mul.w	r3, r0, r3
 8003c46:	1ad3      	subs	r3, r2, r3
 8003c48:	011b      	lsls	r3, r3, #4
 8003c4a:	3332      	adds	r3, #50	; 0x32
 8003c4c:	4a15      	ldr	r2, [pc, #84]	; (8003ca4 <UART_SetConfig+0x118>)
 8003c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c52:	095b      	lsrs	r3, r3, #5
 8003c54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c58:	4419      	add	r1, r3
 8003c5a:	68fa      	ldr	r2, [r7, #12]
 8003c5c:	4613      	mov	r3, r2
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	4413      	add	r3, r2
 8003c62:	009a      	lsls	r2, r3, #2
 8003c64:	441a      	add	r2, r3
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c70:	4b0c      	ldr	r3, [pc, #48]	; (8003ca4 <UART_SetConfig+0x118>)
 8003c72:	fba3 0302 	umull	r0, r3, r3, r2
 8003c76:	095b      	lsrs	r3, r3, #5
 8003c78:	2064      	movs	r0, #100	; 0x64
 8003c7a:	fb00 f303 	mul.w	r3, r0, r3
 8003c7e:	1ad3      	subs	r3, r2, r3
 8003c80:	011b      	lsls	r3, r3, #4
 8003c82:	3332      	adds	r3, #50	; 0x32
 8003c84:	4a07      	ldr	r2, [pc, #28]	; (8003ca4 <UART_SetConfig+0x118>)
 8003c86:	fba2 2303 	umull	r2, r3, r2, r3
 8003c8a:	095b      	lsrs	r3, r3, #5
 8003c8c:	f003 020f 	and.w	r2, r3, #15
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	440a      	add	r2, r1
 8003c96:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003c98:	bf00      	nop
 8003c9a:	3710      	adds	r7, #16
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}
 8003ca0:	40013800 	.word	0x40013800
 8003ca4:	51eb851f 	.word	0x51eb851f

08003ca8 <__errno>:
 8003ca8:	4b01      	ldr	r3, [pc, #4]	; (8003cb0 <__errno+0x8>)
 8003caa:	6818      	ldr	r0, [r3, #0]
 8003cac:	4770      	bx	lr
 8003cae:	bf00      	nop
 8003cb0:	2000000c 	.word	0x2000000c

08003cb4 <__libc_init_array>:
 8003cb4:	b570      	push	{r4, r5, r6, lr}
 8003cb6:	2600      	movs	r6, #0
 8003cb8:	4d0c      	ldr	r5, [pc, #48]	; (8003cec <__libc_init_array+0x38>)
 8003cba:	4c0d      	ldr	r4, [pc, #52]	; (8003cf0 <__libc_init_array+0x3c>)
 8003cbc:	1b64      	subs	r4, r4, r5
 8003cbe:	10a4      	asrs	r4, r4, #2
 8003cc0:	42a6      	cmp	r6, r4
 8003cc2:	d109      	bne.n	8003cd8 <__libc_init_array+0x24>
 8003cc4:	f000 fc5c 	bl	8004580 <_init>
 8003cc8:	2600      	movs	r6, #0
 8003cca:	4d0a      	ldr	r5, [pc, #40]	; (8003cf4 <__libc_init_array+0x40>)
 8003ccc:	4c0a      	ldr	r4, [pc, #40]	; (8003cf8 <__libc_init_array+0x44>)
 8003cce:	1b64      	subs	r4, r4, r5
 8003cd0:	10a4      	asrs	r4, r4, #2
 8003cd2:	42a6      	cmp	r6, r4
 8003cd4:	d105      	bne.n	8003ce2 <__libc_init_array+0x2e>
 8003cd6:	bd70      	pop	{r4, r5, r6, pc}
 8003cd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cdc:	4798      	blx	r3
 8003cde:	3601      	adds	r6, #1
 8003ce0:	e7ee      	b.n	8003cc0 <__libc_init_array+0xc>
 8003ce2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ce6:	4798      	blx	r3
 8003ce8:	3601      	adds	r6, #1
 8003cea:	e7f2      	b.n	8003cd2 <__libc_init_array+0x1e>
 8003cec:	08004658 	.word	0x08004658
 8003cf0:	08004658 	.word	0x08004658
 8003cf4:	08004658 	.word	0x08004658
 8003cf8:	0800465c 	.word	0x0800465c

08003cfc <memcpy>:
 8003cfc:	440a      	add	r2, r1
 8003cfe:	4291      	cmp	r1, r2
 8003d00:	f100 33ff 	add.w	r3, r0, #4294967295
 8003d04:	d100      	bne.n	8003d08 <memcpy+0xc>
 8003d06:	4770      	bx	lr
 8003d08:	b510      	push	{r4, lr}
 8003d0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003d0e:	4291      	cmp	r1, r2
 8003d10:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003d14:	d1f9      	bne.n	8003d0a <memcpy+0xe>
 8003d16:	bd10      	pop	{r4, pc}

08003d18 <memmove>:
 8003d18:	4288      	cmp	r0, r1
 8003d1a:	b510      	push	{r4, lr}
 8003d1c:	eb01 0402 	add.w	r4, r1, r2
 8003d20:	d902      	bls.n	8003d28 <memmove+0x10>
 8003d22:	4284      	cmp	r4, r0
 8003d24:	4623      	mov	r3, r4
 8003d26:	d807      	bhi.n	8003d38 <memmove+0x20>
 8003d28:	1e43      	subs	r3, r0, #1
 8003d2a:	42a1      	cmp	r1, r4
 8003d2c:	d008      	beq.n	8003d40 <memmove+0x28>
 8003d2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003d32:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003d36:	e7f8      	b.n	8003d2a <memmove+0x12>
 8003d38:	4601      	mov	r1, r0
 8003d3a:	4402      	add	r2, r0
 8003d3c:	428a      	cmp	r2, r1
 8003d3e:	d100      	bne.n	8003d42 <memmove+0x2a>
 8003d40:	bd10      	pop	{r4, pc}
 8003d42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003d46:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003d4a:	e7f7      	b.n	8003d3c <memmove+0x24>

08003d4c <memset>:
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	4402      	add	r2, r0
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d100      	bne.n	8003d56 <memset+0xa>
 8003d54:	4770      	bx	lr
 8003d56:	f803 1b01 	strb.w	r1, [r3], #1
 8003d5a:	e7f9      	b.n	8003d50 <memset+0x4>

08003d5c <_vsiprintf_r>:
 8003d5c:	b500      	push	{lr}
 8003d5e:	b09b      	sub	sp, #108	; 0x6c
 8003d60:	9100      	str	r1, [sp, #0]
 8003d62:	9104      	str	r1, [sp, #16]
 8003d64:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003d68:	9105      	str	r1, [sp, #20]
 8003d6a:	9102      	str	r1, [sp, #8]
 8003d6c:	4905      	ldr	r1, [pc, #20]	; (8003d84 <_vsiprintf_r+0x28>)
 8003d6e:	9103      	str	r1, [sp, #12]
 8003d70:	4669      	mov	r1, sp
 8003d72:	f000 f86f 	bl	8003e54 <_svfiprintf_r>
 8003d76:	2200      	movs	r2, #0
 8003d78:	9b00      	ldr	r3, [sp, #0]
 8003d7a:	701a      	strb	r2, [r3, #0]
 8003d7c:	b01b      	add	sp, #108	; 0x6c
 8003d7e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003d82:	bf00      	nop
 8003d84:	ffff0208 	.word	0xffff0208

08003d88 <vsiprintf>:
 8003d88:	4613      	mov	r3, r2
 8003d8a:	460a      	mov	r2, r1
 8003d8c:	4601      	mov	r1, r0
 8003d8e:	4802      	ldr	r0, [pc, #8]	; (8003d98 <vsiprintf+0x10>)
 8003d90:	6800      	ldr	r0, [r0, #0]
 8003d92:	f7ff bfe3 	b.w	8003d5c <_vsiprintf_r>
 8003d96:	bf00      	nop
 8003d98:	2000000c 	.word	0x2000000c

08003d9c <__ssputs_r>:
 8003d9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003da0:	688e      	ldr	r6, [r1, #8]
 8003da2:	4682      	mov	sl, r0
 8003da4:	429e      	cmp	r6, r3
 8003da6:	460c      	mov	r4, r1
 8003da8:	4690      	mov	r8, r2
 8003daa:	461f      	mov	r7, r3
 8003dac:	d838      	bhi.n	8003e20 <__ssputs_r+0x84>
 8003dae:	898a      	ldrh	r2, [r1, #12]
 8003db0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003db4:	d032      	beq.n	8003e1c <__ssputs_r+0x80>
 8003db6:	6825      	ldr	r5, [r4, #0]
 8003db8:	6909      	ldr	r1, [r1, #16]
 8003dba:	3301      	adds	r3, #1
 8003dbc:	eba5 0901 	sub.w	r9, r5, r1
 8003dc0:	6965      	ldr	r5, [r4, #20]
 8003dc2:	444b      	add	r3, r9
 8003dc4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003dc8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003dcc:	106d      	asrs	r5, r5, #1
 8003dce:	429d      	cmp	r5, r3
 8003dd0:	bf38      	it	cc
 8003dd2:	461d      	movcc	r5, r3
 8003dd4:	0553      	lsls	r3, r2, #21
 8003dd6:	d531      	bpl.n	8003e3c <__ssputs_r+0xa0>
 8003dd8:	4629      	mov	r1, r5
 8003dda:	f000 fb2b 	bl	8004434 <_malloc_r>
 8003dde:	4606      	mov	r6, r0
 8003de0:	b950      	cbnz	r0, 8003df8 <__ssputs_r+0x5c>
 8003de2:	230c      	movs	r3, #12
 8003de4:	f04f 30ff 	mov.w	r0, #4294967295
 8003de8:	f8ca 3000 	str.w	r3, [sl]
 8003dec:	89a3      	ldrh	r3, [r4, #12]
 8003dee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003df2:	81a3      	strh	r3, [r4, #12]
 8003df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003df8:	464a      	mov	r2, r9
 8003dfa:	6921      	ldr	r1, [r4, #16]
 8003dfc:	f7ff ff7e 	bl	8003cfc <memcpy>
 8003e00:	89a3      	ldrh	r3, [r4, #12]
 8003e02:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003e06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e0a:	81a3      	strh	r3, [r4, #12]
 8003e0c:	6126      	str	r6, [r4, #16]
 8003e0e:	444e      	add	r6, r9
 8003e10:	6026      	str	r6, [r4, #0]
 8003e12:	463e      	mov	r6, r7
 8003e14:	6165      	str	r5, [r4, #20]
 8003e16:	eba5 0509 	sub.w	r5, r5, r9
 8003e1a:	60a5      	str	r5, [r4, #8]
 8003e1c:	42be      	cmp	r6, r7
 8003e1e:	d900      	bls.n	8003e22 <__ssputs_r+0x86>
 8003e20:	463e      	mov	r6, r7
 8003e22:	4632      	mov	r2, r6
 8003e24:	4641      	mov	r1, r8
 8003e26:	6820      	ldr	r0, [r4, #0]
 8003e28:	f7ff ff76 	bl	8003d18 <memmove>
 8003e2c:	68a3      	ldr	r3, [r4, #8]
 8003e2e:	6822      	ldr	r2, [r4, #0]
 8003e30:	1b9b      	subs	r3, r3, r6
 8003e32:	4432      	add	r2, r6
 8003e34:	2000      	movs	r0, #0
 8003e36:	60a3      	str	r3, [r4, #8]
 8003e38:	6022      	str	r2, [r4, #0]
 8003e3a:	e7db      	b.n	8003df4 <__ssputs_r+0x58>
 8003e3c:	462a      	mov	r2, r5
 8003e3e:	f000 fb53 	bl	80044e8 <_realloc_r>
 8003e42:	4606      	mov	r6, r0
 8003e44:	2800      	cmp	r0, #0
 8003e46:	d1e1      	bne.n	8003e0c <__ssputs_r+0x70>
 8003e48:	4650      	mov	r0, sl
 8003e4a:	6921      	ldr	r1, [r4, #16]
 8003e4c:	f000 faa6 	bl	800439c <_free_r>
 8003e50:	e7c7      	b.n	8003de2 <__ssputs_r+0x46>
	...

08003e54 <_svfiprintf_r>:
 8003e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e58:	4698      	mov	r8, r3
 8003e5a:	898b      	ldrh	r3, [r1, #12]
 8003e5c:	4607      	mov	r7, r0
 8003e5e:	061b      	lsls	r3, r3, #24
 8003e60:	460d      	mov	r5, r1
 8003e62:	4614      	mov	r4, r2
 8003e64:	b09d      	sub	sp, #116	; 0x74
 8003e66:	d50e      	bpl.n	8003e86 <_svfiprintf_r+0x32>
 8003e68:	690b      	ldr	r3, [r1, #16]
 8003e6a:	b963      	cbnz	r3, 8003e86 <_svfiprintf_r+0x32>
 8003e6c:	2140      	movs	r1, #64	; 0x40
 8003e6e:	f000 fae1 	bl	8004434 <_malloc_r>
 8003e72:	6028      	str	r0, [r5, #0]
 8003e74:	6128      	str	r0, [r5, #16]
 8003e76:	b920      	cbnz	r0, 8003e82 <_svfiprintf_r+0x2e>
 8003e78:	230c      	movs	r3, #12
 8003e7a:	603b      	str	r3, [r7, #0]
 8003e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e80:	e0d1      	b.n	8004026 <_svfiprintf_r+0x1d2>
 8003e82:	2340      	movs	r3, #64	; 0x40
 8003e84:	616b      	str	r3, [r5, #20]
 8003e86:	2300      	movs	r3, #0
 8003e88:	9309      	str	r3, [sp, #36]	; 0x24
 8003e8a:	2320      	movs	r3, #32
 8003e8c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003e90:	2330      	movs	r3, #48	; 0x30
 8003e92:	f04f 0901 	mov.w	r9, #1
 8003e96:	f8cd 800c 	str.w	r8, [sp, #12]
 8003e9a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004040 <_svfiprintf_r+0x1ec>
 8003e9e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003ea2:	4623      	mov	r3, r4
 8003ea4:	469a      	mov	sl, r3
 8003ea6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003eaa:	b10a      	cbz	r2, 8003eb0 <_svfiprintf_r+0x5c>
 8003eac:	2a25      	cmp	r2, #37	; 0x25
 8003eae:	d1f9      	bne.n	8003ea4 <_svfiprintf_r+0x50>
 8003eb0:	ebba 0b04 	subs.w	fp, sl, r4
 8003eb4:	d00b      	beq.n	8003ece <_svfiprintf_r+0x7a>
 8003eb6:	465b      	mov	r3, fp
 8003eb8:	4622      	mov	r2, r4
 8003eba:	4629      	mov	r1, r5
 8003ebc:	4638      	mov	r0, r7
 8003ebe:	f7ff ff6d 	bl	8003d9c <__ssputs_r>
 8003ec2:	3001      	adds	r0, #1
 8003ec4:	f000 80aa 	beq.w	800401c <_svfiprintf_r+0x1c8>
 8003ec8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003eca:	445a      	add	r2, fp
 8003ecc:	9209      	str	r2, [sp, #36]	; 0x24
 8003ece:	f89a 3000 	ldrb.w	r3, [sl]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	f000 80a2 	beq.w	800401c <_svfiprintf_r+0x1c8>
 8003ed8:	2300      	movs	r3, #0
 8003eda:	f04f 32ff 	mov.w	r2, #4294967295
 8003ede:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003ee2:	f10a 0a01 	add.w	sl, sl, #1
 8003ee6:	9304      	str	r3, [sp, #16]
 8003ee8:	9307      	str	r3, [sp, #28]
 8003eea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003eee:	931a      	str	r3, [sp, #104]	; 0x68
 8003ef0:	4654      	mov	r4, sl
 8003ef2:	2205      	movs	r2, #5
 8003ef4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ef8:	4851      	ldr	r0, [pc, #324]	; (8004040 <_svfiprintf_r+0x1ec>)
 8003efa:	f000 fa41 	bl	8004380 <memchr>
 8003efe:	9a04      	ldr	r2, [sp, #16]
 8003f00:	b9d8      	cbnz	r0, 8003f3a <_svfiprintf_r+0xe6>
 8003f02:	06d0      	lsls	r0, r2, #27
 8003f04:	bf44      	itt	mi
 8003f06:	2320      	movmi	r3, #32
 8003f08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f0c:	0711      	lsls	r1, r2, #28
 8003f0e:	bf44      	itt	mi
 8003f10:	232b      	movmi	r3, #43	; 0x2b
 8003f12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f16:	f89a 3000 	ldrb.w	r3, [sl]
 8003f1a:	2b2a      	cmp	r3, #42	; 0x2a
 8003f1c:	d015      	beq.n	8003f4a <_svfiprintf_r+0xf6>
 8003f1e:	4654      	mov	r4, sl
 8003f20:	2000      	movs	r0, #0
 8003f22:	f04f 0c0a 	mov.w	ip, #10
 8003f26:	9a07      	ldr	r2, [sp, #28]
 8003f28:	4621      	mov	r1, r4
 8003f2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003f2e:	3b30      	subs	r3, #48	; 0x30
 8003f30:	2b09      	cmp	r3, #9
 8003f32:	d94e      	bls.n	8003fd2 <_svfiprintf_r+0x17e>
 8003f34:	b1b0      	cbz	r0, 8003f64 <_svfiprintf_r+0x110>
 8003f36:	9207      	str	r2, [sp, #28]
 8003f38:	e014      	b.n	8003f64 <_svfiprintf_r+0x110>
 8003f3a:	eba0 0308 	sub.w	r3, r0, r8
 8003f3e:	fa09 f303 	lsl.w	r3, r9, r3
 8003f42:	4313      	orrs	r3, r2
 8003f44:	46a2      	mov	sl, r4
 8003f46:	9304      	str	r3, [sp, #16]
 8003f48:	e7d2      	b.n	8003ef0 <_svfiprintf_r+0x9c>
 8003f4a:	9b03      	ldr	r3, [sp, #12]
 8003f4c:	1d19      	adds	r1, r3, #4
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	9103      	str	r1, [sp, #12]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	bfbb      	ittet	lt
 8003f56:	425b      	neglt	r3, r3
 8003f58:	f042 0202 	orrlt.w	r2, r2, #2
 8003f5c:	9307      	strge	r3, [sp, #28]
 8003f5e:	9307      	strlt	r3, [sp, #28]
 8003f60:	bfb8      	it	lt
 8003f62:	9204      	strlt	r2, [sp, #16]
 8003f64:	7823      	ldrb	r3, [r4, #0]
 8003f66:	2b2e      	cmp	r3, #46	; 0x2e
 8003f68:	d10c      	bne.n	8003f84 <_svfiprintf_r+0x130>
 8003f6a:	7863      	ldrb	r3, [r4, #1]
 8003f6c:	2b2a      	cmp	r3, #42	; 0x2a
 8003f6e:	d135      	bne.n	8003fdc <_svfiprintf_r+0x188>
 8003f70:	9b03      	ldr	r3, [sp, #12]
 8003f72:	3402      	adds	r4, #2
 8003f74:	1d1a      	adds	r2, r3, #4
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	9203      	str	r2, [sp, #12]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	bfb8      	it	lt
 8003f7e:	f04f 33ff 	movlt.w	r3, #4294967295
 8003f82:	9305      	str	r3, [sp, #20]
 8003f84:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004050 <_svfiprintf_r+0x1fc>
 8003f88:	2203      	movs	r2, #3
 8003f8a:	4650      	mov	r0, sl
 8003f8c:	7821      	ldrb	r1, [r4, #0]
 8003f8e:	f000 f9f7 	bl	8004380 <memchr>
 8003f92:	b140      	cbz	r0, 8003fa6 <_svfiprintf_r+0x152>
 8003f94:	2340      	movs	r3, #64	; 0x40
 8003f96:	eba0 000a 	sub.w	r0, r0, sl
 8003f9a:	fa03 f000 	lsl.w	r0, r3, r0
 8003f9e:	9b04      	ldr	r3, [sp, #16]
 8003fa0:	3401      	adds	r4, #1
 8003fa2:	4303      	orrs	r3, r0
 8003fa4:	9304      	str	r3, [sp, #16]
 8003fa6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003faa:	2206      	movs	r2, #6
 8003fac:	4825      	ldr	r0, [pc, #148]	; (8004044 <_svfiprintf_r+0x1f0>)
 8003fae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003fb2:	f000 f9e5 	bl	8004380 <memchr>
 8003fb6:	2800      	cmp	r0, #0
 8003fb8:	d038      	beq.n	800402c <_svfiprintf_r+0x1d8>
 8003fba:	4b23      	ldr	r3, [pc, #140]	; (8004048 <_svfiprintf_r+0x1f4>)
 8003fbc:	bb1b      	cbnz	r3, 8004006 <_svfiprintf_r+0x1b2>
 8003fbe:	9b03      	ldr	r3, [sp, #12]
 8003fc0:	3307      	adds	r3, #7
 8003fc2:	f023 0307 	bic.w	r3, r3, #7
 8003fc6:	3308      	adds	r3, #8
 8003fc8:	9303      	str	r3, [sp, #12]
 8003fca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003fcc:	4433      	add	r3, r6
 8003fce:	9309      	str	r3, [sp, #36]	; 0x24
 8003fd0:	e767      	b.n	8003ea2 <_svfiprintf_r+0x4e>
 8003fd2:	460c      	mov	r4, r1
 8003fd4:	2001      	movs	r0, #1
 8003fd6:	fb0c 3202 	mla	r2, ip, r2, r3
 8003fda:	e7a5      	b.n	8003f28 <_svfiprintf_r+0xd4>
 8003fdc:	2300      	movs	r3, #0
 8003fde:	f04f 0c0a 	mov.w	ip, #10
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	3401      	adds	r4, #1
 8003fe6:	9305      	str	r3, [sp, #20]
 8003fe8:	4620      	mov	r0, r4
 8003fea:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003fee:	3a30      	subs	r2, #48	; 0x30
 8003ff0:	2a09      	cmp	r2, #9
 8003ff2:	d903      	bls.n	8003ffc <_svfiprintf_r+0x1a8>
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d0c5      	beq.n	8003f84 <_svfiprintf_r+0x130>
 8003ff8:	9105      	str	r1, [sp, #20]
 8003ffa:	e7c3      	b.n	8003f84 <_svfiprintf_r+0x130>
 8003ffc:	4604      	mov	r4, r0
 8003ffe:	2301      	movs	r3, #1
 8004000:	fb0c 2101 	mla	r1, ip, r1, r2
 8004004:	e7f0      	b.n	8003fe8 <_svfiprintf_r+0x194>
 8004006:	ab03      	add	r3, sp, #12
 8004008:	9300      	str	r3, [sp, #0]
 800400a:	462a      	mov	r2, r5
 800400c:	4638      	mov	r0, r7
 800400e:	4b0f      	ldr	r3, [pc, #60]	; (800404c <_svfiprintf_r+0x1f8>)
 8004010:	a904      	add	r1, sp, #16
 8004012:	f3af 8000 	nop.w
 8004016:	1c42      	adds	r2, r0, #1
 8004018:	4606      	mov	r6, r0
 800401a:	d1d6      	bne.n	8003fca <_svfiprintf_r+0x176>
 800401c:	89ab      	ldrh	r3, [r5, #12]
 800401e:	065b      	lsls	r3, r3, #25
 8004020:	f53f af2c 	bmi.w	8003e7c <_svfiprintf_r+0x28>
 8004024:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004026:	b01d      	add	sp, #116	; 0x74
 8004028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800402c:	ab03      	add	r3, sp, #12
 800402e:	9300      	str	r3, [sp, #0]
 8004030:	462a      	mov	r2, r5
 8004032:	4638      	mov	r0, r7
 8004034:	4b05      	ldr	r3, [pc, #20]	; (800404c <_svfiprintf_r+0x1f8>)
 8004036:	a904      	add	r1, sp, #16
 8004038:	f000 f87c 	bl	8004134 <_printf_i>
 800403c:	e7eb      	b.n	8004016 <_svfiprintf_r+0x1c2>
 800403e:	bf00      	nop
 8004040:	08004624 	.word	0x08004624
 8004044:	0800462e 	.word	0x0800462e
 8004048:	00000000 	.word	0x00000000
 800404c:	08003d9d 	.word	0x08003d9d
 8004050:	0800462a 	.word	0x0800462a

08004054 <_printf_common>:
 8004054:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004058:	4616      	mov	r6, r2
 800405a:	4699      	mov	r9, r3
 800405c:	688a      	ldr	r2, [r1, #8]
 800405e:	690b      	ldr	r3, [r1, #16]
 8004060:	4607      	mov	r7, r0
 8004062:	4293      	cmp	r3, r2
 8004064:	bfb8      	it	lt
 8004066:	4613      	movlt	r3, r2
 8004068:	6033      	str	r3, [r6, #0]
 800406a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800406e:	460c      	mov	r4, r1
 8004070:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004074:	b10a      	cbz	r2, 800407a <_printf_common+0x26>
 8004076:	3301      	adds	r3, #1
 8004078:	6033      	str	r3, [r6, #0]
 800407a:	6823      	ldr	r3, [r4, #0]
 800407c:	0699      	lsls	r1, r3, #26
 800407e:	bf42      	ittt	mi
 8004080:	6833      	ldrmi	r3, [r6, #0]
 8004082:	3302      	addmi	r3, #2
 8004084:	6033      	strmi	r3, [r6, #0]
 8004086:	6825      	ldr	r5, [r4, #0]
 8004088:	f015 0506 	ands.w	r5, r5, #6
 800408c:	d106      	bne.n	800409c <_printf_common+0x48>
 800408e:	f104 0a19 	add.w	sl, r4, #25
 8004092:	68e3      	ldr	r3, [r4, #12]
 8004094:	6832      	ldr	r2, [r6, #0]
 8004096:	1a9b      	subs	r3, r3, r2
 8004098:	42ab      	cmp	r3, r5
 800409a:	dc28      	bgt.n	80040ee <_printf_common+0x9a>
 800409c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80040a0:	1e13      	subs	r3, r2, #0
 80040a2:	6822      	ldr	r2, [r4, #0]
 80040a4:	bf18      	it	ne
 80040a6:	2301      	movne	r3, #1
 80040a8:	0692      	lsls	r2, r2, #26
 80040aa:	d42d      	bmi.n	8004108 <_printf_common+0xb4>
 80040ac:	4649      	mov	r1, r9
 80040ae:	4638      	mov	r0, r7
 80040b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80040b4:	47c0      	blx	r8
 80040b6:	3001      	adds	r0, #1
 80040b8:	d020      	beq.n	80040fc <_printf_common+0xa8>
 80040ba:	6823      	ldr	r3, [r4, #0]
 80040bc:	68e5      	ldr	r5, [r4, #12]
 80040be:	f003 0306 	and.w	r3, r3, #6
 80040c2:	2b04      	cmp	r3, #4
 80040c4:	bf18      	it	ne
 80040c6:	2500      	movne	r5, #0
 80040c8:	6832      	ldr	r2, [r6, #0]
 80040ca:	f04f 0600 	mov.w	r6, #0
 80040ce:	68a3      	ldr	r3, [r4, #8]
 80040d0:	bf08      	it	eq
 80040d2:	1aad      	subeq	r5, r5, r2
 80040d4:	6922      	ldr	r2, [r4, #16]
 80040d6:	bf08      	it	eq
 80040d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80040dc:	4293      	cmp	r3, r2
 80040de:	bfc4      	itt	gt
 80040e0:	1a9b      	subgt	r3, r3, r2
 80040e2:	18ed      	addgt	r5, r5, r3
 80040e4:	341a      	adds	r4, #26
 80040e6:	42b5      	cmp	r5, r6
 80040e8:	d11a      	bne.n	8004120 <_printf_common+0xcc>
 80040ea:	2000      	movs	r0, #0
 80040ec:	e008      	b.n	8004100 <_printf_common+0xac>
 80040ee:	2301      	movs	r3, #1
 80040f0:	4652      	mov	r2, sl
 80040f2:	4649      	mov	r1, r9
 80040f4:	4638      	mov	r0, r7
 80040f6:	47c0      	blx	r8
 80040f8:	3001      	adds	r0, #1
 80040fa:	d103      	bne.n	8004104 <_printf_common+0xb0>
 80040fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004100:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004104:	3501      	adds	r5, #1
 8004106:	e7c4      	b.n	8004092 <_printf_common+0x3e>
 8004108:	2030      	movs	r0, #48	; 0x30
 800410a:	18e1      	adds	r1, r4, r3
 800410c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004110:	1c5a      	adds	r2, r3, #1
 8004112:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004116:	4422      	add	r2, r4
 8004118:	3302      	adds	r3, #2
 800411a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800411e:	e7c5      	b.n	80040ac <_printf_common+0x58>
 8004120:	2301      	movs	r3, #1
 8004122:	4622      	mov	r2, r4
 8004124:	4649      	mov	r1, r9
 8004126:	4638      	mov	r0, r7
 8004128:	47c0      	blx	r8
 800412a:	3001      	adds	r0, #1
 800412c:	d0e6      	beq.n	80040fc <_printf_common+0xa8>
 800412e:	3601      	adds	r6, #1
 8004130:	e7d9      	b.n	80040e6 <_printf_common+0x92>
	...

08004134 <_printf_i>:
 8004134:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004138:	460c      	mov	r4, r1
 800413a:	7e27      	ldrb	r7, [r4, #24]
 800413c:	4691      	mov	r9, r2
 800413e:	2f78      	cmp	r7, #120	; 0x78
 8004140:	4680      	mov	r8, r0
 8004142:	469a      	mov	sl, r3
 8004144:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004146:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800414a:	d807      	bhi.n	800415c <_printf_i+0x28>
 800414c:	2f62      	cmp	r7, #98	; 0x62
 800414e:	d80a      	bhi.n	8004166 <_printf_i+0x32>
 8004150:	2f00      	cmp	r7, #0
 8004152:	f000 80d9 	beq.w	8004308 <_printf_i+0x1d4>
 8004156:	2f58      	cmp	r7, #88	; 0x58
 8004158:	f000 80a4 	beq.w	80042a4 <_printf_i+0x170>
 800415c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004160:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004164:	e03a      	b.n	80041dc <_printf_i+0xa8>
 8004166:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800416a:	2b15      	cmp	r3, #21
 800416c:	d8f6      	bhi.n	800415c <_printf_i+0x28>
 800416e:	a001      	add	r0, pc, #4	; (adr r0, 8004174 <_printf_i+0x40>)
 8004170:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004174:	080041cd 	.word	0x080041cd
 8004178:	080041e1 	.word	0x080041e1
 800417c:	0800415d 	.word	0x0800415d
 8004180:	0800415d 	.word	0x0800415d
 8004184:	0800415d 	.word	0x0800415d
 8004188:	0800415d 	.word	0x0800415d
 800418c:	080041e1 	.word	0x080041e1
 8004190:	0800415d 	.word	0x0800415d
 8004194:	0800415d 	.word	0x0800415d
 8004198:	0800415d 	.word	0x0800415d
 800419c:	0800415d 	.word	0x0800415d
 80041a0:	080042ef 	.word	0x080042ef
 80041a4:	08004211 	.word	0x08004211
 80041a8:	080042d1 	.word	0x080042d1
 80041ac:	0800415d 	.word	0x0800415d
 80041b0:	0800415d 	.word	0x0800415d
 80041b4:	08004311 	.word	0x08004311
 80041b8:	0800415d 	.word	0x0800415d
 80041bc:	08004211 	.word	0x08004211
 80041c0:	0800415d 	.word	0x0800415d
 80041c4:	0800415d 	.word	0x0800415d
 80041c8:	080042d9 	.word	0x080042d9
 80041cc:	680b      	ldr	r3, [r1, #0]
 80041ce:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80041d2:	1d1a      	adds	r2, r3, #4
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	600a      	str	r2, [r1, #0]
 80041d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80041dc:	2301      	movs	r3, #1
 80041de:	e0a4      	b.n	800432a <_printf_i+0x1f6>
 80041e0:	6825      	ldr	r5, [r4, #0]
 80041e2:	6808      	ldr	r0, [r1, #0]
 80041e4:	062e      	lsls	r6, r5, #24
 80041e6:	f100 0304 	add.w	r3, r0, #4
 80041ea:	d50a      	bpl.n	8004202 <_printf_i+0xce>
 80041ec:	6805      	ldr	r5, [r0, #0]
 80041ee:	600b      	str	r3, [r1, #0]
 80041f0:	2d00      	cmp	r5, #0
 80041f2:	da03      	bge.n	80041fc <_printf_i+0xc8>
 80041f4:	232d      	movs	r3, #45	; 0x2d
 80041f6:	426d      	negs	r5, r5
 80041f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041fc:	230a      	movs	r3, #10
 80041fe:	485e      	ldr	r0, [pc, #376]	; (8004378 <_printf_i+0x244>)
 8004200:	e019      	b.n	8004236 <_printf_i+0x102>
 8004202:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004206:	6805      	ldr	r5, [r0, #0]
 8004208:	600b      	str	r3, [r1, #0]
 800420a:	bf18      	it	ne
 800420c:	b22d      	sxthne	r5, r5
 800420e:	e7ef      	b.n	80041f0 <_printf_i+0xbc>
 8004210:	680b      	ldr	r3, [r1, #0]
 8004212:	6825      	ldr	r5, [r4, #0]
 8004214:	1d18      	adds	r0, r3, #4
 8004216:	6008      	str	r0, [r1, #0]
 8004218:	0628      	lsls	r0, r5, #24
 800421a:	d501      	bpl.n	8004220 <_printf_i+0xec>
 800421c:	681d      	ldr	r5, [r3, #0]
 800421e:	e002      	b.n	8004226 <_printf_i+0xf2>
 8004220:	0669      	lsls	r1, r5, #25
 8004222:	d5fb      	bpl.n	800421c <_printf_i+0xe8>
 8004224:	881d      	ldrh	r5, [r3, #0]
 8004226:	2f6f      	cmp	r7, #111	; 0x6f
 8004228:	bf0c      	ite	eq
 800422a:	2308      	moveq	r3, #8
 800422c:	230a      	movne	r3, #10
 800422e:	4852      	ldr	r0, [pc, #328]	; (8004378 <_printf_i+0x244>)
 8004230:	2100      	movs	r1, #0
 8004232:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004236:	6866      	ldr	r6, [r4, #4]
 8004238:	2e00      	cmp	r6, #0
 800423a:	bfa8      	it	ge
 800423c:	6821      	ldrge	r1, [r4, #0]
 800423e:	60a6      	str	r6, [r4, #8]
 8004240:	bfa4      	itt	ge
 8004242:	f021 0104 	bicge.w	r1, r1, #4
 8004246:	6021      	strge	r1, [r4, #0]
 8004248:	b90d      	cbnz	r5, 800424e <_printf_i+0x11a>
 800424a:	2e00      	cmp	r6, #0
 800424c:	d04d      	beq.n	80042ea <_printf_i+0x1b6>
 800424e:	4616      	mov	r6, r2
 8004250:	fbb5 f1f3 	udiv	r1, r5, r3
 8004254:	fb03 5711 	mls	r7, r3, r1, r5
 8004258:	5dc7      	ldrb	r7, [r0, r7]
 800425a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800425e:	462f      	mov	r7, r5
 8004260:	42bb      	cmp	r3, r7
 8004262:	460d      	mov	r5, r1
 8004264:	d9f4      	bls.n	8004250 <_printf_i+0x11c>
 8004266:	2b08      	cmp	r3, #8
 8004268:	d10b      	bne.n	8004282 <_printf_i+0x14e>
 800426a:	6823      	ldr	r3, [r4, #0]
 800426c:	07df      	lsls	r7, r3, #31
 800426e:	d508      	bpl.n	8004282 <_printf_i+0x14e>
 8004270:	6923      	ldr	r3, [r4, #16]
 8004272:	6861      	ldr	r1, [r4, #4]
 8004274:	4299      	cmp	r1, r3
 8004276:	bfde      	ittt	le
 8004278:	2330      	movle	r3, #48	; 0x30
 800427a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800427e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004282:	1b92      	subs	r2, r2, r6
 8004284:	6122      	str	r2, [r4, #16]
 8004286:	464b      	mov	r3, r9
 8004288:	4621      	mov	r1, r4
 800428a:	4640      	mov	r0, r8
 800428c:	f8cd a000 	str.w	sl, [sp]
 8004290:	aa03      	add	r2, sp, #12
 8004292:	f7ff fedf 	bl	8004054 <_printf_common>
 8004296:	3001      	adds	r0, #1
 8004298:	d14c      	bne.n	8004334 <_printf_i+0x200>
 800429a:	f04f 30ff 	mov.w	r0, #4294967295
 800429e:	b004      	add	sp, #16
 80042a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042a4:	4834      	ldr	r0, [pc, #208]	; (8004378 <_printf_i+0x244>)
 80042a6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80042aa:	680e      	ldr	r6, [r1, #0]
 80042ac:	6823      	ldr	r3, [r4, #0]
 80042ae:	f856 5b04 	ldr.w	r5, [r6], #4
 80042b2:	061f      	lsls	r7, r3, #24
 80042b4:	600e      	str	r6, [r1, #0]
 80042b6:	d514      	bpl.n	80042e2 <_printf_i+0x1ae>
 80042b8:	07d9      	lsls	r1, r3, #31
 80042ba:	bf44      	itt	mi
 80042bc:	f043 0320 	orrmi.w	r3, r3, #32
 80042c0:	6023      	strmi	r3, [r4, #0]
 80042c2:	b91d      	cbnz	r5, 80042cc <_printf_i+0x198>
 80042c4:	6823      	ldr	r3, [r4, #0]
 80042c6:	f023 0320 	bic.w	r3, r3, #32
 80042ca:	6023      	str	r3, [r4, #0]
 80042cc:	2310      	movs	r3, #16
 80042ce:	e7af      	b.n	8004230 <_printf_i+0xfc>
 80042d0:	6823      	ldr	r3, [r4, #0]
 80042d2:	f043 0320 	orr.w	r3, r3, #32
 80042d6:	6023      	str	r3, [r4, #0]
 80042d8:	2378      	movs	r3, #120	; 0x78
 80042da:	4828      	ldr	r0, [pc, #160]	; (800437c <_printf_i+0x248>)
 80042dc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80042e0:	e7e3      	b.n	80042aa <_printf_i+0x176>
 80042e2:	065e      	lsls	r6, r3, #25
 80042e4:	bf48      	it	mi
 80042e6:	b2ad      	uxthmi	r5, r5
 80042e8:	e7e6      	b.n	80042b8 <_printf_i+0x184>
 80042ea:	4616      	mov	r6, r2
 80042ec:	e7bb      	b.n	8004266 <_printf_i+0x132>
 80042ee:	680b      	ldr	r3, [r1, #0]
 80042f0:	6826      	ldr	r6, [r4, #0]
 80042f2:	1d1d      	adds	r5, r3, #4
 80042f4:	6960      	ldr	r0, [r4, #20]
 80042f6:	600d      	str	r5, [r1, #0]
 80042f8:	0635      	lsls	r5, r6, #24
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	d501      	bpl.n	8004302 <_printf_i+0x1ce>
 80042fe:	6018      	str	r0, [r3, #0]
 8004300:	e002      	b.n	8004308 <_printf_i+0x1d4>
 8004302:	0671      	lsls	r1, r6, #25
 8004304:	d5fb      	bpl.n	80042fe <_printf_i+0x1ca>
 8004306:	8018      	strh	r0, [r3, #0]
 8004308:	2300      	movs	r3, #0
 800430a:	4616      	mov	r6, r2
 800430c:	6123      	str	r3, [r4, #16]
 800430e:	e7ba      	b.n	8004286 <_printf_i+0x152>
 8004310:	680b      	ldr	r3, [r1, #0]
 8004312:	1d1a      	adds	r2, r3, #4
 8004314:	600a      	str	r2, [r1, #0]
 8004316:	681e      	ldr	r6, [r3, #0]
 8004318:	2100      	movs	r1, #0
 800431a:	4630      	mov	r0, r6
 800431c:	6862      	ldr	r2, [r4, #4]
 800431e:	f000 f82f 	bl	8004380 <memchr>
 8004322:	b108      	cbz	r0, 8004328 <_printf_i+0x1f4>
 8004324:	1b80      	subs	r0, r0, r6
 8004326:	6060      	str	r0, [r4, #4]
 8004328:	6863      	ldr	r3, [r4, #4]
 800432a:	6123      	str	r3, [r4, #16]
 800432c:	2300      	movs	r3, #0
 800432e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004332:	e7a8      	b.n	8004286 <_printf_i+0x152>
 8004334:	4632      	mov	r2, r6
 8004336:	4649      	mov	r1, r9
 8004338:	4640      	mov	r0, r8
 800433a:	6923      	ldr	r3, [r4, #16]
 800433c:	47d0      	blx	sl
 800433e:	3001      	adds	r0, #1
 8004340:	d0ab      	beq.n	800429a <_printf_i+0x166>
 8004342:	6823      	ldr	r3, [r4, #0]
 8004344:	079b      	lsls	r3, r3, #30
 8004346:	d413      	bmi.n	8004370 <_printf_i+0x23c>
 8004348:	68e0      	ldr	r0, [r4, #12]
 800434a:	9b03      	ldr	r3, [sp, #12]
 800434c:	4298      	cmp	r0, r3
 800434e:	bfb8      	it	lt
 8004350:	4618      	movlt	r0, r3
 8004352:	e7a4      	b.n	800429e <_printf_i+0x16a>
 8004354:	2301      	movs	r3, #1
 8004356:	4632      	mov	r2, r6
 8004358:	4649      	mov	r1, r9
 800435a:	4640      	mov	r0, r8
 800435c:	47d0      	blx	sl
 800435e:	3001      	adds	r0, #1
 8004360:	d09b      	beq.n	800429a <_printf_i+0x166>
 8004362:	3501      	adds	r5, #1
 8004364:	68e3      	ldr	r3, [r4, #12]
 8004366:	9903      	ldr	r1, [sp, #12]
 8004368:	1a5b      	subs	r3, r3, r1
 800436a:	42ab      	cmp	r3, r5
 800436c:	dcf2      	bgt.n	8004354 <_printf_i+0x220>
 800436e:	e7eb      	b.n	8004348 <_printf_i+0x214>
 8004370:	2500      	movs	r5, #0
 8004372:	f104 0619 	add.w	r6, r4, #25
 8004376:	e7f5      	b.n	8004364 <_printf_i+0x230>
 8004378:	08004635 	.word	0x08004635
 800437c:	08004646 	.word	0x08004646

08004380 <memchr>:
 8004380:	4603      	mov	r3, r0
 8004382:	b510      	push	{r4, lr}
 8004384:	b2c9      	uxtb	r1, r1
 8004386:	4402      	add	r2, r0
 8004388:	4293      	cmp	r3, r2
 800438a:	4618      	mov	r0, r3
 800438c:	d101      	bne.n	8004392 <memchr+0x12>
 800438e:	2000      	movs	r0, #0
 8004390:	e003      	b.n	800439a <memchr+0x1a>
 8004392:	7804      	ldrb	r4, [r0, #0]
 8004394:	3301      	adds	r3, #1
 8004396:	428c      	cmp	r4, r1
 8004398:	d1f6      	bne.n	8004388 <memchr+0x8>
 800439a:	bd10      	pop	{r4, pc}

0800439c <_free_r>:
 800439c:	b538      	push	{r3, r4, r5, lr}
 800439e:	4605      	mov	r5, r0
 80043a0:	2900      	cmp	r1, #0
 80043a2:	d043      	beq.n	800442c <_free_r+0x90>
 80043a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80043a8:	1f0c      	subs	r4, r1, #4
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	bfb8      	it	lt
 80043ae:	18e4      	addlt	r4, r4, r3
 80043b0:	f000 f8d0 	bl	8004554 <__malloc_lock>
 80043b4:	4a1e      	ldr	r2, [pc, #120]	; (8004430 <_free_r+0x94>)
 80043b6:	6813      	ldr	r3, [r2, #0]
 80043b8:	4610      	mov	r0, r2
 80043ba:	b933      	cbnz	r3, 80043ca <_free_r+0x2e>
 80043bc:	6063      	str	r3, [r4, #4]
 80043be:	6014      	str	r4, [r2, #0]
 80043c0:	4628      	mov	r0, r5
 80043c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80043c6:	f000 b8cb 	b.w	8004560 <__malloc_unlock>
 80043ca:	42a3      	cmp	r3, r4
 80043cc:	d90a      	bls.n	80043e4 <_free_r+0x48>
 80043ce:	6821      	ldr	r1, [r4, #0]
 80043d0:	1862      	adds	r2, r4, r1
 80043d2:	4293      	cmp	r3, r2
 80043d4:	bf01      	itttt	eq
 80043d6:	681a      	ldreq	r2, [r3, #0]
 80043d8:	685b      	ldreq	r3, [r3, #4]
 80043da:	1852      	addeq	r2, r2, r1
 80043dc:	6022      	streq	r2, [r4, #0]
 80043de:	6063      	str	r3, [r4, #4]
 80043e0:	6004      	str	r4, [r0, #0]
 80043e2:	e7ed      	b.n	80043c0 <_free_r+0x24>
 80043e4:	461a      	mov	r2, r3
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	b10b      	cbz	r3, 80043ee <_free_r+0x52>
 80043ea:	42a3      	cmp	r3, r4
 80043ec:	d9fa      	bls.n	80043e4 <_free_r+0x48>
 80043ee:	6811      	ldr	r1, [r2, #0]
 80043f0:	1850      	adds	r0, r2, r1
 80043f2:	42a0      	cmp	r0, r4
 80043f4:	d10b      	bne.n	800440e <_free_r+0x72>
 80043f6:	6820      	ldr	r0, [r4, #0]
 80043f8:	4401      	add	r1, r0
 80043fa:	1850      	adds	r0, r2, r1
 80043fc:	4283      	cmp	r3, r0
 80043fe:	6011      	str	r1, [r2, #0]
 8004400:	d1de      	bne.n	80043c0 <_free_r+0x24>
 8004402:	6818      	ldr	r0, [r3, #0]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	4401      	add	r1, r0
 8004408:	6011      	str	r1, [r2, #0]
 800440a:	6053      	str	r3, [r2, #4]
 800440c:	e7d8      	b.n	80043c0 <_free_r+0x24>
 800440e:	d902      	bls.n	8004416 <_free_r+0x7a>
 8004410:	230c      	movs	r3, #12
 8004412:	602b      	str	r3, [r5, #0]
 8004414:	e7d4      	b.n	80043c0 <_free_r+0x24>
 8004416:	6820      	ldr	r0, [r4, #0]
 8004418:	1821      	adds	r1, r4, r0
 800441a:	428b      	cmp	r3, r1
 800441c:	bf01      	itttt	eq
 800441e:	6819      	ldreq	r1, [r3, #0]
 8004420:	685b      	ldreq	r3, [r3, #4]
 8004422:	1809      	addeq	r1, r1, r0
 8004424:	6021      	streq	r1, [r4, #0]
 8004426:	6063      	str	r3, [r4, #4]
 8004428:	6054      	str	r4, [r2, #4]
 800442a:	e7c9      	b.n	80043c0 <_free_r+0x24>
 800442c:	bd38      	pop	{r3, r4, r5, pc}
 800442e:	bf00      	nop
 8004430:	20000498 	.word	0x20000498

08004434 <_malloc_r>:
 8004434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004436:	1ccd      	adds	r5, r1, #3
 8004438:	f025 0503 	bic.w	r5, r5, #3
 800443c:	3508      	adds	r5, #8
 800443e:	2d0c      	cmp	r5, #12
 8004440:	bf38      	it	cc
 8004442:	250c      	movcc	r5, #12
 8004444:	2d00      	cmp	r5, #0
 8004446:	4606      	mov	r6, r0
 8004448:	db01      	blt.n	800444e <_malloc_r+0x1a>
 800444a:	42a9      	cmp	r1, r5
 800444c:	d903      	bls.n	8004456 <_malloc_r+0x22>
 800444e:	230c      	movs	r3, #12
 8004450:	6033      	str	r3, [r6, #0]
 8004452:	2000      	movs	r0, #0
 8004454:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004456:	f000 f87d 	bl	8004554 <__malloc_lock>
 800445a:	4921      	ldr	r1, [pc, #132]	; (80044e0 <_malloc_r+0xac>)
 800445c:	680a      	ldr	r2, [r1, #0]
 800445e:	4614      	mov	r4, r2
 8004460:	b99c      	cbnz	r4, 800448a <_malloc_r+0x56>
 8004462:	4f20      	ldr	r7, [pc, #128]	; (80044e4 <_malloc_r+0xb0>)
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	b923      	cbnz	r3, 8004472 <_malloc_r+0x3e>
 8004468:	4621      	mov	r1, r4
 800446a:	4630      	mov	r0, r6
 800446c:	f000 f862 	bl	8004534 <_sbrk_r>
 8004470:	6038      	str	r0, [r7, #0]
 8004472:	4629      	mov	r1, r5
 8004474:	4630      	mov	r0, r6
 8004476:	f000 f85d 	bl	8004534 <_sbrk_r>
 800447a:	1c43      	adds	r3, r0, #1
 800447c:	d123      	bne.n	80044c6 <_malloc_r+0x92>
 800447e:	230c      	movs	r3, #12
 8004480:	4630      	mov	r0, r6
 8004482:	6033      	str	r3, [r6, #0]
 8004484:	f000 f86c 	bl	8004560 <__malloc_unlock>
 8004488:	e7e3      	b.n	8004452 <_malloc_r+0x1e>
 800448a:	6823      	ldr	r3, [r4, #0]
 800448c:	1b5b      	subs	r3, r3, r5
 800448e:	d417      	bmi.n	80044c0 <_malloc_r+0x8c>
 8004490:	2b0b      	cmp	r3, #11
 8004492:	d903      	bls.n	800449c <_malloc_r+0x68>
 8004494:	6023      	str	r3, [r4, #0]
 8004496:	441c      	add	r4, r3
 8004498:	6025      	str	r5, [r4, #0]
 800449a:	e004      	b.n	80044a6 <_malloc_r+0x72>
 800449c:	6863      	ldr	r3, [r4, #4]
 800449e:	42a2      	cmp	r2, r4
 80044a0:	bf0c      	ite	eq
 80044a2:	600b      	streq	r3, [r1, #0]
 80044a4:	6053      	strne	r3, [r2, #4]
 80044a6:	4630      	mov	r0, r6
 80044a8:	f000 f85a 	bl	8004560 <__malloc_unlock>
 80044ac:	f104 000b 	add.w	r0, r4, #11
 80044b0:	1d23      	adds	r3, r4, #4
 80044b2:	f020 0007 	bic.w	r0, r0, #7
 80044b6:	1ac2      	subs	r2, r0, r3
 80044b8:	d0cc      	beq.n	8004454 <_malloc_r+0x20>
 80044ba:	1a1b      	subs	r3, r3, r0
 80044bc:	50a3      	str	r3, [r4, r2]
 80044be:	e7c9      	b.n	8004454 <_malloc_r+0x20>
 80044c0:	4622      	mov	r2, r4
 80044c2:	6864      	ldr	r4, [r4, #4]
 80044c4:	e7cc      	b.n	8004460 <_malloc_r+0x2c>
 80044c6:	1cc4      	adds	r4, r0, #3
 80044c8:	f024 0403 	bic.w	r4, r4, #3
 80044cc:	42a0      	cmp	r0, r4
 80044ce:	d0e3      	beq.n	8004498 <_malloc_r+0x64>
 80044d0:	1a21      	subs	r1, r4, r0
 80044d2:	4630      	mov	r0, r6
 80044d4:	f000 f82e 	bl	8004534 <_sbrk_r>
 80044d8:	3001      	adds	r0, #1
 80044da:	d1dd      	bne.n	8004498 <_malloc_r+0x64>
 80044dc:	e7cf      	b.n	800447e <_malloc_r+0x4a>
 80044de:	bf00      	nop
 80044e0:	20000498 	.word	0x20000498
 80044e4:	2000049c 	.word	0x2000049c

080044e8 <_realloc_r>:
 80044e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044ea:	4607      	mov	r7, r0
 80044ec:	4614      	mov	r4, r2
 80044ee:	460e      	mov	r6, r1
 80044f0:	b921      	cbnz	r1, 80044fc <_realloc_r+0x14>
 80044f2:	4611      	mov	r1, r2
 80044f4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80044f8:	f7ff bf9c 	b.w	8004434 <_malloc_r>
 80044fc:	b922      	cbnz	r2, 8004508 <_realloc_r+0x20>
 80044fe:	f7ff ff4d 	bl	800439c <_free_r>
 8004502:	4625      	mov	r5, r4
 8004504:	4628      	mov	r0, r5
 8004506:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004508:	f000 f830 	bl	800456c <_malloc_usable_size_r>
 800450c:	42a0      	cmp	r0, r4
 800450e:	d20f      	bcs.n	8004530 <_realloc_r+0x48>
 8004510:	4621      	mov	r1, r4
 8004512:	4638      	mov	r0, r7
 8004514:	f7ff ff8e 	bl	8004434 <_malloc_r>
 8004518:	4605      	mov	r5, r0
 800451a:	2800      	cmp	r0, #0
 800451c:	d0f2      	beq.n	8004504 <_realloc_r+0x1c>
 800451e:	4631      	mov	r1, r6
 8004520:	4622      	mov	r2, r4
 8004522:	f7ff fbeb 	bl	8003cfc <memcpy>
 8004526:	4631      	mov	r1, r6
 8004528:	4638      	mov	r0, r7
 800452a:	f7ff ff37 	bl	800439c <_free_r>
 800452e:	e7e9      	b.n	8004504 <_realloc_r+0x1c>
 8004530:	4635      	mov	r5, r6
 8004532:	e7e7      	b.n	8004504 <_realloc_r+0x1c>

08004534 <_sbrk_r>:
 8004534:	b538      	push	{r3, r4, r5, lr}
 8004536:	2300      	movs	r3, #0
 8004538:	4d05      	ldr	r5, [pc, #20]	; (8004550 <_sbrk_r+0x1c>)
 800453a:	4604      	mov	r4, r0
 800453c:	4608      	mov	r0, r1
 800453e:	602b      	str	r3, [r5, #0]
 8004540:	f7fc fdbc 	bl	80010bc <_sbrk>
 8004544:	1c43      	adds	r3, r0, #1
 8004546:	d102      	bne.n	800454e <_sbrk_r+0x1a>
 8004548:	682b      	ldr	r3, [r5, #0]
 800454a:	b103      	cbz	r3, 800454e <_sbrk_r+0x1a>
 800454c:	6023      	str	r3, [r4, #0]
 800454e:	bd38      	pop	{r3, r4, r5, pc}
 8004550:	20002c1c 	.word	0x20002c1c

08004554 <__malloc_lock>:
 8004554:	4801      	ldr	r0, [pc, #4]	; (800455c <__malloc_lock+0x8>)
 8004556:	f000 b811 	b.w	800457c <__retarget_lock_acquire_recursive>
 800455a:	bf00      	nop
 800455c:	20002c24 	.word	0x20002c24

08004560 <__malloc_unlock>:
 8004560:	4801      	ldr	r0, [pc, #4]	; (8004568 <__malloc_unlock+0x8>)
 8004562:	f000 b80c 	b.w	800457e <__retarget_lock_release_recursive>
 8004566:	bf00      	nop
 8004568:	20002c24 	.word	0x20002c24

0800456c <_malloc_usable_size_r>:
 800456c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004570:	1f18      	subs	r0, r3, #4
 8004572:	2b00      	cmp	r3, #0
 8004574:	bfbc      	itt	lt
 8004576:	580b      	ldrlt	r3, [r1, r0]
 8004578:	18c0      	addlt	r0, r0, r3
 800457a:	4770      	bx	lr

0800457c <__retarget_lock_acquire_recursive>:
 800457c:	4770      	bx	lr

0800457e <__retarget_lock_release_recursive>:
 800457e:	4770      	bx	lr

08004580 <_init>:
 8004580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004582:	bf00      	nop
 8004584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004586:	bc08      	pop	{r3}
 8004588:	469e      	mov	lr, r3
 800458a:	4770      	bx	lr

0800458c <_fini>:
 800458c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800458e:	bf00      	nop
 8004590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004592:	bc08      	pop	{r3}
 8004594:	469e      	mov	lr, r3
 8004596:	4770      	bx	lr
