
F1_IOEXP_SPI_SLAVE_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035f0  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  080037d4  080037d4  000137d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038b4  080038b4  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080038b4  080038b4  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080038b4  080038b4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038b4  080038b4  000138b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080038b8  080038b8  000138b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080038bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a4  20000074  08003930  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000218  08003930  00020218  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009d8b  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d33  00000000  00000000  00029e28  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008f8  00000000  00000000  0002bb60  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000007f0  00000000  00000000  0002c458  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019600  00000000  00000000  0002cc48  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008f75  00000000  00000000  00046248  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000922df  00000000  00000000  0004f1bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e149c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000025b0  00000000  00000000  000e1518  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000074 	.word	0x20000074
 8000200:	00000000 	.word	0x00000000
 8000204:	080037bc 	.word	0x080037bc

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000078 	.word	0x20000078
 8000220:	080037bc 	.word	0x080037bc

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800023a:	4b14      	ldr	r3, [pc, #80]	; (800028c <MX_DMA_Init+0x58>)
 800023c:	695b      	ldr	r3, [r3, #20]
 800023e:	4a13      	ldr	r2, [pc, #76]	; (800028c <MX_DMA_Init+0x58>)
 8000240:	f043 0301 	orr.w	r3, r3, #1
 8000244:	6153      	str	r3, [r2, #20]
 8000246:	4b11      	ldr	r3, [pc, #68]	; (800028c <MX_DMA_Init+0x58>)
 8000248:	695b      	ldr	r3, [r3, #20]
 800024a:	f003 0301 	and.w	r3, r3, #1
 800024e:	607b      	str	r3, [r7, #4]
 8000250:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000252:	2200      	movs	r2, #0
 8000254:	2100      	movs	r1, #0
 8000256:	200c      	movs	r0, #12
 8000258:	f000 fd93 	bl	8000d82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800025c:	200c      	movs	r0, #12
 800025e:	f000 fdac 	bl	8000dba <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000262:	2200      	movs	r2, #0
 8000264:	2100      	movs	r1, #0
 8000266:	200d      	movs	r0, #13
 8000268:	f000 fd8b 	bl	8000d82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800026c:	200d      	movs	r0, #13
 800026e:	f000 fda4 	bl	8000dba <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000272:	2200      	movs	r2, #0
 8000274:	2100      	movs	r1, #0
 8000276:	200e      	movs	r0, #14
 8000278:	f000 fd83 	bl	8000d82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800027c:	200e      	movs	r0, #14
 800027e:	f000 fd9c 	bl	8000dba <HAL_NVIC_EnableIRQ>

}
 8000282:	bf00      	nop
 8000284:	3708      	adds	r7, #8
 8000286:	46bd      	mov	sp, r7
 8000288:	bd80      	pop	{r7, pc}
 800028a:	bf00      	nop
 800028c:	40021000 	.word	0x40021000

08000290 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b088      	sub	sp, #32
 8000294:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000296:	f107 0310 	add.w	r3, r7, #16
 800029a:	2200      	movs	r2, #0
 800029c:	601a      	str	r2, [r3, #0]
 800029e:	605a      	str	r2, [r3, #4]
 80002a0:	609a      	str	r2, [r3, #8]
 80002a2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002a4:	4b1d      	ldr	r3, [pc, #116]	; (800031c <MX_GPIO_Init+0x8c>)
 80002a6:	699b      	ldr	r3, [r3, #24]
 80002a8:	4a1c      	ldr	r2, [pc, #112]	; (800031c <MX_GPIO_Init+0x8c>)
 80002aa:	f043 0310 	orr.w	r3, r3, #16
 80002ae:	6193      	str	r3, [r2, #24]
 80002b0:	4b1a      	ldr	r3, [pc, #104]	; (800031c <MX_GPIO_Init+0x8c>)
 80002b2:	699b      	ldr	r3, [r3, #24]
 80002b4:	f003 0310 	and.w	r3, r3, #16
 80002b8:	60fb      	str	r3, [r7, #12]
 80002ba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002bc:	4b17      	ldr	r3, [pc, #92]	; (800031c <MX_GPIO_Init+0x8c>)
 80002be:	699b      	ldr	r3, [r3, #24]
 80002c0:	4a16      	ldr	r2, [pc, #88]	; (800031c <MX_GPIO_Init+0x8c>)
 80002c2:	f043 0320 	orr.w	r3, r3, #32
 80002c6:	6193      	str	r3, [r2, #24]
 80002c8:	4b14      	ldr	r3, [pc, #80]	; (800031c <MX_GPIO_Init+0x8c>)
 80002ca:	699b      	ldr	r3, [r3, #24]
 80002cc:	f003 0320 	and.w	r3, r3, #32
 80002d0:	60bb      	str	r3, [r7, #8]
 80002d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002d4:	4b11      	ldr	r3, [pc, #68]	; (800031c <MX_GPIO_Init+0x8c>)
 80002d6:	699b      	ldr	r3, [r3, #24]
 80002d8:	4a10      	ldr	r2, [pc, #64]	; (800031c <MX_GPIO_Init+0x8c>)
 80002da:	f043 0304 	orr.w	r3, r3, #4
 80002de:	6193      	str	r3, [r2, #24]
 80002e0:	4b0e      	ldr	r3, [pc, #56]	; (800031c <MX_GPIO_Init+0x8c>)
 80002e2:	699b      	ldr	r3, [r3, #24]
 80002e4:	f003 0304 	and.w	r3, r3, #4
 80002e8:	607b      	str	r3, [r7, #4]
 80002ea:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STM_MODE_SEL_Pin;
 80002ec:	2320      	movs	r3, #32
 80002ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80002f0:	4b0b      	ldr	r3, [pc, #44]	; (8000320 <MX_GPIO_Init+0x90>)
 80002f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002f4:	2300      	movs	r3, #0
 80002f6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(STM_MODE_SEL_GPIO_Port, &GPIO_InitStruct);
 80002f8:	f107 0310 	add.w	r3, r7, #16
 80002fc:	4619      	mov	r1, r3
 80002fe:	4809      	ldr	r0, [pc, #36]	; (8000324 <MX_GPIO_Init+0x94>)
 8000300:	f001 f9f8 	bl	80016f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000304:	2200      	movs	r2, #0
 8000306:	2100      	movs	r1, #0
 8000308:	2017      	movs	r0, #23
 800030a:	f000 fd3a 	bl	8000d82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800030e:	2017      	movs	r0, #23
 8000310:	f000 fd53 	bl	8000dba <HAL_NVIC_EnableIRQ>

}
 8000314:	bf00      	nop
 8000316:	3720      	adds	r7, #32
 8000318:	46bd      	mov	sp, r7
 800031a:	bd80      	pop	{r7, pc}
 800031c:	40021000 	.word	0x40021000
 8000320:	10110000 	.word	0x10110000
 8000324:	40011000 	.word	0x40011000

08000328 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b084      	sub	sp, #16
 800032c:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800032e:	f000 fbcd 	bl	8000acc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000332:	f000 f87f 	bl	8000434 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000336:	f7ff ffab 	bl	8000290 <MX_GPIO_Init>
  MX_DMA_Init();
 800033a:	f7ff ff7b 	bl	8000234 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800033e:	f000 fa8b 	bl	8000858 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8000342:	f000 f8db 	bl	80004fc <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  memset(tData,0,SPI_BUF_SIZE);
 8000346:	2208      	movs	r2, #8
 8000348:	2100      	movs	r1, #0
 800034a:	4831      	ldr	r0, [pc, #196]	; (8000410 <main+0xe8>)
 800034c:	f002 fe25 	bl	8002f9a <memset>
  /*HAL_SPI_Receive_DMA(&hspi1, rData, SPI_BUF_SIZE);

  HAL_SPI_Transmit_DMA(&hspi1, (uint32_t)tData, SPI_BUF_SIZE);*/
  HAL_SPI_TransmitReceive_DMA(&hspi1,tData, rData, SPI_BUF_SIZE);
 8000350:	2308      	movs	r3, #8
 8000352:	4a30      	ldr	r2, [pc, #192]	; (8000414 <main+0xec>)
 8000354:	492e      	ldr	r1, [pc, #184]	; (8000410 <main+0xe8>)
 8000356:	4830      	ldr	r0, [pc, #192]	; (8000418 <main+0xf0>)
 8000358:	f001 fff8 	bl	800234c <HAL_SPI_TransmitReceive_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t count = 0;
 800035c:	2300      	movs	r3, #0
 800035e:	73fb      	strb	r3, [r7, #15]
  uint32_t test[2]= {0x01020304, 0x05060708};
 8000360:	4a2e      	ldr	r2, [pc, #184]	; (800041c <main+0xf4>)
 8000362:	1d3b      	adds	r3, r7, #4
 8000364:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000368:	e883 0003 	stmia.w	r3, {r0, r1}
  dbprintf("Rota SPI Test Application");
 800036c:	482c      	ldr	r0, [pc, #176]	; (8000420 <main+0xf8>)
 800036e:	f000 fb63 	bl	8000a38 <dbprintf>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  currentDMA = hspi1.hdmarx->Instance->CNDTR;
 8000372:	4b29      	ldr	r3, [pc, #164]	; (8000418 <main+0xf0>)
 8000374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	685b      	ldr	r3, [r3, #4]
 800037a:	b29a      	uxth	r2, r3
 800037c:	4b29      	ldr	r3, [pc, #164]	; (8000424 <main+0xfc>)
 800037e:	801a      	strh	r2, [r3, #0]
	  if((prevDMA-currentDMA) == 8){
 8000380:	4b29      	ldr	r3, [pc, #164]	; (8000428 <main+0x100>)
 8000382:	881b      	ldrh	r3, [r3, #0]
 8000384:	461a      	mov	r2, r3
 8000386:	4b27      	ldr	r3, [pc, #156]	; (8000424 <main+0xfc>)
 8000388:	881b      	ldrh	r3, [r3, #0]
 800038a:	1ad3      	subs	r3, r2, r3
 800038c:	2b08      	cmp	r3, #8
 800038e:	d13a      	bne.n	8000406 <main+0xde>
		  for(uint8_t i=0;i<8;i++){
 8000390:	2300      	movs	r3, #0
 8000392:	73bb      	strb	r3, [r7, #14]
 8000394:	e00e      	b.n	80003b4 <main+0x8c>
			  rtprintf("%02X ",rData[SPI_BUF_SIZE-prevDMA+i]);
 8000396:	4b24      	ldr	r3, [pc, #144]	; (8000428 <main+0x100>)
 8000398:	881b      	ldrh	r3, [r3, #0]
 800039a:	f1c3 0208 	rsb	r2, r3, #8
 800039e:	7bbb      	ldrb	r3, [r7, #14]
 80003a0:	4413      	add	r3, r2
 80003a2:	4a1c      	ldr	r2, [pc, #112]	; (8000414 <main+0xec>)
 80003a4:	5cd3      	ldrb	r3, [r2, r3]
 80003a6:	4619      	mov	r1, r3
 80003a8:	4820      	ldr	r0, [pc, #128]	; (800042c <main+0x104>)
 80003aa:	f000 fb57 	bl	8000a5c <rtprintf>
		  for(uint8_t i=0;i<8;i++){
 80003ae:	7bbb      	ldrb	r3, [r7, #14]
 80003b0:	3301      	adds	r3, #1
 80003b2:	73bb      	strb	r3, [r7, #14]
 80003b4:	7bbb      	ldrb	r3, [r7, #14]
 80003b6:	2b07      	cmp	r3, #7
 80003b8:	d9ed      	bls.n	8000396 <main+0x6e>
		  }
		  test[0] +=0x01010101;
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	f103 3301 	add.w	r3, r3, #16843009	; 0x1010101
 80003c0:	607b      	str	r3, [r7, #4]
		  test[1] +=0x01010101;
 80003c2:	68bb      	ldr	r3, [r7, #8]
 80003c4:	f103 3301 	add.w	r3, r3, #16843009	; 0x1010101
 80003c8:	60bb      	str	r3, [r7, #8]
		  memcpy(tData,&test[0],(prevDMA-currentDMA));
 80003ca:	4b17      	ldr	r3, [pc, #92]	; (8000428 <main+0x100>)
 80003cc:	881b      	ldrh	r3, [r3, #0]
 80003ce:	461a      	mov	r2, r3
 80003d0:	4b14      	ldr	r3, [pc, #80]	; (8000424 <main+0xfc>)
 80003d2:	881b      	ldrh	r3, [r3, #0]
 80003d4:	1ad3      	subs	r3, r2, r3
 80003d6:	461a      	mov	r2, r3
 80003d8:	1d3b      	adds	r3, r7, #4
 80003da:	4619      	mov	r1, r3
 80003dc:	480c      	ldr	r0, [pc, #48]	; (8000410 <main+0xe8>)
 80003de:	f002 fdd1 	bl	8002f84 <memcpy>
		  prevDMA = currentDMA;
 80003e2:	4b10      	ldr	r3, [pc, #64]	; (8000424 <main+0xfc>)
 80003e4:	881a      	ldrh	r2, [r3, #0]
 80003e6:	4b10      	ldr	r3, [pc, #64]	; (8000428 <main+0x100>)
 80003e8:	801a      	strh	r2, [r3, #0]
		  dbprintf("\n\rTest %d  currentDMA:%d tData[0]:%02X",++count,currentDMA,tData[0]);
 80003ea:	7bfb      	ldrb	r3, [r7, #15]
 80003ec:	3301      	adds	r3, #1
 80003ee:	73fb      	strb	r3, [r7, #15]
 80003f0:	7bf9      	ldrb	r1, [r7, #15]
 80003f2:	4b0c      	ldr	r3, [pc, #48]	; (8000424 <main+0xfc>)
 80003f4:	881b      	ldrh	r3, [r3, #0]
 80003f6:	461a      	mov	r2, r3
 80003f8:	4b05      	ldr	r3, [pc, #20]	; (8000410 <main+0xe8>)
 80003fa:	781b      	ldrb	r3, [r3, #0]
 80003fc:	480c      	ldr	r0, [pc, #48]	; (8000430 <main+0x108>)
 80003fe:	f000 fb1b 	bl	8000a38 <dbprintf>
		  //HAL_SPI_Transmit_DMA(&hspi1, (uint32_t)tData, SPI_BUF_SIZE);
		  SPI_DMA_Reset();
 8000402:	f000 f85d 	bl	80004c0 <SPI_DMA_Reset>
	  }
	  HAL_Delay(500);
 8000406:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800040a:	f000 fbc1 	bl	8000b90 <HAL_Delay>
	  currentDMA = hspi1.hdmarx->Instance->CNDTR;
 800040e:	e7b0      	b.n	8000372 <main+0x4a>
 8000410:	200000a4 	.word	0x200000a4
 8000414:	2000009c 	.word	0x2000009c
 8000418:	200000ac 	.word	0x200000ac
 800041c:	08003820 	.word	0x08003820
 8000420:	080037d4 	.word	0x080037d4
 8000424:	20000000 	.word	0x20000000
 8000428:	20000002 	.word	0x20000002
 800042c:	080037f0 	.word	0x080037f0
 8000430:	080037f8 	.word	0x080037f8

08000434 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b090      	sub	sp, #64	; 0x40
 8000438:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800043a:	f107 0318 	add.w	r3, r7, #24
 800043e:	2228      	movs	r2, #40	; 0x28
 8000440:	2100      	movs	r1, #0
 8000442:	4618      	mov	r0, r3
 8000444:	f002 fda9 	bl	8002f9a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000448:	1d3b      	adds	r3, r7, #4
 800044a:	2200      	movs	r2, #0
 800044c:	601a      	str	r2, [r3, #0]
 800044e:	605a      	str	r2, [r3, #4]
 8000450:	609a      	str	r2, [r3, #8]
 8000452:	60da      	str	r2, [r3, #12]
 8000454:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000456:	2301      	movs	r3, #1
 8000458:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800045a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800045e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000460:	2300      	movs	r3, #0
 8000462:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000464:	2301      	movs	r3, #1
 8000466:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000468:	2302      	movs	r3, #2
 800046a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800046c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000470:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000472:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000476:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000478:	f107 0318 	add.w	r3, r7, #24
 800047c:	4618      	mov	r0, r3
 800047e:	f001 fac5 	bl	8001a0c <HAL_RCC_OscConfig>
 8000482:	4603      	mov	r3, r0
 8000484:	2b00      	cmp	r3, #0
 8000486:	d001      	beq.n	800048c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000488:	f000 f832 	bl	80004f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800048c:	230f      	movs	r3, #15
 800048e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000490:	2302      	movs	r3, #2
 8000492:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000494:	2300      	movs	r3, #0
 8000496:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000498:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800049c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800049e:	2300      	movs	r3, #0
 80004a0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80004a2:	1d3b      	adds	r3, r7, #4
 80004a4:	2101      	movs	r1, #1
 80004a6:	4618      	mov	r0, r3
 80004a8:	f001 fd30 	bl	8001f0c <HAL_RCC_ClockConfig>
 80004ac:	4603      	mov	r3, r0
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d001      	beq.n	80004b6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80004b2:	f000 f81d 	bl	80004f0 <Error_Handler>
  }
}
 80004b6:	bf00      	nop
 80004b8:	3740      	adds	r7, #64	; 0x40
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}
	...

080004c0 <SPI_DMA_Reset>:

/* USER CODE BEGIN 4 */
void SPI_DMA_Reset(){
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
	HAL_SPI_DMAStop(&hspi1);
 80004c4:	4806      	ldr	r0, [pc, #24]	; (80004e0 <SPI_DMA_Reset+0x20>)
 80004c6:	f002 f843 	bl	8002550 <HAL_SPI_DMAStop>
	//HAL_SPI_Receive_DMA(&hspi1, rData, SPI_BUF_SIZE);
	HAL_SPI_TransmitReceive_DMA(&hspi1,tData, rData, SPI_BUF_SIZE);
 80004ca:	2308      	movs	r3, #8
 80004cc:	4a05      	ldr	r2, [pc, #20]	; (80004e4 <SPI_DMA_Reset+0x24>)
 80004ce:	4906      	ldr	r1, [pc, #24]	; (80004e8 <SPI_DMA_Reset+0x28>)
 80004d0:	4803      	ldr	r0, [pc, #12]	; (80004e0 <SPI_DMA_Reset+0x20>)
 80004d2:	f001 ff3b 	bl	800234c <HAL_SPI_TransmitReceive_DMA>
	prevDMA = SPI_BUF_SIZE;
 80004d6:	4b05      	ldr	r3, [pc, #20]	; (80004ec <SPI_DMA_Reset+0x2c>)
 80004d8:	2208      	movs	r2, #8
 80004da:	801a      	strh	r2, [r3, #0]
}
 80004dc:	bf00      	nop
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	200000ac 	.word	0x200000ac
 80004e4:	2000009c 	.word	0x2000009c
 80004e8:	200000a4 	.word	0x200000a4
 80004ec:	20000002 	.word	0x20000002

080004f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80004f4:	bf00      	nop
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bc80      	pop	{r7}
 80004fa:	4770      	bx	lr

080004fc <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000500:	4b17      	ldr	r3, [pc, #92]	; (8000560 <MX_SPI1_Init+0x64>)
 8000502:	4a18      	ldr	r2, [pc, #96]	; (8000564 <MX_SPI1_Init+0x68>)
 8000504:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000506:	4b16      	ldr	r3, [pc, #88]	; (8000560 <MX_SPI1_Init+0x64>)
 8000508:	2200      	movs	r2, #0
 800050a:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800050c:	4b14      	ldr	r3, [pc, #80]	; (8000560 <MX_SPI1_Init+0x64>)
 800050e:	2200      	movs	r2, #0
 8000510:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000512:	4b13      	ldr	r3, [pc, #76]	; (8000560 <MX_SPI1_Init+0x64>)
 8000514:	2200      	movs	r2, #0
 8000516:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000518:	4b11      	ldr	r3, [pc, #68]	; (8000560 <MX_SPI1_Init+0x64>)
 800051a:	2200      	movs	r2, #0
 800051c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800051e:	4b10      	ldr	r3, [pc, #64]	; (8000560 <MX_SPI1_Init+0x64>)
 8000520:	2200      	movs	r2, #0
 8000522:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000524:	4b0e      	ldr	r3, [pc, #56]	; (8000560 <MX_SPI1_Init+0x64>)
 8000526:	f44f 7200 	mov.w	r2, #512	; 0x200
 800052a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800052c:	4b0c      	ldr	r3, [pc, #48]	; (8000560 <MX_SPI1_Init+0x64>)
 800052e:	2208      	movs	r2, #8
 8000530:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000532:	4b0b      	ldr	r3, [pc, #44]	; (8000560 <MX_SPI1_Init+0x64>)
 8000534:	2200      	movs	r2, #0
 8000536:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000538:	4b09      	ldr	r3, [pc, #36]	; (8000560 <MX_SPI1_Init+0x64>)
 800053a:	2200      	movs	r2, #0
 800053c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800053e:	4b08      	ldr	r3, [pc, #32]	; (8000560 <MX_SPI1_Init+0x64>)
 8000540:	2200      	movs	r2, #0
 8000542:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000544:	4b06      	ldr	r3, [pc, #24]	; (8000560 <MX_SPI1_Init+0x64>)
 8000546:	220a      	movs	r2, #10
 8000548:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800054a:	4805      	ldr	r0, [pc, #20]	; (8000560 <MX_SPI1_Init+0x64>)
 800054c:	f001 fe7a 	bl	8002244 <HAL_SPI_Init>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d001      	beq.n	800055a <MX_SPI1_Init+0x5e>
  {
    Error_Handler();
 8000556:	f7ff ffcb 	bl	80004f0 <Error_Handler>
  }

}
 800055a:	bf00      	nop
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	200000ac 	.word	0x200000ac
 8000564:	40013000 	.word	0x40013000

08000568 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b088      	sub	sp, #32
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000570:	f107 0310 	add.w	r3, r7, #16
 8000574:	2200      	movs	r2, #0
 8000576:	601a      	str	r2, [r3, #0]
 8000578:	605a      	str	r2, [r3, #4]
 800057a:	609a      	str	r2, [r3, #8]
 800057c:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	4a46      	ldr	r2, [pc, #280]	; (800069c <HAL_SPI_MspInit+0x134>)
 8000584:	4293      	cmp	r3, r2
 8000586:	f040 8084 	bne.w	8000692 <HAL_SPI_MspInit+0x12a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800058a:	4b45      	ldr	r3, [pc, #276]	; (80006a0 <HAL_SPI_MspInit+0x138>)
 800058c:	699b      	ldr	r3, [r3, #24]
 800058e:	4a44      	ldr	r2, [pc, #272]	; (80006a0 <HAL_SPI_MspInit+0x138>)
 8000590:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000594:	6193      	str	r3, [r2, #24]
 8000596:	4b42      	ldr	r3, [pc, #264]	; (80006a0 <HAL_SPI_MspInit+0x138>)
 8000598:	699b      	ldr	r3, [r3, #24]
 800059a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800059e:	60fb      	str	r3, [r7, #12]
 80005a0:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a2:	4b3f      	ldr	r3, [pc, #252]	; (80006a0 <HAL_SPI_MspInit+0x138>)
 80005a4:	699b      	ldr	r3, [r3, #24]
 80005a6:	4a3e      	ldr	r2, [pc, #248]	; (80006a0 <HAL_SPI_MspInit+0x138>)
 80005a8:	f043 0304 	orr.w	r3, r3, #4
 80005ac:	6193      	str	r3, [r2, #24]
 80005ae:	4b3c      	ldr	r3, [pc, #240]	; (80006a0 <HAL_SPI_MspInit+0x138>)
 80005b0:	699b      	ldr	r3, [r3, #24]
 80005b2:	f003 0304 	and.w	r3, r3, #4
 80005b6:	60bb      	str	r3, [r7, #8]
 80005b8:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80005ba:	23a0      	movs	r3, #160	; 0xa0
 80005bc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005be:	2300      	movs	r3, #0
 80005c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c2:	2300      	movs	r3, #0
 80005c4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005c6:	f107 0310 	add.w	r3, r7, #16
 80005ca:	4619      	mov	r1, r3
 80005cc:	4835      	ldr	r0, [pc, #212]	; (80006a4 <HAL_SPI_MspInit+0x13c>)
 80005ce:	f001 f891 	bl	80016f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80005d2:	2340      	movs	r3, #64	; 0x40
 80005d4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005d6:	2302      	movs	r3, #2
 80005d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005da:	2303      	movs	r3, #3
 80005dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005de:	f107 0310 	add.w	r3, r7, #16
 80005e2:	4619      	mov	r1, r3
 80005e4:	482f      	ldr	r0, [pc, #188]	; (80006a4 <HAL_SPI_MspInit+0x13c>)
 80005e6:	f001 f885 	bl	80016f4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 80005ea:	4b2f      	ldr	r3, [pc, #188]	; (80006a8 <HAL_SPI_MspInit+0x140>)
 80005ec:	4a2f      	ldr	r2, [pc, #188]	; (80006ac <HAL_SPI_MspInit+0x144>)
 80005ee:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80005f0:	4b2d      	ldr	r3, [pc, #180]	; (80006a8 <HAL_SPI_MspInit+0x140>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80005f6:	4b2c      	ldr	r3, [pc, #176]	; (80006a8 <HAL_SPI_MspInit+0x140>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80005fc:	4b2a      	ldr	r3, [pc, #168]	; (80006a8 <HAL_SPI_MspInit+0x140>)
 80005fe:	2280      	movs	r2, #128	; 0x80
 8000600:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000602:	4b29      	ldr	r3, [pc, #164]	; (80006a8 <HAL_SPI_MspInit+0x140>)
 8000604:	2200      	movs	r2, #0
 8000606:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000608:	4b27      	ldr	r3, [pc, #156]	; (80006a8 <HAL_SPI_MspInit+0x140>)
 800060a:	2200      	movs	r2, #0
 800060c:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800060e:	4b26      	ldr	r3, [pc, #152]	; (80006a8 <HAL_SPI_MspInit+0x140>)
 8000610:	2200      	movs	r2, #0
 8000612:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000614:	4b24      	ldr	r3, [pc, #144]	; (80006a8 <HAL_SPI_MspInit+0x140>)
 8000616:	2200      	movs	r2, #0
 8000618:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800061a:	4823      	ldr	r0, [pc, #140]	; (80006a8 <HAL_SPI_MspInit+0x140>)
 800061c:	f000 fbe8 	bl	8000df0 <HAL_DMA_Init>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <HAL_SPI_MspInit+0xc2>
    {
      Error_Handler();
 8000626:	f7ff ff63 	bl	80004f0 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	4a1e      	ldr	r2, [pc, #120]	; (80006a8 <HAL_SPI_MspInit+0x140>)
 800062e:	64da      	str	r2, [r3, #76]	; 0x4c
 8000630:	4a1d      	ldr	r2, [pc, #116]	; (80006a8 <HAL_SPI_MspInit+0x140>)
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8000636:	4b1e      	ldr	r3, [pc, #120]	; (80006b0 <HAL_SPI_MspInit+0x148>)
 8000638:	4a1e      	ldr	r2, [pc, #120]	; (80006b4 <HAL_SPI_MspInit+0x14c>)
 800063a:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800063c:	4b1c      	ldr	r3, [pc, #112]	; (80006b0 <HAL_SPI_MspInit+0x148>)
 800063e:	2210      	movs	r2, #16
 8000640:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000642:	4b1b      	ldr	r3, [pc, #108]	; (80006b0 <HAL_SPI_MspInit+0x148>)
 8000644:	2200      	movs	r2, #0
 8000646:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000648:	4b19      	ldr	r3, [pc, #100]	; (80006b0 <HAL_SPI_MspInit+0x148>)
 800064a:	2280      	movs	r2, #128	; 0x80
 800064c:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800064e:	4b18      	ldr	r3, [pc, #96]	; (80006b0 <HAL_SPI_MspInit+0x148>)
 8000650:	2200      	movs	r2, #0
 8000652:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000654:	4b16      	ldr	r3, [pc, #88]	; (80006b0 <HAL_SPI_MspInit+0x148>)
 8000656:	2200      	movs	r2, #0
 8000658:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800065a:	4b15      	ldr	r3, [pc, #84]	; (80006b0 <HAL_SPI_MspInit+0x148>)
 800065c:	2200      	movs	r2, #0
 800065e:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000660:	4b13      	ldr	r3, [pc, #76]	; (80006b0 <HAL_SPI_MspInit+0x148>)
 8000662:	2200      	movs	r2, #0
 8000664:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000666:	4812      	ldr	r0, [pc, #72]	; (80006b0 <HAL_SPI_MspInit+0x148>)
 8000668:	f000 fbc2 	bl	8000df0 <HAL_DMA_Init>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <HAL_SPI_MspInit+0x10e>
    {
      Error_Handler();
 8000672:	f7ff ff3d 	bl	80004f0 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	4a0d      	ldr	r2, [pc, #52]	; (80006b0 <HAL_SPI_MspInit+0x148>)
 800067a:	649a      	str	r2, [r3, #72]	; 0x48
 800067c:	4a0c      	ldr	r2, [pc, #48]	; (80006b0 <HAL_SPI_MspInit+0x148>)
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000682:	2200      	movs	r2, #0
 8000684:	2100      	movs	r1, #0
 8000686:	2023      	movs	r0, #35	; 0x23
 8000688:	f000 fb7b 	bl	8000d82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800068c:	2023      	movs	r0, #35	; 0x23
 800068e:	f000 fb94 	bl	8000dba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000692:	bf00      	nop
 8000694:	3720      	adds	r7, #32
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	40013000 	.word	0x40013000
 80006a0:	40021000 	.word	0x40021000
 80006a4:	40010800 	.word	0x40010800
 80006a8:	20000104 	.word	0x20000104
 80006ac:	4002001c 	.word	0x4002001c
 80006b0:	20000148 	.word	0x20000148
 80006b4:	40020030 	.word	0x40020030

080006b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b085      	sub	sp, #20
 80006bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006be:	4b15      	ldr	r3, [pc, #84]	; (8000714 <HAL_MspInit+0x5c>)
 80006c0:	699b      	ldr	r3, [r3, #24]
 80006c2:	4a14      	ldr	r2, [pc, #80]	; (8000714 <HAL_MspInit+0x5c>)
 80006c4:	f043 0301 	orr.w	r3, r3, #1
 80006c8:	6193      	str	r3, [r2, #24]
 80006ca:	4b12      	ldr	r3, [pc, #72]	; (8000714 <HAL_MspInit+0x5c>)
 80006cc:	699b      	ldr	r3, [r3, #24]
 80006ce:	f003 0301 	and.w	r3, r3, #1
 80006d2:	60bb      	str	r3, [r7, #8]
 80006d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d6:	4b0f      	ldr	r3, [pc, #60]	; (8000714 <HAL_MspInit+0x5c>)
 80006d8:	69db      	ldr	r3, [r3, #28]
 80006da:	4a0e      	ldr	r2, [pc, #56]	; (8000714 <HAL_MspInit+0x5c>)
 80006dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006e0:	61d3      	str	r3, [r2, #28]
 80006e2:	4b0c      	ldr	r3, [pc, #48]	; (8000714 <HAL_MspInit+0x5c>)
 80006e4:	69db      	ldr	r3, [r3, #28]
 80006e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80006ee:	4b0a      	ldr	r3, [pc, #40]	; (8000718 <HAL_MspInit+0x60>)
 80006f0:	685b      	ldr	r3, [r3, #4]
 80006f2:	60fb      	str	r3, [r7, #12]
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80006fa:	60fb      	str	r3, [r7, #12]
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000702:	60fb      	str	r3, [r7, #12]
 8000704:	4a04      	ldr	r2, [pc, #16]	; (8000718 <HAL_MspInit+0x60>)
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800070a:	bf00      	nop
 800070c:	3714      	adds	r7, #20
 800070e:	46bd      	mov	sp, r7
 8000710:	bc80      	pop	{r7}
 8000712:	4770      	bx	lr
 8000714:	40021000 	.word	0x40021000
 8000718:	40010000 	.word	0x40010000

0800071c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000720:	bf00      	nop
 8000722:	46bd      	mov	sp, r7
 8000724:	bc80      	pop	{r7}
 8000726:	4770      	bx	lr

08000728 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	dbprintf("%s",__func__);
 800072c:	4902      	ldr	r1, [pc, #8]	; (8000738 <HardFault_Handler+0x10>)
 800072e:	4803      	ldr	r0, [pc, #12]	; (800073c <HardFault_Handler+0x14>)
 8000730:	f000 f982 	bl	8000a38 <dbprintf>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000734:	e7fe      	b.n	8000734 <HardFault_Handler+0xc>
 8000736:	bf00      	nop
 8000738:	08003844 	.word	0x08003844
 800073c:	08003828 	.word	0x08003828

08000740 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000744:	e7fe      	b.n	8000744 <MemManage_Handler+0x4>

08000746 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000746:	b480      	push	{r7}
 8000748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800074a:	e7fe      	b.n	800074a <BusFault_Handler+0x4>

0800074c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000750:	e7fe      	b.n	8000750 <UsageFault_Handler+0x4>

08000752 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000752:	b480      	push	{r7}
 8000754:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000756:	bf00      	nop
 8000758:	46bd      	mov	sp, r7
 800075a:	bc80      	pop	{r7}
 800075c:	4770      	bx	lr

0800075e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800075e:	b480      	push	{r7}
 8000760:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000762:	bf00      	nop
 8000764:	46bd      	mov	sp, r7
 8000766:	bc80      	pop	{r7}
 8000768:	4770      	bx	lr

0800076a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800076a:	b480      	push	{r7}
 800076c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800076e:	bf00      	nop
 8000770:	46bd      	mov	sp, r7
 8000772:	bc80      	pop	{r7}
 8000774:	4770      	bx	lr

08000776 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000776:	b580      	push	{r7, lr}
 8000778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800077a:	f000 f9ed 	bl	8000b58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800077e:	bf00      	nop
 8000780:	bd80      	pop	{r7, pc}
	...

08000784 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8000788:	4802      	ldr	r0, [pc, #8]	; (8000794 <DMA1_Channel2_IRQHandler+0x10>)
 800078a:	f000 fd49 	bl	8001220 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	20000104 	.word	0x20000104

08000798 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800079c:	4802      	ldr	r0, [pc, #8]	; (80007a8 <DMA1_Channel3_IRQHandler+0x10>)
 800079e:	f000 fd3f 	bl	8001220 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	20000148 	.word	0x20000148

080007ac <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80007b0:	4802      	ldr	r0, [pc, #8]	; (80007bc <DMA1_Channel4_IRQHandler+0x10>)
 80007b2:	f000 fd35 	bl	8001220 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80007b6:	bf00      	nop
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	2000018c 	.word	0x2000018c

080007c0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80007c4:	2020      	movs	r0, #32
 80007c6:	f001 f8ff 	bl	80019c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}
	...

080007d0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80007d4:	4804      	ldr	r0, [pc, #16]	; (80007e8 <SPI1_IRQHandler+0x18>)
 80007d6:	f001 fefb 	bl	80025d0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */
	dbprintf("%s",__func__);
 80007da:	4904      	ldr	r1, [pc, #16]	; (80007ec <SPI1_IRQHandler+0x1c>)
 80007dc:	4804      	ldr	r0, [pc, #16]	; (80007f0 <SPI1_IRQHandler+0x20>)
 80007de:	f000 f92b 	bl	8000a38 <dbprintf>
  /* USER CODE END SPI1_IRQn 1 */
}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	200000ac 	.word	0x200000ac
 80007ec:	08003858 	.word	0x08003858
 80007f0:	08003828 	.word	0x08003828

080007f4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b084      	sub	sp, #16
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80007fc:	4b11      	ldr	r3, [pc, #68]	; (8000844 <_sbrk+0x50>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d102      	bne.n	800080a <_sbrk+0x16>
		heap_end = &end;
 8000804:	4b0f      	ldr	r3, [pc, #60]	; (8000844 <_sbrk+0x50>)
 8000806:	4a10      	ldr	r2, [pc, #64]	; (8000848 <_sbrk+0x54>)
 8000808:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800080a:	4b0e      	ldr	r3, [pc, #56]	; (8000844 <_sbrk+0x50>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000810:	4b0c      	ldr	r3, [pc, #48]	; (8000844 <_sbrk+0x50>)
 8000812:	681a      	ldr	r2, [r3, #0]
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	4413      	add	r3, r2
 8000818:	466a      	mov	r2, sp
 800081a:	4293      	cmp	r3, r2
 800081c:	d907      	bls.n	800082e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800081e:	f002 fb87 	bl	8002f30 <__errno>
 8000822:	4602      	mov	r2, r0
 8000824:	230c      	movs	r3, #12
 8000826:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000828:	f04f 33ff 	mov.w	r3, #4294967295
 800082c:	e006      	b.n	800083c <_sbrk+0x48>
	}

	heap_end += incr;
 800082e:	4b05      	ldr	r3, [pc, #20]	; (8000844 <_sbrk+0x50>)
 8000830:	681a      	ldr	r2, [r3, #0]
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	4413      	add	r3, r2
 8000836:	4a03      	ldr	r2, [pc, #12]	; (8000844 <_sbrk+0x50>)
 8000838:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800083a:	68fb      	ldr	r3, [r7, #12]
}
 800083c:	4618      	mov	r0, r3
 800083e:	3710      	adds	r7, #16
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	20000090 	.word	0x20000090
 8000848:	20000218 	.word	0x20000218

0800084c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000850:	bf00      	nop
 8000852:	46bd      	mov	sp, r7
 8000854:	bc80      	pop	{r7}
 8000856:	4770      	bx	lr

08000858 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 800085c:	4b11      	ldr	r3, [pc, #68]	; (80008a4 <MX_USART1_UART_Init+0x4c>)
 800085e:	4a12      	ldr	r2, [pc, #72]	; (80008a8 <MX_USART1_UART_Init+0x50>)
 8000860:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 8000862:	4b10      	ldr	r3, [pc, #64]	; (80008a4 <MX_USART1_UART_Init+0x4c>)
 8000864:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8000868:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800086a:	4b0e      	ldr	r3, [pc, #56]	; (80008a4 <MX_USART1_UART_Init+0x4c>)
 800086c:	2200      	movs	r2, #0
 800086e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000870:	4b0c      	ldr	r3, [pc, #48]	; (80008a4 <MX_USART1_UART_Init+0x4c>)
 8000872:	2200      	movs	r2, #0
 8000874:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000876:	4b0b      	ldr	r3, [pc, #44]	; (80008a4 <MX_USART1_UART_Init+0x4c>)
 8000878:	2200      	movs	r2, #0
 800087a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800087c:	4b09      	ldr	r3, [pc, #36]	; (80008a4 <MX_USART1_UART_Init+0x4c>)
 800087e:	220c      	movs	r2, #12
 8000880:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000882:	4b08      	ldr	r3, [pc, #32]	; (80008a4 <MX_USART1_UART_Init+0x4c>)
 8000884:	2200      	movs	r2, #0
 8000886:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000888:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <MX_USART1_UART_Init+0x4c>)
 800088a:	2200      	movs	r2, #0
 800088c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800088e:	4805      	ldr	r0, [pc, #20]	; (80008a4 <MX_USART1_UART_Init+0x4c>)
 8000890:	f002 f996 	bl	8002bc0 <HAL_UART_Init>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800089a:	f7ff fe29 	bl	80004f0 <Error_Handler>
  }

}
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	200001d0 	.word	0x200001d0
 80008a8:	40013800 	.word	0x40013800

080008ac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b088      	sub	sp, #32
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b4:	f107 0310 	add.w	r3, r7, #16
 80008b8:	2200      	movs	r2, #0
 80008ba:	601a      	str	r2, [r3, #0]
 80008bc:	605a      	str	r2, [r3, #4]
 80008be:	609a      	str	r2, [r3, #8]
 80008c0:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	4a2f      	ldr	r2, [pc, #188]	; (8000984 <HAL_UART_MspInit+0xd8>)
 80008c8:	4293      	cmp	r3, r2
 80008ca:	d157      	bne.n	800097c <HAL_UART_MspInit+0xd0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008cc:	4b2e      	ldr	r3, [pc, #184]	; (8000988 <HAL_UART_MspInit+0xdc>)
 80008ce:	699b      	ldr	r3, [r3, #24]
 80008d0:	4a2d      	ldr	r2, [pc, #180]	; (8000988 <HAL_UART_MspInit+0xdc>)
 80008d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008d6:	6193      	str	r3, [r2, #24]
 80008d8:	4b2b      	ldr	r3, [pc, #172]	; (8000988 <HAL_UART_MspInit+0xdc>)
 80008da:	699b      	ldr	r3, [r3, #24]
 80008dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008e0:	60fb      	str	r3, [r7, #12]
 80008e2:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e4:	4b28      	ldr	r3, [pc, #160]	; (8000988 <HAL_UART_MspInit+0xdc>)
 80008e6:	699b      	ldr	r3, [r3, #24]
 80008e8:	4a27      	ldr	r2, [pc, #156]	; (8000988 <HAL_UART_MspInit+0xdc>)
 80008ea:	f043 0304 	orr.w	r3, r3, #4
 80008ee:	6193      	str	r3, [r2, #24]
 80008f0:	4b25      	ldr	r3, [pc, #148]	; (8000988 <HAL_UART_MspInit+0xdc>)
 80008f2:	699b      	ldr	r3, [r3, #24]
 80008f4:	f003 0304 	and.w	r3, r3, #4
 80008f8:	60bb      	str	r3, [r7, #8]
 80008fa:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = DBG_TX_Pin;
 80008fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000900:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000902:	2302      	movs	r3, #2
 8000904:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000906:	2303      	movs	r3, #3
 8000908:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DBG_TX_GPIO_Port, &GPIO_InitStruct);
 800090a:	f107 0310 	add.w	r3, r7, #16
 800090e:	4619      	mov	r1, r3
 8000910:	481e      	ldr	r0, [pc, #120]	; (800098c <HAL_UART_MspInit+0xe0>)
 8000912:	f000 feef 	bl	80016f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DBG_RX_Pin;
 8000916:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800091a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800091c:	2300      	movs	r3, #0
 800091e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(DBG_RX_GPIO_Port, &GPIO_InitStruct);
 8000924:	f107 0310 	add.w	r3, r7, #16
 8000928:	4619      	mov	r1, r3
 800092a:	4818      	ldr	r0, [pc, #96]	; (800098c <HAL_UART_MspInit+0xe0>)
 800092c:	f000 fee2 	bl	80016f4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8000930:	4b17      	ldr	r3, [pc, #92]	; (8000990 <HAL_UART_MspInit+0xe4>)
 8000932:	4a18      	ldr	r2, [pc, #96]	; (8000994 <HAL_UART_MspInit+0xe8>)
 8000934:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000936:	4b16      	ldr	r3, [pc, #88]	; (8000990 <HAL_UART_MspInit+0xe4>)
 8000938:	2210      	movs	r2, #16
 800093a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800093c:	4b14      	ldr	r3, [pc, #80]	; (8000990 <HAL_UART_MspInit+0xe4>)
 800093e:	2200      	movs	r2, #0
 8000940:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000942:	4b13      	ldr	r3, [pc, #76]	; (8000990 <HAL_UART_MspInit+0xe4>)
 8000944:	2280      	movs	r2, #128	; 0x80
 8000946:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000948:	4b11      	ldr	r3, [pc, #68]	; (8000990 <HAL_UART_MspInit+0xe4>)
 800094a:	2200      	movs	r2, #0
 800094c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800094e:	4b10      	ldr	r3, [pc, #64]	; (8000990 <HAL_UART_MspInit+0xe4>)
 8000950:	2200      	movs	r2, #0
 8000952:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000954:	4b0e      	ldr	r3, [pc, #56]	; (8000990 <HAL_UART_MspInit+0xe4>)
 8000956:	2200      	movs	r2, #0
 8000958:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800095a:	4b0d      	ldr	r3, [pc, #52]	; (8000990 <HAL_UART_MspInit+0xe4>)
 800095c:	2200      	movs	r2, #0
 800095e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000960:	480b      	ldr	r0, [pc, #44]	; (8000990 <HAL_UART_MspInit+0xe4>)
 8000962:	f000 fa45 	bl	8000df0 <HAL_DMA_Init>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 800096c:	f7ff fdc0 	bl	80004f0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	4a07      	ldr	r2, [pc, #28]	; (8000990 <HAL_UART_MspInit+0xe4>)
 8000974:	631a      	str	r2, [r3, #48]	; 0x30
 8000976:	4a06      	ldr	r2, [pc, #24]	; (8000990 <HAL_UART_MspInit+0xe4>)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800097c:	bf00      	nop
 800097e:	3720      	adds	r7, #32
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	40013800 	.word	0x40013800
 8000988:	40021000 	.word	0x40021000
 800098c:	40010800 	.word	0x40010800
 8000990:	2000018c 	.word	0x2000018c
 8000994:	40020044 	.word	0x40020044

08000998 <vprint>:
  }
} 

/* USER CODE BEGIN 1 */
void vprint(const char *fmt, va_list argp)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b0b4      	sub	sp, #208	; 0xd0
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
 80009a0:	6039      	str	r1, [r7, #0]
    char string[200];
    if(0 < vsprintf(string,fmt,argp)) // build string
 80009a2:	f107 0308 	add.w	r3, r7, #8
 80009a6:	683a      	ldr	r2, [r7, #0]
 80009a8:	6879      	ldr	r1, [r7, #4]
 80009aa:	4618      	mov	r0, r3
 80009ac:	f002 fb14 	bl	8002fd8 <vsiprintf>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	dd0d      	ble.n	80009d2 <vprint+0x3a>
    {
        HAL_UART_Transmit(&huart1, (uint8_t*)string, strlen(string), 0xffffff); // send message via UART
 80009b6:	f107 0308 	add.w	r3, r7, #8
 80009ba:	4618      	mov	r0, r3
 80009bc:	f7ff fc32 	bl	8000224 <strlen>
 80009c0:	4603      	mov	r3, r0
 80009c2:	b29a      	uxth	r2, r3
 80009c4:	f107 0108 	add.w	r1, r7, #8
 80009c8:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80009cc:	4803      	ldr	r0, [pc, #12]	; (80009dc <vprint+0x44>)
 80009ce:	f002 f944 	bl	8002c5a <HAL_UART_Transmit>
    }
}
 80009d2:	bf00      	nop
 80009d4:	37d0      	adds	r7, #208	; 0xd0
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	200001d0 	.word	0x200001d0

080009e0 <vprintln>:

void vprintln(const char *fmt, va_list argp)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b0b4      	sub	sp, #208	; 0xd0
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
 80009e8:	6039      	str	r1, [r7, #0]
    char string[200];
    if(0 < vsprintf(string,fmt,argp)) // build string
 80009ea:	f107 0308 	add.w	r3, r7, #8
 80009ee:	683a      	ldr	r2, [r7, #0]
 80009f0:	6879      	ldr	r1, [r7, #4]
 80009f2:	4618      	mov	r0, r3
 80009f4:	f002 faf0 	bl	8002fd8 <vsiprintf>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	dd14      	ble.n	8000a28 <vprintln+0x48>
    {
        HAL_UART_Transmit(&huart1, (uint8_t*)string, strlen(string), 0xffffff); // send message via UART
 80009fe:	f107 0308 	add.w	r3, r7, #8
 8000a02:	4618      	mov	r0, r3
 8000a04:	f7ff fc0e 	bl	8000224 <strlen>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	b29a      	uxth	r2, r3
 8000a0c:	f107 0108 	add.w	r1, r7, #8
 8000a10:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8000a14:	4806      	ldr	r0, [pc, #24]	; (8000a30 <vprintln+0x50>)
 8000a16:	f002 f920 	bl	8002c5a <HAL_UART_Transmit>
        HAL_UART_Transmit(&huart1, (uint8_t*)"\n\r",2, 0xffffff);
 8000a1a:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8000a1e:	2202      	movs	r2, #2
 8000a20:	4904      	ldr	r1, [pc, #16]	; (8000a34 <vprintln+0x54>)
 8000a22:	4803      	ldr	r0, [pc, #12]	; (8000a30 <vprintln+0x50>)
 8000a24:	f002 f919 	bl	8002c5a <HAL_UART_Transmit>
    }
}
 8000a28:	bf00      	nop
 8000a2a:	37d0      	adds	r7, #208	; 0xd0
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	200001d0 	.word	0x200001d0
 8000a34:	0800382c 	.word	0x0800382c

08000a38 <dbprintf>:

void dbprintf(const char *fmt, ...)
{
 8000a38:	b40f      	push	{r0, r1, r2, r3}
 8000a3a:	b580      	push	{r7, lr}
 8000a3c:	b082      	sub	sp, #8
 8000a3e:	af00      	add	r7, sp, #0
    va_list argp;
    va_start(argp, fmt);
 8000a40:	f107 0314 	add.w	r3, r7, #20
 8000a44:	607b      	str	r3, [r7, #4]
    vprintln((const char *)fmt, argp);
 8000a46:	6879      	ldr	r1, [r7, #4]
 8000a48:	6938      	ldr	r0, [r7, #16]
 8000a4a:	f7ff ffc9 	bl	80009e0 <vprintln>
    va_end(argp);
}
 8000a4e:	bf00      	nop
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000a58:	b004      	add	sp, #16
 8000a5a:	4770      	bx	lr

08000a5c <rtprintf>:

void rtprintf(const char *fmt, ...)
{
 8000a5c:	b40f      	push	{r0, r1, r2, r3}
 8000a5e:	b580      	push	{r7, lr}
 8000a60:	b082      	sub	sp, #8
 8000a62:	af00      	add	r7, sp, #0
    va_list argp;
    va_start(argp, fmt);
 8000a64:	f107 0314 	add.w	r3, r7, #20
 8000a68:	607b      	str	r3, [r7, #4]
    vprint((const char *)fmt, argp);
 8000a6a:	6879      	ldr	r1, [r7, #4]
 8000a6c:	6938      	ldr	r0, [r7, #16]
 8000a6e:	f7ff ff93 	bl	8000998 <vprint>
    va_end(argp);
}
 8000a72:	bf00      	nop
 8000a74:	3708      	adds	r7, #8
 8000a76:	46bd      	mov	sp, r7
 8000a78:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000a7c:	b004      	add	sp, #16
 8000a7e:	4770      	bx	lr

08000a80 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000a80:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000a82:	e003      	b.n	8000a8c <LoopCopyDataInit>

08000a84 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000a84:	4b0b      	ldr	r3, [pc, #44]	; (8000ab4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000a86:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000a88:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000a8a:	3104      	adds	r1, #4

08000a8c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000a8c:	480a      	ldr	r0, [pc, #40]	; (8000ab8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000a8e:	4b0b      	ldr	r3, [pc, #44]	; (8000abc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000a90:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000a92:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000a94:	d3f6      	bcc.n	8000a84 <CopyDataInit>
  ldr r2, =_sbss
 8000a96:	4a0a      	ldr	r2, [pc, #40]	; (8000ac0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000a98:	e002      	b.n	8000aa0 <LoopFillZerobss>

08000a9a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000a9a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000a9c:	f842 3b04 	str.w	r3, [r2], #4

08000aa0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000aa0:	4b08      	ldr	r3, [pc, #32]	; (8000ac4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000aa2:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000aa4:	d3f9      	bcc.n	8000a9a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000aa6:	f7ff fed1 	bl	800084c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000aaa:	f002 fa47 	bl	8002f3c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000aae:	f7ff fc3b 	bl	8000328 <main>
  bx lr
 8000ab2:	4770      	bx	lr
  ldr r3, =_sidata
 8000ab4:	080038bc 	.word	0x080038bc
  ldr r0, =_sdata
 8000ab8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000abc:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 8000ac0:	20000074 	.word	0x20000074
  ldr r3, = _ebss
 8000ac4:	20000218 	.word	0x20000218

08000ac8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ac8:	e7fe      	b.n	8000ac8 <ADC1_2_IRQHandler>
	...

08000acc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ad0:	4b08      	ldr	r3, [pc, #32]	; (8000af4 <HAL_Init+0x28>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a07      	ldr	r2, [pc, #28]	; (8000af4 <HAL_Init+0x28>)
 8000ad6:	f043 0310 	orr.w	r3, r3, #16
 8000ada:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000adc:	2003      	movs	r0, #3
 8000ade:	f000 f945 	bl	8000d6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ae2:	2000      	movs	r0, #0
 8000ae4:	f000 f808 	bl	8000af8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ae8:	f7ff fde6 	bl	80006b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000aec:	2300      	movs	r3, #0
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	40022000 	.word	0x40022000

08000af8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b00:	4b12      	ldr	r3, [pc, #72]	; (8000b4c <HAL_InitTick+0x54>)
 8000b02:	681a      	ldr	r2, [r3, #0]
 8000b04:	4b12      	ldr	r3, [pc, #72]	; (8000b50 <HAL_InitTick+0x58>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	4619      	mov	r1, r3
 8000b0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b12:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b16:	4618      	mov	r0, r3
 8000b18:	f000 f95d 	bl	8000dd6 <HAL_SYSTICK_Config>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b22:	2301      	movs	r3, #1
 8000b24:	e00e      	b.n	8000b44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	2b0f      	cmp	r3, #15
 8000b2a:	d80a      	bhi.n	8000b42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	6879      	ldr	r1, [r7, #4]
 8000b30:	f04f 30ff 	mov.w	r0, #4294967295
 8000b34:	f000 f925 	bl	8000d82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b38:	4a06      	ldr	r2, [pc, #24]	; (8000b54 <HAL_InitTick+0x5c>)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	e000      	b.n	8000b44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b42:	2301      	movs	r3, #1
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	3708      	adds	r7, #8
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	20000004 	.word	0x20000004
 8000b50:	2000000c 	.word	0x2000000c
 8000b54:	20000008 	.word	0x20000008

08000b58 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b5c:	4b05      	ldr	r3, [pc, #20]	; (8000b74 <HAL_IncTick+0x1c>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	461a      	mov	r2, r3
 8000b62:	4b05      	ldr	r3, [pc, #20]	; (8000b78 <HAL_IncTick+0x20>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4413      	add	r3, r2
 8000b68:	4a03      	ldr	r2, [pc, #12]	; (8000b78 <HAL_IncTick+0x20>)
 8000b6a:	6013      	str	r3, [r2, #0]
}
 8000b6c:	bf00      	nop
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bc80      	pop	{r7}
 8000b72:	4770      	bx	lr
 8000b74:	2000000c 	.word	0x2000000c
 8000b78:	20000210 	.word	0x20000210

08000b7c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b80:	4b02      	ldr	r3, [pc, #8]	; (8000b8c <HAL_GetTick+0x10>)
 8000b82:	681b      	ldr	r3, [r3, #0]
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bc80      	pop	{r7}
 8000b8a:	4770      	bx	lr
 8000b8c:	20000210 	.word	0x20000210

08000b90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b084      	sub	sp, #16
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b98:	f7ff fff0 	bl	8000b7c <HAL_GetTick>
 8000b9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ba8:	d005      	beq.n	8000bb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000baa:	4b09      	ldr	r3, [pc, #36]	; (8000bd0 <HAL_Delay+0x40>)
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	461a      	mov	r2, r3
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	4413      	add	r3, r2
 8000bb4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bb6:	bf00      	nop
 8000bb8:	f7ff ffe0 	bl	8000b7c <HAL_GetTick>
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	68bb      	ldr	r3, [r7, #8]
 8000bc0:	1ad3      	subs	r3, r2, r3
 8000bc2:	68fa      	ldr	r2, [r7, #12]
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	d8f7      	bhi.n	8000bb8 <HAL_Delay+0x28>
  {
  }
}
 8000bc8:	bf00      	nop
 8000bca:	3710      	adds	r7, #16
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	2000000c 	.word	0x2000000c

08000bd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b085      	sub	sp, #20
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	f003 0307 	and.w	r3, r3, #7
 8000be2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000be4:	4b0c      	ldr	r3, [pc, #48]	; (8000c18 <__NVIC_SetPriorityGrouping+0x44>)
 8000be6:	68db      	ldr	r3, [r3, #12]
 8000be8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bea:	68ba      	ldr	r2, [r7, #8]
 8000bec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bfc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c06:	4a04      	ldr	r2, [pc, #16]	; (8000c18 <__NVIC_SetPriorityGrouping+0x44>)
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	60d3      	str	r3, [r2, #12]
}
 8000c0c:	bf00      	nop
 8000c0e:	3714      	adds	r7, #20
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bc80      	pop	{r7}
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	e000ed00 	.word	0xe000ed00

08000c1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c20:	4b04      	ldr	r3, [pc, #16]	; (8000c34 <__NVIC_GetPriorityGrouping+0x18>)
 8000c22:	68db      	ldr	r3, [r3, #12]
 8000c24:	0a1b      	lsrs	r3, r3, #8
 8000c26:	f003 0307 	and.w	r3, r3, #7
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bc80      	pop	{r7}
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	e000ed00 	.word	0xe000ed00

08000c38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	4603      	mov	r3, r0
 8000c40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	db0b      	blt.n	8000c62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c4a:	79fb      	ldrb	r3, [r7, #7]
 8000c4c:	f003 021f 	and.w	r2, r3, #31
 8000c50:	4906      	ldr	r1, [pc, #24]	; (8000c6c <__NVIC_EnableIRQ+0x34>)
 8000c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c56:	095b      	lsrs	r3, r3, #5
 8000c58:	2001      	movs	r0, #1
 8000c5a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c62:	bf00      	nop
 8000c64:	370c      	adds	r7, #12
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bc80      	pop	{r7}
 8000c6a:	4770      	bx	lr
 8000c6c:	e000e100 	.word	0xe000e100

08000c70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4603      	mov	r3, r0
 8000c78:	6039      	str	r1, [r7, #0]
 8000c7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	db0a      	blt.n	8000c9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	b2da      	uxtb	r2, r3
 8000c88:	490c      	ldr	r1, [pc, #48]	; (8000cbc <__NVIC_SetPriority+0x4c>)
 8000c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8e:	0112      	lsls	r2, r2, #4
 8000c90:	b2d2      	uxtb	r2, r2
 8000c92:	440b      	add	r3, r1
 8000c94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c98:	e00a      	b.n	8000cb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	b2da      	uxtb	r2, r3
 8000c9e:	4908      	ldr	r1, [pc, #32]	; (8000cc0 <__NVIC_SetPriority+0x50>)
 8000ca0:	79fb      	ldrb	r3, [r7, #7]
 8000ca2:	f003 030f 	and.w	r3, r3, #15
 8000ca6:	3b04      	subs	r3, #4
 8000ca8:	0112      	lsls	r2, r2, #4
 8000caa:	b2d2      	uxtb	r2, r2
 8000cac:	440b      	add	r3, r1
 8000cae:	761a      	strb	r2, [r3, #24]
}
 8000cb0:	bf00      	nop
 8000cb2:	370c      	adds	r7, #12
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bc80      	pop	{r7}
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	e000e100 	.word	0xe000e100
 8000cc0:	e000ed00 	.word	0xe000ed00

08000cc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b089      	sub	sp, #36	; 0x24
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	60f8      	str	r0, [r7, #12]
 8000ccc:	60b9      	str	r1, [r7, #8]
 8000cce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	f003 0307 	and.w	r3, r3, #7
 8000cd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cd8:	69fb      	ldr	r3, [r7, #28]
 8000cda:	f1c3 0307 	rsb	r3, r3, #7
 8000cde:	2b04      	cmp	r3, #4
 8000ce0:	bf28      	it	cs
 8000ce2:	2304      	movcs	r3, #4
 8000ce4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	3304      	adds	r3, #4
 8000cea:	2b06      	cmp	r3, #6
 8000cec:	d902      	bls.n	8000cf4 <NVIC_EncodePriority+0x30>
 8000cee:	69fb      	ldr	r3, [r7, #28]
 8000cf0:	3b03      	subs	r3, #3
 8000cf2:	e000      	b.n	8000cf6 <NVIC_EncodePriority+0x32>
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf8:	f04f 32ff 	mov.w	r2, #4294967295
 8000cfc:	69bb      	ldr	r3, [r7, #24]
 8000cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000d02:	43da      	mvns	r2, r3
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	401a      	ands	r2, r3
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d0c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	fa01 f303 	lsl.w	r3, r1, r3
 8000d16:	43d9      	mvns	r1, r3
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d1c:	4313      	orrs	r3, r2
         );
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3724      	adds	r7, #36	; 0x24
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bc80      	pop	{r7}
 8000d26:	4770      	bx	lr

08000d28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	3b01      	subs	r3, #1
 8000d34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d38:	d301      	bcc.n	8000d3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	e00f      	b.n	8000d5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d3e:	4a0a      	ldr	r2, [pc, #40]	; (8000d68 <SysTick_Config+0x40>)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	3b01      	subs	r3, #1
 8000d44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d46:	210f      	movs	r1, #15
 8000d48:	f04f 30ff 	mov.w	r0, #4294967295
 8000d4c:	f7ff ff90 	bl	8000c70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d50:	4b05      	ldr	r3, [pc, #20]	; (8000d68 <SysTick_Config+0x40>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d56:	4b04      	ldr	r3, [pc, #16]	; (8000d68 <SysTick_Config+0x40>)
 8000d58:	2207      	movs	r2, #7
 8000d5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d5c:	2300      	movs	r3, #0
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	e000e010 	.word	0xe000e010

08000d6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d74:	6878      	ldr	r0, [r7, #4]
 8000d76:	f7ff ff2d 	bl	8000bd4 <__NVIC_SetPriorityGrouping>
}
 8000d7a:	bf00      	nop
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b086      	sub	sp, #24
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	4603      	mov	r3, r0
 8000d8a:	60b9      	str	r1, [r7, #8]
 8000d8c:	607a      	str	r2, [r7, #4]
 8000d8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d90:	2300      	movs	r3, #0
 8000d92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d94:	f7ff ff42 	bl	8000c1c <__NVIC_GetPriorityGrouping>
 8000d98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d9a:	687a      	ldr	r2, [r7, #4]
 8000d9c:	68b9      	ldr	r1, [r7, #8]
 8000d9e:	6978      	ldr	r0, [r7, #20]
 8000da0:	f7ff ff90 	bl	8000cc4 <NVIC_EncodePriority>
 8000da4:	4602      	mov	r2, r0
 8000da6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000daa:	4611      	mov	r1, r2
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff ff5f 	bl	8000c70 <__NVIC_SetPriority>
}
 8000db2:	bf00      	nop
 8000db4:	3718      	adds	r7, #24
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}

08000dba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dba:	b580      	push	{r7, lr}
 8000dbc:	b082      	sub	sp, #8
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f7ff ff35 	bl	8000c38 <__NVIC_EnableIRQ>
}
 8000dce:	bf00      	nop
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}

08000dd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dd6:	b580      	push	{r7, lr}
 8000dd8:	b082      	sub	sp, #8
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dde:	6878      	ldr	r0, [r7, #4]
 8000de0:	f7ff ffa2 	bl	8000d28 <SysTick_Config>
 8000de4:	4603      	mov	r3, r0
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
	...

08000df0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b085      	sub	sp, #20
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d101      	bne.n	8000e06 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000e02:	2301      	movs	r3, #1
 8000e04:	e059      	b.n	8000eba <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	461a      	mov	r2, r3
 8000e0c:	4b2d      	ldr	r3, [pc, #180]	; (8000ec4 <HAL_DMA_Init+0xd4>)
 8000e0e:	429a      	cmp	r2, r3
 8000e10:	d80f      	bhi.n	8000e32 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	461a      	mov	r2, r3
 8000e18:	4b2b      	ldr	r3, [pc, #172]	; (8000ec8 <HAL_DMA_Init+0xd8>)
 8000e1a:	4413      	add	r3, r2
 8000e1c:	4a2b      	ldr	r2, [pc, #172]	; (8000ecc <HAL_DMA_Init+0xdc>)
 8000e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8000e22:	091b      	lsrs	r3, r3, #4
 8000e24:	009a      	lsls	r2, r3, #2
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4a28      	ldr	r2, [pc, #160]	; (8000ed0 <HAL_DMA_Init+0xe0>)
 8000e2e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000e30:	e00e      	b.n	8000e50 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	461a      	mov	r2, r3
 8000e38:	4b26      	ldr	r3, [pc, #152]	; (8000ed4 <HAL_DMA_Init+0xe4>)
 8000e3a:	4413      	add	r3, r2
 8000e3c:	4a23      	ldr	r2, [pc, #140]	; (8000ecc <HAL_DMA_Init+0xdc>)
 8000e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8000e42:	091b      	lsrs	r3, r3, #4
 8000e44:	009a      	lsls	r2, r3, #2
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4a22      	ldr	r2, [pc, #136]	; (8000ed8 <HAL_DMA_Init+0xe8>)
 8000e4e:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2202      	movs	r2, #2
 8000e54:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000e66:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000e6a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000e74:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	68db      	ldr	r3, [r3, #12]
 8000e7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e80:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	695b      	ldr	r3, [r3, #20]
 8000e86:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e8c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	69db      	ldr	r3, [r3, #28]
 8000e92:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000e94:	68fa      	ldr	r2, [r7, #12]
 8000e96:	4313      	orrs	r3, r2
 8000e98:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	68fa      	ldr	r2, [r7, #12]
 8000ea0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2201      	movs	r2, #1
 8000eac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000eb8:	2300      	movs	r3, #0
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3714      	adds	r7, #20
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bc80      	pop	{r7}
 8000ec2:	4770      	bx	lr
 8000ec4:	40020407 	.word	0x40020407
 8000ec8:	bffdfff8 	.word	0xbffdfff8
 8000ecc:	cccccccd 	.word	0xcccccccd
 8000ed0:	40020000 	.word	0x40020000
 8000ed4:	bffdfbf8 	.word	0xbffdfbf8
 8000ed8:	40020400 	.word	0x40020400

08000edc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b086      	sub	sp, #24
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	60f8      	str	r0, [r7, #12]
 8000ee4:	60b9      	str	r1, [r7, #8]
 8000ee6:	607a      	str	r2, [r7, #4]
 8000ee8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000eea:	2300      	movs	r3, #0
 8000eec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d101      	bne.n	8000efc <HAL_DMA_Start_IT+0x20>
 8000ef8:	2302      	movs	r3, #2
 8000efa:	e04a      	b.n	8000f92 <HAL_DMA_Start_IT+0xb6>
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	2201      	movs	r2, #1
 8000f00:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000f0a:	2b01      	cmp	r3, #1
 8000f0c:	d13a      	bne.n	8000f84 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	2202      	movs	r2, #2
 8000f12:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	2200      	movs	r2, #0
 8000f1a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f022 0201 	bic.w	r2, r2, #1
 8000f2a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	687a      	ldr	r2, [r7, #4]
 8000f30:	68b9      	ldr	r1, [r7, #8]
 8000f32:	68f8      	ldr	r0, [r7, #12]
 8000f34:	f000 fbb0 	bl	8001698 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d008      	beq.n	8000f52 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f042 020e 	orr.w	r2, r2, #14
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	e00f      	b.n	8000f72 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f022 0204 	bic.w	r2, r2, #4
 8000f60:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f042 020a 	orr.w	r2, r2, #10
 8000f70:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f042 0201 	orr.w	r2, r2, #1
 8000f80:	601a      	str	r2, [r3, #0]
 8000f82:	e005      	b.n	8000f90 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	2200      	movs	r2, #0
 8000f88:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000f90:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3718      	adds	r7, #24
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}

08000f9a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	b085      	sub	sp, #20
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000fac:	2b02      	cmp	r3, #2
 8000fae:	d008      	beq.n	8000fc2 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2204      	movs	r2, #4
 8000fb4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2200      	movs	r2, #0
 8000fba:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e020      	b.n	8001004 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f022 020e 	bic.w	r2, r2, #14
 8000fd0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f022 0201 	bic.w	r2, r2, #1
 8000fe0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fea:	2101      	movs	r1, #1
 8000fec:	fa01 f202 	lsl.w	r2, r1, r2
 8000ff0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001002:	7bfb      	ldrb	r3, [r7, #15]
}
 8001004:	4618      	mov	r0, r3
 8001006:	3714      	adds	r7, #20
 8001008:	46bd      	mov	sp, r7
 800100a:	bc80      	pop	{r7}
 800100c:	4770      	bx	lr
	...

08001010 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001018:	2300      	movs	r3, #0
 800101a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001022:	2b02      	cmp	r3, #2
 8001024:	d005      	beq.n	8001032 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2204      	movs	r2, #4
 800102a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800102c:	2301      	movs	r3, #1
 800102e:	73fb      	strb	r3, [r7, #15]
 8001030:	e0d6      	b.n	80011e0 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f022 020e 	bic.w	r2, r2, #14
 8001040:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f022 0201 	bic.w	r2, r2, #1
 8001050:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	461a      	mov	r2, r3
 8001058:	4b64      	ldr	r3, [pc, #400]	; (80011ec <HAL_DMA_Abort_IT+0x1dc>)
 800105a:	429a      	cmp	r2, r3
 800105c:	d958      	bls.n	8001110 <HAL_DMA_Abort_IT+0x100>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4a63      	ldr	r2, [pc, #396]	; (80011f0 <HAL_DMA_Abort_IT+0x1e0>)
 8001064:	4293      	cmp	r3, r2
 8001066:	d04f      	beq.n	8001108 <HAL_DMA_Abort_IT+0xf8>
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a61      	ldr	r2, [pc, #388]	; (80011f4 <HAL_DMA_Abort_IT+0x1e4>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d048      	beq.n	8001104 <HAL_DMA_Abort_IT+0xf4>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a60      	ldr	r2, [pc, #384]	; (80011f8 <HAL_DMA_Abort_IT+0x1e8>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d040      	beq.n	80010fe <HAL_DMA_Abort_IT+0xee>
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a5e      	ldr	r2, [pc, #376]	; (80011fc <HAL_DMA_Abort_IT+0x1ec>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d038      	beq.n	80010f8 <HAL_DMA_Abort_IT+0xe8>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a5d      	ldr	r2, [pc, #372]	; (8001200 <HAL_DMA_Abort_IT+0x1f0>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d030      	beq.n	80010f2 <HAL_DMA_Abort_IT+0xe2>
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a5b      	ldr	r2, [pc, #364]	; (8001204 <HAL_DMA_Abort_IT+0x1f4>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d028      	beq.n	80010ec <HAL_DMA_Abort_IT+0xdc>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4a53      	ldr	r2, [pc, #332]	; (80011ec <HAL_DMA_Abort_IT+0x1dc>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d020      	beq.n	80010e6 <HAL_DMA_Abort_IT+0xd6>
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a57      	ldr	r2, [pc, #348]	; (8001208 <HAL_DMA_Abort_IT+0x1f8>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d019      	beq.n	80010e2 <HAL_DMA_Abort_IT+0xd2>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4a56      	ldr	r2, [pc, #344]	; (800120c <HAL_DMA_Abort_IT+0x1fc>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d012      	beq.n	80010de <HAL_DMA_Abort_IT+0xce>
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a54      	ldr	r2, [pc, #336]	; (8001210 <HAL_DMA_Abort_IT+0x200>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d00a      	beq.n	80010d8 <HAL_DMA_Abort_IT+0xc8>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a53      	ldr	r2, [pc, #332]	; (8001214 <HAL_DMA_Abort_IT+0x204>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d102      	bne.n	80010d2 <HAL_DMA_Abort_IT+0xc2>
 80010cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010d0:	e01b      	b.n	800110a <HAL_DMA_Abort_IT+0xfa>
 80010d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010d6:	e018      	b.n	800110a <HAL_DMA_Abort_IT+0xfa>
 80010d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010dc:	e015      	b.n	800110a <HAL_DMA_Abort_IT+0xfa>
 80010de:	2310      	movs	r3, #16
 80010e0:	e013      	b.n	800110a <HAL_DMA_Abort_IT+0xfa>
 80010e2:	2301      	movs	r3, #1
 80010e4:	e011      	b.n	800110a <HAL_DMA_Abort_IT+0xfa>
 80010e6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80010ea:	e00e      	b.n	800110a <HAL_DMA_Abort_IT+0xfa>
 80010ec:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80010f0:	e00b      	b.n	800110a <HAL_DMA_Abort_IT+0xfa>
 80010f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010f6:	e008      	b.n	800110a <HAL_DMA_Abort_IT+0xfa>
 80010f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010fc:	e005      	b.n	800110a <HAL_DMA_Abort_IT+0xfa>
 80010fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001102:	e002      	b.n	800110a <HAL_DMA_Abort_IT+0xfa>
 8001104:	2310      	movs	r3, #16
 8001106:	e000      	b.n	800110a <HAL_DMA_Abort_IT+0xfa>
 8001108:	2301      	movs	r3, #1
 800110a:	4a43      	ldr	r2, [pc, #268]	; (8001218 <HAL_DMA_Abort_IT+0x208>)
 800110c:	6053      	str	r3, [r2, #4]
 800110e:	e057      	b.n	80011c0 <HAL_DMA_Abort_IT+0x1b0>
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a36      	ldr	r2, [pc, #216]	; (80011f0 <HAL_DMA_Abort_IT+0x1e0>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d04f      	beq.n	80011ba <HAL_DMA_Abort_IT+0x1aa>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4a35      	ldr	r2, [pc, #212]	; (80011f4 <HAL_DMA_Abort_IT+0x1e4>)
 8001120:	4293      	cmp	r3, r2
 8001122:	d048      	beq.n	80011b6 <HAL_DMA_Abort_IT+0x1a6>
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a33      	ldr	r2, [pc, #204]	; (80011f8 <HAL_DMA_Abort_IT+0x1e8>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d040      	beq.n	80011b0 <HAL_DMA_Abort_IT+0x1a0>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4a32      	ldr	r2, [pc, #200]	; (80011fc <HAL_DMA_Abort_IT+0x1ec>)
 8001134:	4293      	cmp	r3, r2
 8001136:	d038      	beq.n	80011aa <HAL_DMA_Abort_IT+0x19a>
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a30      	ldr	r2, [pc, #192]	; (8001200 <HAL_DMA_Abort_IT+0x1f0>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d030      	beq.n	80011a4 <HAL_DMA_Abort_IT+0x194>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4a2f      	ldr	r2, [pc, #188]	; (8001204 <HAL_DMA_Abort_IT+0x1f4>)
 8001148:	4293      	cmp	r3, r2
 800114a:	d028      	beq.n	800119e <HAL_DMA_Abort_IT+0x18e>
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a26      	ldr	r2, [pc, #152]	; (80011ec <HAL_DMA_Abort_IT+0x1dc>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d020      	beq.n	8001198 <HAL_DMA_Abort_IT+0x188>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a2b      	ldr	r2, [pc, #172]	; (8001208 <HAL_DMA_Abort_IT+0x1f8>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d019      	beq.n	8001194 <HAL_DMA_Abort_IT+0x184>
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a29      	ldr	r2, [pc, #164]	; (800120c <HAL_DMA_Abort_IT+0x1fc>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d012      	beq.n	8001190 <HAL_DMA_Abort_IT+0x180>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a28      	ldr	r2, [pc, #160]	; (8001210 <HAL_DMA_Abort_IT+0x200>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d00a      	beq.n	800118a <HAL_DMA_Abort_IT+0x17a>
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a26      	ldr	r2, [pc, #152]	; (8001214 <HAL_DMA_Abort_IT+0x204>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d102      	bne.n	8001184 <HAL_DMA_Abort_IT+0x174>
 800117e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001182:	e01b      	b.n	80011bc <HAL_DMA_Abort_IT+0x1ac>
 8001184:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001188:	e018      	b.n	80011bc <HAL_DMA_Abort_IT+0x1ac>
 800118a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800118e:	e015      	b.n	80011bc <HAL_DMA_Abort_IT+0x1ac>
 8001190:	2310      	movs	r3, #16
 8001192:	e013      	b.n	80011bc <HAL_DMA_Abort_IT+0x1ac>
 8001194:	2301      	movs	r3, #1
 8001196:	e011      	b.n	80011bc <HAL_DMA_Abort_IT+0x1ac>
 8001198:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800119c:	e00e      	b.n	80011bc <HAL_DMA_Abort_IT+0x1ac>
 800119e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80011a2:	e00b      	b.n	80011bc <HAL_DMA_Abort_IT+0x1ac>
 80011a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011a8:	e008      	b.n	80011bc <HAL_DMA_Abort_IT+0x1ac>
 80011aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011ae:	e005      	b.n	80011bc <HAL_DMA_Abort_IT+0x1ac>
 80011b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011b4:	e002      	b.n	80011bc <HAL_DMA_Abort_IT+0x1ac>
 80011b6:	2310      	movs	r3, #16
 80011b8:	e000      	b.n	80011bc <HAL_DMA_Abort_IT+0x1ac>
 80011ba:	2301      	movs	r3, #1
 80011bc:	4a17      	ldr	r2, [pc, #92]	; (800121c <HAL_DMA_Abort_IT+0x20c>)
 80011be:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2201      	movs	r2, #1
 80011c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2200      	movs	r2, #0
 80011cc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d003      	beq.n	80011e0 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011dc:	6878      	ldr	r0, [r7, #4]
 80011de:	4798      	blx	r3
    } 
  }
  return status;
 80011e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3710      	adds	r7, #16
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40020080 	.word	0x40020080
 80011f0:	40020008 	.word	0x40020008
 80011f4:	4002001c 	.word	0x4002001c
 80011f8:	40020030 	.word	0x40020030
 80011fc:	40020044 	.word	0x40020044
 8001200:	40020058 	.word	0x40020058
 8001204:	4002006c 	.word	0x4002006c
 8001208:	40020408 	.word	0x40020408
 800120c:	4002041c 	.word	0x4002041c
 8001210:	40020430 	.word	0x40020430
 8001214:	40020444 	.word	0x40020444
 8001218:	40020400 	.word	0x40020400
 800121c:	40020000 	.word	0x40020000

08001220 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123c:	2204      	movs	r2, #4
 800123e:	409a      	lsls	r2, r3
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	4013      	ands	r3, r2
 8001244:	2b00      	cmp	r3, #0
 8001246:	f000 80d6 	beq.w	80013f6 <HAL_DMA_IRQHandler+0x1d6>
 800124a:	68bb      	ldr	r3, [r7, #8]
 800124c:	f003 0304 	and.w	r3, r3, #4
 8001250:	2b00      	cmp	r3, #0
 8001252:	f000 80d0 	beq.w	80013f6 <HAL_DMA_IRQHandler+0x1d6>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f003 0320 	and.w	r3, r3, #32
 8001260:	2b00      	cmp	r3, #0
 8001262:	d107      	bne.n	8001274 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f022 0204 	bic.w	r2, r2, #4
 8001272:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	461a      	mov	r2, r3
 800127a:	4b9b      	ldr	r3, [pc, #620]	; (80014e8 <HAL_DMA_IRQHandler+0x2c8>)
 800127c:	429a      	cmp	r2, r3
 800127e:	d958      	bls.n	8001332 <HAL_DMA_IRQHandler+0x112>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a99      	ldr	r2, [pc, #612]	; (80014ec <HAL_DMA_IRQHandler+0x2cc>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d04f      	beq.n	800132a <HAL_DMA_IRQHandler+0x10a>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a98      	ldr	r2, [pc, #608]	; (80014f0 <HAL_DMA_IRQHandler+0x2d0>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d048      	beq.n	8001326 <HAL_DMA_IRQHandler+0x106>
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a96      	ldr	r2, [pc, #600]	; (80014f4 <HAL_DMA_IRQHandler+0x2d4>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d040      	beq.n	8001320 <HAL_DMA_IRQHandler+0x100>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a95      	ldr	r2, [pc, #596]	; (80014f8 <HAL_DMA_IRQHandler+0x2d8>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d038      	beq.n	800131a <HAL_DMA_IRQHandler+0xfa>
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a93      	ldr	r2, [pc, #588]	; (80014fc <HAL_DMA_IRQHandler+0x2dc>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d030      	beq.n	8001314 <HAL_DMA_IRQHandler+0xf4>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a92      	ldr	r2, [pc, #584]	; (8001500 <HAL_DMA_IRQHandler+0x2e0>)
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d028      	beq.n	800130e <HAL_DMA_IRQHandler+0xee>
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a89      	ldr	r2, [pc, #548]	; (80014e8 <HAL_DMA_IRQHandler+0x2c8>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d020      	beq.n	8001308 <HAL_DMA_IRQHandler+0xe8>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a8e      	ldr	r2, [pc, #568]	; (8001504 <HAL_DMA_IRQHandler+0x2e4>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d019      	beq.n	8001304 <HAL_DMA_IRQHandler+0xe4>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a8c      	ldr	r2, [pc, #560]	; (8001508 <HAL_DMA_IRQHandler+0x2e8>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d012      	beq.n	8001300 <HAL_DMA_IRQHandler+0xe0>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a8b      	ldr	r2, [pc, #556]	; (800150c <HAL_DMA_IRQHandler+0x2ec>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d00a      	beq.n	80012fa <HAL_DMA_IRQHandler+0xda>
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a89      	ldr	r2, [pc, #548]	; (8001510 <HAL_DMA_IRQHandler+0x2f0>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d102      	bne.n	80012f4 <HAL_DMA_IRQHandler+0xd4>
 80012ee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80012f2:	e01b      	b.n	800132c <HAL_DMA_IRQHandler+0x10c>
 80012f4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80012f8:	e018      	b.n	800132c <HAL_DMA_IRQHandler+0x10c>
 80012fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012fe:	e015      	b.n	800132c <HAL_DMA_IRQHandler+0x10c>
 8001300:	2340      	movs	r3, #64	; 0x40
 8001302:	e013      	b.n	800132c <HAL_DMA_IRQHandler+0x10c>
 8001304:	2304      	movs	r3, #4
 8001306:	e011      	b.n	800132c <HAL_DMA_IRQHandler+0x10c>
 8001308:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800130c:	e00e      	b.n	800132c <HAL_DMA_IRQHandler+0x10c>
 800130e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001312:	e00b      	b.n	800132c <HAL_DMA_IRQHandler+0x10c>
 8001314:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001318:	e008      	b.n	800132c <HAL_DMA_IRQHandler+0x10c>
 800131a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800131e:	e005      	b.n	800132c <HAL_DMA_IRQHandler+0x10c>
 8001320:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001324:	e002      	b.n	800132c <HAL_DMA_IRQHandler+0x10c>
 8001326:	2340      	movs	r3, #64	; 0x40
 8001328:	e000      	b.n	800132c <HAL_DMA_IRQHandler+0x10c>
 800132a:	2304      	movs	r3, #4
 800132c:	4a79      	ldr	r2, [pc, #484]	; (8001514 <HAL_DMA_IRQHandler+0x2f4>)
 800132e:	6053      	str	r3, [r2, #4]
 8001330:	e057      	b.n	80013e2 <HAL_DMA_IRQHandler+0x1c2>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a6d      	ldr	r2, [pc, #436]	; (80014ec <HAL_DMA_IRQHandler+0x2cc>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d04f      	beq.n	80013dc <HAL_DMA_IRQHandler+0x1bc>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a6b      	ldr	r2, [pc, #428]	; (80014f0 <HAL_DMA_IRQHandler+0x2d0>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d048      	beq.n	80013d8 <HAL_DMA_IRQHandler+0x1b8>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a6a      	ldr	r2, [pc, #424]	; (80014f4 <HAL_DMA_IRQHandler+0x2d4>)
 800134c:	4293      	cmp	r3, r2
 800134e:	d040      	beq.n	80013d2 <HAL_DMA_IRQHandler+0x1b2>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a68      	ldr	r2, [pc, #416]	; (80014f8 <HAL_DMA_IRQHandler+0x2d8>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d038      	beq.n	80013cc <HAL_DMA_IRQHandler+0x1ac>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a67      	ldr	r2, [pc, #412]	; (80014fc <HAL_DMA_IRQHandler+0x2dc>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d030      	beq.n	80013c6 <HAL_DMA_IRQHandler+0x1a6>
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a65      	ldr	r2, [pc, #404]	; (8001500 <HAL_DMA_IRQHandler+0x2e0>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d028      	beq.n	80013c0 <HAL_DMA_IRQHandler+0x1a0>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a5d      	ldr	r2, [pc, #372]	; (80014e8 <HAL_DMA_IRQHandler+0x2c8>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d020      	beq.n	80013ba <HAL_DMA_IRQHandler+0x19a>
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a61      	ldr	r2, [pc, #388]	; (8001504 <HAL_DMA_IRQHandler+0x2e4>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d019      	beq.n	80013b6 <HAL_DMA_IRQHandler+0x196>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a60      	ldr	r2, [pc, #384]	; (8001508 <HAL_DMA_IRQHandler+0x2e8>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d012      	beq.n	80013b2 <HAL_DMA_IRQHandler+0x192>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a5e      	ldr	r2, [pc, #376]	; (800150c <HAL_DMA_IRQHandler+0x2ec>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d00a      	beq.n	80013ac <HAL_DMA_IRQHandler+0x18c>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a5d      	ldr	r2, [pc, #372]	; (8001510 <HAL_DMA_IRQHandler+0x2f0>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d102      	bne.n	80013a6 <HAL_DMA_IRQHandler+0x186>
 80013a0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80013a4:	e01b      	b.n	80013de <HAL_DMA_IRQHandler+0x1be>
 80013a6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80013aa:	e018      	b.n	80013de <HAL_DMA_IRQHandler+0x1be>
 80013ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013b0:	e015      	b.n	80013de <HAL_DMA_IRQHandler+0x1be>
 80013b2:	2340      	movs	r3, #64	; 0x40
 80013b4:	e013      	b.n	80013de <HAL_DMA_IRQHandler+0x1be>
 80013b6:	2304      	movs	r3, #4
 80013b8:	e011      	b.n	80013de <HAL_DMA_IRQHandler+0x1be>
 80013ba:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80013be:	e00e      	b.n	80013de <HAL_DMA_IRQHandler+0x1be>
 80013c0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80013c4:	e00b      	b.n	80013de <HAL_DMA_IRQHandler+0x1be>
 80013c6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80013ca:	e008      	b.n	80013de <HAL_DMA_IRQHandler+0x1be>
 80013cc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80013d0:	e005      	b.n	80013de <HAL_DMA_IRQHandler+0x1be>
 80013d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013d6:	e002      	b.n	80013de <HAL_DMA_IRQHandler+0x1be>
 80013d8:	2340      	movs	r3, #64	; 0x40
 80013da:	e000      	b.n	80013de <HAL_DMA_IRQHandler+0x1be>
 80013dc:	2304      	movs	r3, #4
 80013de:	4a4e      	ldr	r2, [pc, #312]	; (8001518 <HAL_DMA_IRQHandler+0x2f8>)
 80013e0:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	f000 8136 	beq.w	8001658 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013f0:	6878      	ldr	r0, [r7, #4]
 80013f2:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80013f4:	e130      	b.n	8001658 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fa:	2202      	movs	r2, #2
 80013fc:	409a      	lsls	r2, r3
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	4013      	ands	r3, r2
 8001402:	2b00      	cmp	r3, #0
 8001404:	f000 80f8 	beq.w	80015f8 <HAL_DMA_IRQHandler+0x3d8>
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	f003 0302 	and.w	r3, r3, #2
 800140e:	2b00      	cmp	r3, #0
 8001410:	f000 80f2 	beq.w	80015f8 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f003 0320 	and.w	r3, r3, #32
 800141e:	2b00      	cmp	r3, #0
 8001420:	d10b      	bne.n	800143a <HAL_DMA_IRQHandler+0x21a>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f022 020a 	bic.w	r2, r2, #10
 8001430:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2201      	movs	r2, #1
 8001436:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	461a      	mov	r2, r3
 8001440:	4b29      	ldr	r3, [pc, #164]	; (80014e8 <HAL_DMA_IRQHandler+0x2c8>)
 8001442:	429a      	cmp	r2, r3
 8001444:	d973      	bls.n	800152e <HAL_DMA_IRQHandler+0x30e>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a28      	ldr	r2, [pc, #160]	; (80014ec <HAL_DMA_IRQHandler+0x2cc>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d06a      	beq.n	8001526 <HAL_DMA_IRQHandler+0x306>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a26      	ldr	r2, [pc, #152]	; (80014f0 <HAL_DMA_IRQHandler+0x2d0>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d063      	beq.n	8001522 <HAL_DMA_IRQHandler+0x302>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a25      	ldr	r2, [pc, #148]	; (80014f4 <HAL_DMA_IRQHandler+0x2d4>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d05b      	beq.n	800151c <HAL_DMA_IRQHandler+0x2fc>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a23      	ldr	r2, [pc, #140]	; (80014f8 <HAL_DMA_IRQHandler+0x2d8>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d038      	beq.n	80014e0 <HAL_DMA_IRQHandler+0x2c0>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a22      	ldr	r2, [pc, #136]	; (80014fc <HAL_DMA_IRQHandler+0x2dc>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d030      	beq.n	80014da <HAL_DMA_IRQHandler+0x2ba>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a20      	ldr	r2, [pc, #128]	; (8001500 <HAL_DMA_IRQHandler+0x2e0>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d028      	beq.n	80014d4 <HAL_DMA_IRQHandler+0x2b4>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a18      	ldr	r2, [pc, #96]	; (80014e8 <HAL_DMA_IRQHandler+0x2c8>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d020      	beq.n	80014ce <HAL_DMA_IRQHandler+0x2ae>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a1c      	ldr	r2, [pc, #112]	; (8001504 <HAL_DMA_IRQHandler+0x2e4>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d019      	beq.n	80014ca <HAL_DMA_IRQHandler+0x2aa>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a1b      	ldr	r2, [pc, #108]	; (8001508 <HAL_DMA_IRQHandler+0x2e8>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d012      	beq.n	80014c6 <HAL_DMA_IRQHandler+0x2a6>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a19      	ldr	r2, [pc, #100]	; (800150c <HAL_DMA_IRQHandler+0x2ec>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d00a      	beq.n	80014c0 <HAL_DMA_IRQHandler+0x2a0>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a18      	ldr	r2, [pc, #96]	; (8001510 <HAL_DMA_IRQHandler+0x2f0>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d102      	bne.n	80014ba <HAL_DMA_IRQHandler+0x29a>
 80014b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014b8:	e036      	b.n	8001528 <HAL_DMA_IRQHandler+0x308>
 80014ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014be:	e033      	b.n	8001528 <HAL_DMA_IRQHandler+0x308>
 80014c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014c4:	e030      	b.n	8001528 <HAL_DMA_IRQHandler+0x308>
 80014c6:	2320      	movs	r3, #32
 80014c8:	e02e      	b.n	8001528 <HAL_DMA_IRQHandler+0x308>
 80014ca:	2302      	movs	r3, #2
 80014cc:	e02c      	b.n	8001528 <HAL_DMA_IRQHandler+0x308>
 80014ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80014d2:	e029      	b.n	8001528 <HAL_DMA_IRQHandler+0x308>
 80014d4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80014d8:	e026      	b.n	8001528 <HAL_DMA_IRQHandler+0x308>
 80014da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014de:	e023      	b.n	8001528 <HAL_DMA_IRQHandler+0x308>
 80014e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014e4:	e020      	b.n	8001528 <HAL_DMA_IRQHandler+0x308>
 80014e6:	bf00      	nop
 80014e8:	40020080 	.word	0x40020080
 80014ec:	40020008 	.word	0x40020008
 80014f0:	4002001c 	.word	0x4002001c
 80014f4:	40020030 	.word	0x40020030
 80014f8:	40020044 	.word	0x40020044
 80014fc:	40020058 	.word	0x40020058
 8001500:	4002006c 	.word	0x4002006c
 8001504:	40020408 	.word	0x40020408
 8001508:	4002041c 	.word	0x4002041c
 800150c:	40020430 	.word	0x40020430
 8001510:	40020444 	.word	0x40020444
 8001514:	40020400 	.word	0x40020400
 8001518:	40020000 	.word	0x40020000
 800151c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001520:	e002      	b.n	8001528 <HAL_DMA_IRQHandler+0x308>
 8001522:	2320      	movs	r3, #32
 8001524:	e000      	b.n	8001528 <HAL_DMA_IRQHandler+0x308>
 8001526:	2302      	movs	r3, #2
 8001528:	4a4e      	ldr	r2, [pc, #312]	; (8001664 <HAL_DMA_IRQHandler+0x444>)
 800152a:	6053      	str	r3, [r2, #4]
 800152c:	e057      	b.n	80015de <HAL_DMA_IRQHandler+0x3be>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a4d      	ldr	r2, [pc, #308]	; (8001668 <HAL_DMA_IRQHandler+0x448>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d04f      	beq.n	80015d8 <HAL_DMA_IRQHandler+0x3b8>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a4b      	ldr	r2, [pc, #300]	; (800166c <HAL_DMA_IRQHandler+0x44c>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d048      	beq.n	80015d4 <HAL_DMA_IRQHandler+0x3b4>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a4a      	ldr	r2, [pc, #296]	; (8001670 <HAL_DMA_IRQHandler+0x450>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d040      	beq.n	80015ce <HAL_DMA_IRQHandler+0x3ae>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a48      	ldr	r2, [pc, #288]	; (8001674 <HAL_DMA_IRQHandler+0x454>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d038      	beq.n	80015c8 <HAL_DMA_IRQHandler+0x3a8>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a47      	ldr	r2, [pc, #284]	; (8001678 <HAL_DMA_IRQHandler+0x458>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d030      	beq.n	80015c2 <HAL_DMA_IRQHandler+0x3a2>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a45      	ldr	r2, [pc, #276]	; (800167c <HAL_DMA_IRQHandler+0x45c>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d028      	beq.n	80015bc <HAL_DMA_IRQHandler+0x39c>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a44      	ldr	r2, [pc, #272]	; (8001680 <HAL_DMA_IRQHandler+0x460>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d020      	beq.n	80015b6 <HAL_DMA_IRQHandler+0x396>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a42      	ldr	r2, [pc, #264]	; (8001684 <HAL_DMA_IRQHandler+0x464>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d019      	beq.n	80015b2 <HAL_DMA_IRQHandler+0x392>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a41      	ldr	r2, [pc, #260]	; (8001688 <HAL_DMA_IRQHandler+0x468>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d012      	beq.n	80015ae <HAL_DMA_IRQHandler+0x38e>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a3f      	ldr	r2, [pc, #252]	; (800168c <HAL_DMA_IRQHandler+0x46c>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d00a      	beq.n	80015a8 <HAL_DMA_IRQHandler+0x388>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a3e      	ldr	r2, [pc, #248]	; (8001690 <HAL_DMA_IRQHandler+0x470>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d102      	bne.n	80015a2 <HAL_DMA_IRQHandler+0x382>
 800159c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015a0:	e01b      	b.n	80015da <HAL_DMA_IRQHandler+0x3ba>
 80015a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015a6:	e018      	b.n	80015da <HAL_DMA_IRQHandler+0x3ba>
 80015a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015ac:	e015      	b.n	80015da <HAL_DMA_IRQHandler+0x3ba>
 80015ae:	2320      	movs	r3, #32
 80015b0:	e013      	b.n	80015da <HAL_DMA_IRQHandler+0x3ba>
 80015b2:	2302      	movs	r3, #2
 80015b4:	e011      	b.n	80015da <HAL_DMA_IRQHandler+0x3ba>
 80015b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80015ba:	e00e      	b.n	80015da <HAL_DMA_IRQHandler+0x3ba>
 80015bc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80015c0:	e00b      	b.n	80015da <HAL_DMA_IRQHandler+0x3ba>
 80015c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015c6:	e008      	b.n	80015da <HAL_DMA_IRQHandler+0x3ba>
 80015c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015cc:	e005      	b.n	80015da <HAL_DMA_IRQHandler+0x3ba>
 80015ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015d2:	e002      	b.n	80015da <HAL_DMA_IRQHandler+0x3ba>
 80015d4:	2320      	movs	r3, #32
 80015d6:	e000      	b.n	80015da <HAL_DMA_IRQHandler+0x3ba>
 80015d8:	2302      	movs	r3, #2
 80015da:	4a2e      	ldr	r2, [pc, #184]	; (8001694 <HAL_DMA_IRQHandler+0x474>)
 80015dc:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2200      	movs	r2, #0
 80015e2:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d034      	beq.n	8001658 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015f2:	6878      	ldr	r0, [r7, #4]
 80015f4:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80015f6:	e02f      	b.n	8001658 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fc:	2208      	movs	r2, #8
 80015fe:	409a      	lsls	r2, r3
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	4013      	ands	r3, r2
 8001604:	2b00      	cmp	r3, #0
 8001606:	d028      	beq.n	800165a <HAL_DMA_IRQHandler+0x43a>
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	f003 0308 	and.w	r3, r3, #8
 800160e:	2b00      	cmp	r3, #0
 8001610:	d023      	beq.n	800165a <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f022 020e 	bic.w	r2, r2, #14
 8001620:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800162a:	2101      	movs	r1, #1
 800162c:	fa01 f202 	lsl.w	r2, r1, r2
 8001630:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2201      	movs	r2, #1
 8001636:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2201      	movs	r2, #1
 800163c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2200      	movs	r2, #0
 8001644:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164c:	2b00      	cmp	r3, #0
 800164e:	d004      	beq.n	800165a <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001654:	6878      	ldr	r0, [r7, #4]
 8001656:	4798      	blx	r3
    }
  }
  return;
 8001658:	bf00      	nop
 800165a:	bf00      	nop
}
 800165c:	3710      	adds	r7, #16
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	40020400 	.word	0x40020400
 8001668:	40020008 	.word	0x40020008
 800166c:	4002001c 	.word	0x4002001c
 8001670:	40020030 	.word	0x40020030
 8001674:	40020044 	.word	0x40020044
 8001678:	40020058 	.word	0x40020058
 800167c:	4002006c 	.word	0x4002006c
 8001680:	40020080 	.word	0x40020080
 8001684:	40020408 	.word	0x40020408
 8001688:	4002041c 	.word	0x4002041c
 800168c:	40020430 	.word	0x40020430
 8001690:	40020444 	.word	0x40020444
 8001694:	40020000 	.word	0x40020000

08001698 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001698:	b480      	push	{r7}
 800169a:	b085      	sub	sp, #20
 800169c:	af00      	add	r7, sp, #0
 800169e:	60f8      	str	r0, [r7, #12]
 80016a0:	60b9      	str	r1, [r7, #8]
 80016a2:	607a      	str	r2, [r7, #4]
 80016a4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016ae:	2101      	movs	r1, #1
 80016b0:	fa01 f202 	lsl.w	r2, r1, r2
 80016b4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	683a      	ldr	r2, [r7, #0]
 80016bc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	2b10      	cmp	r3, #16
 80016c4:	d108      	bne.n	80016d8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	68ba      	ldr	r2, [r7, #8]
 80016d4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80016d6:	e007      	b.n	80016e8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	68ba      	ldr	r2, [r7, #8]
 80016de:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	60da      	str	r2, [r3, #12]
}
 80016e8:	bf00      	nop
 80016ea:	3714      	adds	r7, #20
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bc80      	pop	{r7}
 80016f0:	4770      	bx	lr
	...

080016f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b08b      	sub	sp, #44	; 0x2c
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016fe:	2300      	movs	r3, #0
 8001700:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001702:	2300      	movs	r3, #0
 8001704:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001706:	e133      	b.n	8001970 <HAL_GPIO_Init+0x27c>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001708:	2201      	movs	r2, #1
 800170a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170c:	fa02 f303 	lsl.w	r3, r2, r3
 8001710:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	69fa      	ldr	r2, [r7, #28]
 8001718:	4013      	ands	r3, r2
 800171a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800171c:	69ba      	ldr	r2, [r7, #24]
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	429a      	cmp	r2, r3
 8001722:	f040 8122 	bne.w	800196a <HAL_GPIO_Init+0x276>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	2b12      	cmp	r3, #18
 800172c:	d034      	beq.n	8001798 <HAL_GPIO_Init+0xa4>
 800172e:	2b12      	cmp	r3, #18
 8001730:	d80d      	bhi.n	800174e <HAL_GPIO_Init+0x5a>
 8001732:	2b02      	cmp	r3, #2
 8001734:	d02b      	beq.n	800178e <HAL_GPIO_Init+0x9a>
 8001736:	2b02      	cmp	r3, #2
 8001738:	d804      	bhi.n	8001744 <HAL_GPIO_Init+0x50>
 800173a:	2b00      	cmp	r3, #0
 800173c:	d031      	beq.n	80017a2 <HAL_GPIO_Init+0xae>
 800173e:	2b01      	cmp	r3, #1
 8001740:	d01c      	beq.n	800177c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001742:	e048      	b.n	80017d6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001744:	2b03      	cmp	r3, #3
 8001746:	d043      	beq.n	80017d0 <HAL_GPIO_Init+0xdc>
 8001748:	2b11      	cmp	r3, #17
 800174a:	d01b      	beq.n	8001784 <HAL_GPIO_Init+0x90>
          break;
 800174c:	e043      	b.n	80017d6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800174e:	4a8f      	ldr	r2, [pc, #572]	; (800198c <HAL_GPIO_Init+0x298>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d026      	beq.n	80017a2 <HAL_GPIO_Init+0xae>
 8001754:	4a8d      	ldr	r2, [pc, #564]	; (800198c <HAL_GPIO_Init+0x298>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d806      	bhi.n	8001768 <HAL_GPIO_Init+0x74>
 800175a:	4a8d      	ldr	r2, [pc, #564]	; (8001990 <HAL_GPIO_Init+0x29c>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d020      	beq.n	80017a2 <HAL_GPIO_Init+0xae>
 8001760:	4a8c      	ldr	r2, [pc, #560]	; (8001994 <HAL_GPIO_Init+0x2a0>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d01d      	beq.n	80017a2 <HAL_GPIO_Init+0xae>
          break;
 8001766:	e036      	b.n	80017d6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001768:	4a8b      	ldr	r2, [pc, #556]	; (8001998 <HAL_GPIO_Init+0x2a4>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d019      	beq.n	80017a2 <HAL_GPIO_Init+0xae>
 800176e:	4a8b      	ldr	r2, [pc, #556]	; (800199c <HAL_GPIO_Init+0x2a8>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d016      	beq.n	80017a2 <HAL_GPIO_Init+0xae>
 8001774:	4a8a      	ldr	r2, [pc, #552]	; (80019a0 <HAL_GPIO_Init+0x2ac>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d013      	beq.n	80017a2 <HAL_GPIO_Init+0xae>
          break;
 800177a:	e02c      	b.n	80017d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	623b      	str	r3, [r7, #32]
          break;
 8001782:	e028      	b.n	80017d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	3304      	adds	r3, #4
 800178a:	623b      	str	r3, [r7, #32]
          break;
 800178c:	e023      	b.n	80017d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	68db      	ldr	r3, [r3, #12]
 8001792:	3308      	adds	r3, #8
 8001794:	623b      	str	r3, [r7, #32]
          break;
 8001796:	e01e      	b.n	80017d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	330c      	adds	r3, #12
 800179e:	623b      	str	r3, [r7, #32]
          break;
 80017a0:	e019      	b.n	80017d6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d102      	bne.n	80017b0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80017aa:	2304      	movs	r3, #4
 80017ac:	623b      	str	r3, [r7, #32]
          break;
 80017ae:	e012      	b.n	80017d6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d105      	bne.n	80017c4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017b8:	2308      	movs	r3, #8
 80017ba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	69fa      	ldr	r2, [r7, #28]
 80017c0:	611a      	str	r2, [r3, #16]
          break;
 80017c2:	e008      	b.n	80017d6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017c4:	2308      	movs	r3, #8
 80017c6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	69fa      	ldr	r2, [r7, #28]
 80017cc:	615a      	str	r2, [r3, #20]
          break;
 80017ce:	e002      	b.n	80017d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80017d0:	2300      	movs	r3, #0
 80017d2:	623b      	str	r3, [r7, #32]
          break;
 80017d4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80017d6:	69bb      	ldr	r3, [r7, #24]
 80017d8:	2bff      	cmp	r3, #255	; 0xff
 80017da:	d801      	bhi.n	80017e0 <HAL_GPIO_Init+0xec>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	e001      	b.n	80017e4 <HAL_GPIO_Init+0xf0>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	3304      	adds	r3, #4
 80017e4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80017e6:	69bb      	ldr	r3, [r7, #24]
 80017e8:	2bff      	cmp	r3, #255	; 0xff
 80017ea:	d802      	bhi.n	80017f2 <HAL_GPIO_Init+0xfe>
 80017ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	e002      	b.n	80017f8 <HAL_GPIO_Init+0x104>
 80017f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f4:	3b08      	subs	r3, #8
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	210f      	movs	r1, #15
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	fa01 f303 	lsl.w	r3, r1, r3
 8001806:	43db      	mvns	r3, r3
 8001808:	401a      	ands	r2, r3
 800180a:	6a39      	ldr	r1, [r7, #32]
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	fa01 f303 	lsl.w	r3, r1, r3
 8001812:	431a      	orrs	r2, r3
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001820:	2b00      	cmp	r3, #0
 8001822:	f000 80a2 	beq.w	800196a <HAL_GPIO_Init+0x276>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001826:	4b5f      	ldr	r3, [pc, #380]	; (80019a4 <HAL_GPIO_Init+0x2b0>)
 8001828:	699b      	ldr	r3, [r3, #24]
 800182a:	4a5e      	ldr	r2, [pc, #376]	; (80019a4 <HAL_GPIO_Init+0x2b0>)
 800182c:	f043 0301 	orr.w	r3, r3, #1
 8001830:	6193      	str	r3, [r2, #24]
 8001832:	4b5c      	ldr	r3, [pc, #368]	; (80019a4 <HAL_GPIO_Init+0x2b0>)
 8001834:	699b      	ldr	r3, [r3, #24]
 8001836:	f003 0301 	and.w	r3, r3, #1
 800183a:	60bb      	str	r3, [r7, #8]
 800183c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800183e:	4a5a      	ldr	r2, [pc, #360]	; (80019a8 <HAL_GPIO_Init+0x2b4>)
 8001840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001842:	089b      	lsrs	r3, r3, #2
 8001844:	3302      	adds	r3, #2
 8001846:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800184a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800184c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184e:	f003 0303 	and.w	r3, r3, #3
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	220f      	movs	r2, #15
 8001856:	fa02 f303 	lsl.w	r3, r2, r3
 800185a:	43db      	mvns	r3, r3
 800185c:	68fa      	ldr	r2, [r7, #12]
 800185e:	4013      	ands	r3, r2
 8001860:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4a51      	ldr	r2, [pc, #324]	; (80019ac <HAL_GPIO_Init+0x2b8>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d01f      	beq.n	80018aa <HAL_GPIO_Init+0x1b6>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4a50      	ldr	r2, [pc, #320]	; (80019b0 <HAL_GPIO_Init+0x2bc>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d019      	beq.n	80018a6 <HAL_GPIO_Init+0x1b2>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4a4f      	ldr	r2, [pc, #316]	; (80019b4 <HAL_GPIO_Init+0x2c0>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d013      	beq.n	80018a2 <HAL_GPIO_Init+0x1ae>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4a4e      	ldr	r2, [pc, #312]	; (80019b8 <HAL_GPIO_Init+0x2c4>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d00d      	beq.n	800189e <HAL_GPIO_Init+0x1aa>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4a4d      	ldr	r2, [pc, #308]	; (80019bc <HAL_GPIO_Init+0x2c8>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d007      	beq.n	800189a <HAL_GPIO_Init+0x1a6>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4a4c      	ldr	r2, [pc, #304]	; (80019c0 <HAL_GPIO_Init+0x2cc>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d101      	bne.n	8001896 <HAL_GPIO_Init+0x1a2>
 8001892:	2305      	movs	r3, #5
 8001894:	e00a      	b.n	80018ac <HAL_GPIO_Init+0x1b8>
 8001896:	2306      	movs	r3, #6
 8001898:	e008      	b.n	80018ac <HAL_GPIO_Init+0x1b8>
 800189a:	2304      	movs	r3, #4
 800189c:	e006      	b.n	80018ac <HAL_GPIO_Init+0x1b8>
 800189e:	2303      	movs	r3, #3
 80018a0:	e004      	b.n	80018ac <HAL_GPIO_Init+0x1b8>
 80018a2:	2302      	movs	r3, #2
 80018a4:	e002      	b.n	80018ac <HAL_GPIO_Init+0x1b8>
 80018a6:	2301      	movs	r3, #1
 80018a8:	e000      	b.n	80018ac <HAL_GPIO_Init+0x1b8>
 80018aa:	2300      	movs	r3, #0
 80018ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018ae:	f002 0203 	and.w	r2, r2, #3
 80018b2:	0092      	lsls	r2, r2, #2
 80018b4:	4093      	lsls	r3, r2
 80018b6:	68fa      	ldr	r2, [r7, #12]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80018bc:	493a      	ldr	r1, [pc, #232]	; (80019a8 <HAL_GPIO_Init+0x2b4>)
 80018be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c0:	089b      	lsrs	r3, r3, #2
 80018c2:	3302      	adds	r3, #2
 80018c4:	68fa      	ldr	r2, [r7, #12]
 80018c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d006      	beq.n	80018e4 <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80018d6:	4b3b      	ldr	r3, [pc, #236]	; (80019c4 <HAL_GPIO_Init+0x2d0>)
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	493a      	ldr	r1, [pc, #232]	; (80019c4 <HAL_GPIO_Init+0x2d0>)
 80018dc:	69bb      	ldr	r3, [r7, #24]
 80018de:	4313      	orrs	r3, r2
 80018e0:	600b      	str	r3, [r1, #0]
 80018e2:	e006      	b.n	80018f2 <HAL_GPIO_Init+0x1fe>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80018e4:	4b37      	ldr	r3, [pc, #220]	; (80019c4 <HAL_GPIO_Init+0x2d0>)
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	69bb      	ldr	r3, [r7, #24]
 80018ea:	43db      	mvns	r3, r3
 80018ec:	4935      	ldr	r1, [pc, #212]	; (80019c4 <HAL_GPIO_Init+0x2d0>)
 80018ee:	4013      	ands	r3, r2
 80018f0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d006      	beq.n	800190c <HAL_GPIO_Init+0x218>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80018fe:	4b31      	ldr	r3, [pc, #196]	; (80019c4 <HAL_GPIO_Init+0x2d0>)
 8001900:	685a      	ldr	r2, [r3, #4]
 8001902:	4930      	ldr	r1, [pc, #192]	; (80019c4 <HAL_GPIO_Init+0x2d0>)
 8001904:	69bb      	ldr	r3, [r7, #24]
 8001906:	4313      	orrs	r3, r2
 8001908:	604b      	str	r3, [r1, #4]
 800190a:	e006      	b.n	800191a <HAL_GPIO_Init+0x226>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800190c:	4b2d      	ldr	r3, [pc, #180]	; (80019c4 <HAL_GPIO_Init+0x2d0>)
 800190e:	685a      	ldr	r2, [r3, #4]
 8001910:	69bb      	ldr	r3, [r7, #24]
 8001912:	43db      	mvns	r3, r3
 8001914:	492b      	ldr	r1, [pc, #172]	; (80019c4 <HAL_GPIO_Init+0x2d0>)
 8001916:	4013      	ands	r3, r2
 8001918:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d006      	beq.n	8001934 <HAL_GPIO_Init+0x240>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001926:	4b27      	ldr	r3, [pc, #156]	; (80019c4 <HAL_GPIO_Init+0x2d0>)
 8001928:	689a      	ldr	r2, [r3, #8]
 800192a:	4926      	ldr	r1, [pc, #152]	; (80019c4 <HAL_GPIO_Init+0x2d0>)
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	4313      	orrs	r3, r2
 8001930:	608b      	str	r3, [r1, #8]
 8001932:	e006      	b.n	8001942 <HAL_GPIO_Init+0x24e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001934:	4b23      	ldr	r3, [pc, #140]	; (80019c4 <HAL_GPIO_Init+0x2d0>)
 8001936:	689a      	ldr	r2, [r3, #8]
 8001938:	69bb      	ldr	r3, [r7, #24]
 800193a:	43db      	mvns	r3, r3
 800193c:	4921      	ldr	r1, [pc, #132]	; (80019c4 <HAL_GPIO_Init+0x2d0>)
 800193e:	4013      	ands	r3, r2
 8001940:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d006      	beq.n	800195c <HAL_GPIO_Init+0x268>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800194e:	4b1d      	ldr	r3, [pc, #116]	; (80019c4 <HAL_GPIO_Init+0x2d0>)
 8001950:	68da      	ldr	r2, [r3, #12]
 8001952:	491c      	ldr	r1, [pc, #112]	; (80019c4 <HAL_GPIO_Init+0x2d0>)
 8001954:	69bb      	ldr	r3, [r7, #24]
 8001956:	4313      	orrs	r3, r2
 8001958:	60cb      	str	r3, [r1, #12]
 800195a:	e006      	b.n	800196a <HAL_GPIO_Init+0x276>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800195c:	4b19      	ldr	r3, [pc, #100]	; (80019c4 <HAL_GPIO_Init+0x2d0>)
 800195e:	68da      	ldr	r2, [r3, #12]
 8001960:	69bb      	ldr	r3, [r7, #24]
 8001962:	43db      	mvns	r3, r3
 8001964:	4917      	ldr	r1, [pc, #92]	; (80019c4 <HAL_GPIO_Init+0x2d0>)
 8001966:	4013      	ands	r3, r2
 8001968:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800196a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196c:	3301      	adds	r3, #1
 800196e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001976:	fa22 f303 	lsr.w	r3, r2, r3
 800197a:	2b00      	cmp	r3, #0
 800197c:	f47f aec4 	bne.w	8001708 <HAL_GPIO_Init+0x14>
  }
}
 8001980:	bf00      	nop
 8001982:	372c      	adds	r7, #44	; 0x2c
 8001984:	46bd      	mov	sp, r7
 8001986:	bc80      	pop	{r7}
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	10210000 	.word	0x10210000
 8001990:	10110000 	.word	0x10110000
 8001994:	10120000 	.word	0x10120000
 8001998:	10310000 	.word	0x10310000
 800199c:	10320000 	.word	0x10320000
 80019a0:	10220000 	.word	0x10220000
 80019a4:	40021000 	.word	0x40021000
 80019a8:	40010000 	.word	0x40010000
 80019ac:	40010800 	.word	0x40010800
 80019b0:	40010c00 	.word	0x40010c00
 80019b4:	40011000 	.word	0x40011000
 80019b8:	40011400 	.word	0x40011400
 80019bc:	40011800 	.word	0x40011800
 80019c0:	40011c00 	.word	0x40011c00
 80019c4:	40010400 	.word	0x40010400

080019c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4603      	mov	r3, r0
 80019d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80019d2:	4b08      	ldr	r3, [pc, #32]	; (80019f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019d4:	695a      	ldr	r2, [r3, #20]
 80019d6:	88fb      	ldrh	r3, [r7, #6]
 80019d8:	4013      	ands	r3, r2
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d006      	beq.n	80019ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80019de:	4a05      	ldr	r2, [pc, #20]	; (80019f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019e0:	88fb      	ldrh	r3, [r7, #6]
 80019e2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80019e4:	88fb      	ldrh	r3, [r7, #6]
 80019e6:	4618      	mov	r0, r3
 80019e8:	f000 f806 	bl	80019f8 <HAL_GPIO_EXTI_Callback>
  }
}
 80019ec:	bf00      	nop
 80019ee:	3708      	adds	r7, #8
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	40010400 	.word	0x40010400

080019f8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	4603      	mov	r3, r0
 8001a00:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001a02:	bf00      	nop
 8001a04:	370c      	adds	r7, #12
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bc80      	pop	{r7}
 8001a0a:	4770      	bx	lr

08001a0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b086      	sub	sp, #24
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d101      	bne.n	8001a1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e26c      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0301 	and.w	r3, r3, #1
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	f000 8087 	beq.w	8001b3a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a2c:	4b92      	ldr	r3, [pc, #584]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f003 030c 	and.w	r3, r3, #12
 8001a34:	2b04      	cmp	r3, #4
 8001a36:	d00c      	beq.n	8001a52 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a38:	4b8f      	ldr	r3, [pc, #572]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f003 030c 	and.w	r3, r3, #12
 8001a40:	2b08      	cmp	r3, #8
 8001a42:	d112      	bne.n	8001a6a <HAL_RCC_OscConfig+0x5e>
 8001a44:	4b8c      	ldr	r3, [pc, #560]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a50:	d10b      	bne.n	8001a6a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a52:	4b89      	ldr	r3, [pc, #548]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d06c      	beq.n	8001b38 <HAL_RCC_OscConfig+0x12c>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d168      	bne.n	8001b38 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e246      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a72:	d106      	bne.n	8001a82 <HAL_RCC_OscConfig+0x76>
 8001a74:	4b80      	ldr	r3, [pc, #512]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a7f      	ldr	r2, [pc, #508]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001a7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a7e:	6013      	str	r3, [r2, #0]
 8001a80:	e02e      	b.n	8001ae0 <HAL_RCC_OscConfig+0xd4>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d10c      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x98>
 8001a8a:	4b7b      	ldr	r3, [pc, #492]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a7a      	ldr	r2, [pc, #488]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001a90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a94:	6013      	str	r3, [r2, #0]
 8001a96:	4b78      	ldr	r3, [pc, #480]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a77      	ldr	r2, [pc, #476]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001a9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001aa0:	6013      	str	r3, [r2, #0]
 8001aa2:	e01d      	b.n	8001ae0 <HAL_RCC_OscConfig+0xd4>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001aac:	d10c      	bne.n	8001ac8 <HAL_RCC_OscConfig+0xbc>
 8001aae:	4b72      	ldr	r3, [pc, #456]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a71      	ldr	r2, [pc, #452]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001ab4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ab8:	6013      	str	r3, [r2, #0]
 8001aba:	4b6f      	ldr	r3, [pc, #444]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a6e      	ldr	r2, [pc, #440]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001ac0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ac4:	6013      	str	r3, [r2, #0]
 8001ac6:	e00b      	b.n	8001ae0 <HAL_RCC_OscConfig+0xd4>
 8001ac8:	4b6b      	ldr	r3, [pc, #428]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a6a      	ldr	r2, [pc, #424]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001ace:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ad2:	6013      	str	r3, [r2, #0]
 8001ad4:	4b68      	ldr	r3, [pc, #416]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a67      	ldr	r2, [pc, #412]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001ada:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ade:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d013      	beq.n	8001b10 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae8:	f7ff f848 	bl	8000b7c <HAL_GetTick>
 8001aec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aee:	e008      	b.n	8001b02 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001af0:	f7ff f844 	bl	8000b7c <HAL_GetTick>
 8001af4:	4602      	mov	r2, r0
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	2b64      	cmp	r3, #100	; 0x64
 8001afc:	d901      	bls.n	8001b02 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001afe:	2303      	movs	r3, #3
 8001b00:	e1fa      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b02:	4b5d      	ldr	r3, [pc, #372]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d0f0      	beq.n	8001af0 <HAL_RCC_OscConfig+0xe4>
 8001b0e:	e014      	b.n	8001b3a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b10:	f7ff f834 	bl	8000b7c <HAL_GetTick>
 8001b14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b16:	e008      	b.n	8001b2a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b18:	f7ff f830 	bl	8000b7c <HAL_GetTick>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	2b64      	cmp	r3, #100	; 0x64
 8001b24:	d901      	bls.n	8001b2a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e1e6      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b2a:	4b53      	ldr	r3, [pc, #332]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d1f0      	bne.n	8001b18 <HAL_RCC_OscConfig+0x10c>
 8001b36:	e000      	b.n	8001b3a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0302 	and.w	r3, r3, #2
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d063      	beq.n	8001c0e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b46:	4b4c      	ldr	r3, [pc, #304]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f003 030c 	and.w	r3, r3, #12
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d00b      	beq.n	8001b6a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b52:	4b49      	ldr	r3, [pc, #292]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f003 030c 	and.w	r3, r3, #12
 8001b5a:	2b08      	cmp	r3, #8
 8001b5c:	d11c      	bne.n	8001b98 <HAL_RCC_OscConfig+0x18c>
 8001b5e:	4b46      	ldr	r3, [pc, #280]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d116      	bne.n	8001b98 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b6a:	4b43      	ldr	r3, [pc, #268]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0302 	and.w	r3, r3, #2
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d005      	beq.n	8001b82 <HAL_RCC_OscConfig+0x176>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	691b      	ldr	r3, [r3, #16]
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d001      	beq.n	8001b82 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e1ba      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b82:	4b3d      	ldr	r3, [pc, #244]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	695b      	ldr	r3, [r3, #20]
 8001b8e:	00db      	lsls	r3, r3, #3
 8001b90:	4939      	ldr	r1, [pc, #228]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001b92:	4313      	orrs	r3, r2
 8001b94:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b96:	e03a      	b.n	8001c0e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	691b      	ldr	r3, [r3, #16]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d020      	beq.n	8001be2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ba0:	4b36      	ldr	r3, [pc, #216]	; (8001c7c <HAL_RCC_OscConfig+0x270>)
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba6:	f7fe ffe9 	bl	8000b7c <HAL_GetTick>
 8001baa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bac:	e008      	b.n	8001bc0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bae:	f7fe ffe5 	bl	8000b7c <HAL_GetTick>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d901      	bls.n	8001bc0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	e19b      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bc0:	4b2d      	ldr	r3, [pc, #180]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0302 	and.w	r3, r3, #2
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d0f0      	beq.n	8001bae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bcc:	4b2a      	ldr	r3, [pc, #168]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	695b      	ldr	r3, [r3, #20]
 8001bd8:	00db      	lsls	r3, r3, #3
 8001bda:	4927      	ldr	r1, [pc, #156]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	600b      	str	r3, [r1, #0]
 8001be0:	e015      	b.n	8001c0e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001be2:	4b26      	ldr	r3, [pc, #152]	; (8001c7c <HAL_RCC_OscConfig+0x270>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be8:	f7fe ffc8 	bl	8000b7c <HAL_GetTick>
 8001bec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bee:	e008      	b.n	8001c02 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bf0:	f7fe ffc4 	bl	8000b7c <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	2b02      	cmp	r3, #2
 8001bfc:	d901      	bls.n	8001c02 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e17a      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c02:	4b1d      	ldr	r3, [pc, #116]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0302 	and.w	r3, r3, #2
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d1f0      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0308 	and.w	r3, r3, #8
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d03a      	beq.n	8001c90 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	699b      	ldr	r3, [r3, #24]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d019      	beq.n	8001c56 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c22:	4b17      	ldr	r3, [pc, #92]	; (8001c80 <HAL_RCC_OscConfig+0x274>)
 8001c24:	2201      	movs	r2, #1
 8001c26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c28:	f7fe ffa8 	bl	8000b7c <HAL_GetTick>
 8001c2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c2e:	e008      	b.n	8001c42 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c30:	f7fe ffa4 	bl	8000b7c <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d901      	bls.n	8001c42 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e15a      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c42:	4b0d      	ldr	r3, [pc, #52]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c46:	f003 0302 	and.w	r3, r3, #2
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d0f0      	beq.n	8001c30 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c4e:	2001      	movs	r0, #1
 8001c50:	f000 fada 	bl	8002208 <RCC_Delay>
 8001c54:	e01c      	b.n	8001c90 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c56:	4b0a      	ldr	r3, [pc, #40]	; (8001c80 <HAL_RCC_OscConfig+0x274>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c5c:	f7fe ff8e 	bl	8000b7c <HAL_GetTick>
 8001c60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c62:	e00f      	b.n	8001c84 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c64:	f7fe ff8a 	bl	8000b7c <HAL_GetTick>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d908      	bls.n	8001c84 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e140      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4ec>
 8001c76:	bf00      	nop
 8001c78:	40021000 	.word	0x40021000
 8001c7c:	42420000 	.word	0x42420000
 8001c80:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c84:	4b9e      	ldr	r3, [pc, #632]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c88:	f003 0302 	and.w	r3, r3, #2
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d1e9      	bne.n	8001c64 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0304 	and.w	r3, r3, #4
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	f000 80a6 	beq.w	8001dea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ca2:	4b97      	ldr	r3, [pc, #604]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001ca4:	69db      	ldr	r3, [r3, #28]
 8001ca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d10d      	bne.n	8001cca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cae:	4b94      	ldr	r3, [pc, #592]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001cb0:	69db      	ldr	r3, [r3, #28]
 8001cb2:	4a93      	ldr	r2, [pc, #588]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001cb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cb8:	61d3      	str	r3, [r2, #28]
 8001cba:	4b91      	ldr	r3, [pc, #580]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001cbc:	69db      	ldr	r3, [r3, #28]
 8001cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cc2:	60bb      	str	r3, [r7, #8]
 8001cc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cca:	4b8e      	ldr	r3, [pc, #568]	; (8001f04 <HAL_RCC_OscConfig+0x4f8>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d118      	bne.n	8001d08 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cd6:	4b8b      	ldr	r3, [pc, #556]	; (8001f04 <HAL_RCC_OscConfig+0x4f8>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a8a      	ldr	r2, [pc, #552]	; (8001f04 <HAL_RCC_OscConfig+0x4f8>)
 8001cdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ce0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ce2:	f7fe ff4b 	bl	8000b7c <HAL_GetTick>
 8001ce6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ce8:	e008      	b.n	8001cfc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cea:	f7fe ff47 	bl	8000b7c <HAL_GetTick>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	1ad3      	subs	r3, r2, r3
 8001cf4:	2b64      	cmp	r3, #100	; 0x64
 8001cf6:	d901      	bls.n	8001cfc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	e0fd      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cfc:	4b81      	ldr	r3, [pc, #516]	; (8001f04 <HAL_RCC_OscConfig+0x4f8>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d0f0      	beq.n	8001cea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d106      	bne.n	8001d1e <HAL_RCC_OscConfig+0x312>
 8001d10:	4b7b      	ldr	r3, [pc, #492]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001d12:	6a1b      	ldr	r3, [r3, #32]
 8001d14:	4a7a      	ldr	r2, [pc, #488]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001d16:	f043 0301 	orr.w	r3, r3, #1
 8001d1a:	6213      	str	r3, [r2, #32]
 8001d1c:	e02d      	b.n	8001d7a <HAL_RCC_OscConfig+0x36e>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	68db      	ldr	r3, [r3, #12]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d10c      	bne.n	8001d40 <HAL_RCC_OscConfig+0x334>
 8001d26:	4b76      	ldr	r3, [pc, #472]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001d28:	6a1b      	ldr	r3, [r3, #32]
 8001d2a:	4a75      	ldr	r2, [pc, #468]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001d2c:	f023 0301 	bic.w	r3, r3, #1
 8001d30:	6213      	str	r3, [r2, #32]
 8001d32:	4b73      	ldr	r3, [pc, #460]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001d34:	6a1b      	ldr	r3, [r3, #32]
 8001d36:	4a72      	ldr	r2, [pc, #456]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001d38:	f023 0304 	bic.w	r3, r3, #4
 8001d3c:	6213      	str	r3, [r2, #32]
 8001d3e:	e01c      	b.n	8001d7a <HAL_RCC_OscConfig+0x36e>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	2b05      	cmp	r3, #5
 8001d46:	d10c      	bne.n	8001d62 <HAL_RCC_OscConfig+0x356>
 8001d48:	4b6d      	ldr	r3, [pc, #436]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001d4a:	6a1b      	ldr	r3, [r3, #32]
 8001d4c:	4a6c      	ldr	r2, [pc, #432]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001d4e:	f043 0304 	orr.w	r3, r3, #4
 8001d52:	6213      	str	r3, [r2, #32]
 8001d54:	4b6a      	ldr	r3, [pc, #424]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001d56:	6a1b      	ldr	r3, [r3, #32]
 8001d58:	4a69      	ldr	r2, [pc, #420]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001d5a:	f043 0301 	orr.w	r3, r3, #1
 8001d5e:	6213      	str	r3, [r2, #32]
 8001d60:	e00b      	b.n	8001d7a <HAL_RCC_OscConfig+0x36e>
 8001d62:	4b67      	ldr	r3, [pc, #412]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001d64:	6a1b      	ldr	r3, [r3, #32]
 8001d66:	4a66      	ldr	r2, [pc, #408]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001d68:	f023 0301 	bic.w	r3, r3, #1
 8001d6c:	6213      	str	r3, [r2, #32]
 8001d6e:	4b64      	ldr	r3, [pc, #400]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001d70:	6a1b      	ldr	r3, [r3, #32]
 8001d72:	4a63      	ldr	r2, [pc, #396]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001d74:	f023 0304 	bic.w	r3, r3, #4
 8001d78:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	68db      	ldr	r3, [r3, #12]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d015      	beq.n	8001dae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d82:	f7fe fefb 	bl	8000b7c <HAL_GetTick>
 8001d86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d88:	e00a      	b.n	8001da0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d8a:	f7fe fef7 	bl	8000b7c <HAL_GetTick>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d901      	bls.n	8001da0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	e0ab      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001da0:	4b57      	ldr	r3, [pc, #348]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001da2:	6a1b      	ldr	r3, [r3, #32]
 8001da4:	f003 0302 	and.w	r3, r3, #2
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d0ee      	beq.n	8001d8a <HAL_RCC_OscConfig+0x37e>
 8001dac:	e014      	b.n	8001dd8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dae:	f7fe fee5 	bl	8000b7c <HAL_GetTick>
 8001db2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001db4:	e00a      	b.n	8001dcc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001db6:	f7fe fee1 	bl	8000b7c <HAL_GetTick>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d901      	bls.n	8001dcc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	e095      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dcc:	4b4c      	ldr	r3, [pc, #304]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001dce:	6a1b      	ldr	r3, [r3, #32]
 8001dd0:	f003 0302 	and.w	r3, r3, #2
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d1ee      	bne.n	8001db6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001dd8:	7dfb      	ldrb	r3, [r7, #23]
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d105      	bne.n	8001dea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dde:	4b48      	ldr	r3, [pc, #288]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001de0:	69db      	ldr	r3, [r3, #28]
 8001de2:	4a47      	ldr	r2, [pc, #284]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001de4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001de8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	69db      	ldr	r3, [r3, #28]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	f000 8081 	beq.w	8001ef6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001df4:	4b42      	ldr	r3, [pc, #264]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f003 030c 	and.w	r3, r3, #12
 8001dfc:	2b08      	cmp	r3, #8
 8001dfe:	d061      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	69db      	ldr	r3, [r3, #28]
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	d146      	bne.n	8001e96 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e08:	4b3f      	ldr	r3, [pc, #252]	; (8001f08 <HAL_RCC_OscConfig+0x4fc>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e0e:	f7fe feb5 	bl	8000b7c <HAL_GetTick>
 8001e12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e14:	e008      	b.n	8001e28 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e16:	f7fe feb1 	bl	8000b7c <HAL_GetTick>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d901      	bls.n	8001e28 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e24:	2303      	movs	r3, #3
 8001e26:	e067      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e28:	4b35      	ldr	r3, [pc, #212]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d1f0      	bne.n	8001e16 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6a1b      	ldr	r3, [r3, #32]
 8001e38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e3c:	d108      	bne.n	8001e50 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e3e:	4b30      	ldr	r3, [pc, #192]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	492d      	ldr	r1, [pc, #180]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e50:	4b2b      	ldr	r3, [pc, #172]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6a19      	ldr	r1, [r3, #32]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e60:	430b      	orrs	r3, r1
 8001e62:	4927      	ldr	r1, [pc, #156]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001e64:	4313      	orrs	r3, r2
 8001e66:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e68:	4b27      	ldr	r3, [pc, #156]	; (8001f08 <HAL_RCC_OscConfig+0x4fc>)
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e6e:	f7fe fe85 	bl	8000b7c <HAL_GetTick>
 8001e72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e74:	e008      	b.n	8001e88 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e76:	f7fe fe81 	bl	8000b7c <HAL_GetTick>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d901      	bls.n	8001e88 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e84:	2303      	movs	r3, #3
 8001e86:	e037      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e88:	4b1d      	ldr	r3, [pc, #116]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d0f0      	beq.n	8001e76 <HAL_RCC_OscConfig+0x46a>
 8001e94:	e02f      	b.n	8001ef6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e96:	4b1c      	ldr	r3, [pc, #112]	; (8001f08 <HAL_RCC_OscConfig+0x4fc>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e9c:	f7fe fe6e 	bl	8000b7c <HAL_GetTick>
 8001ea0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ea2:	e008      	b.n	8001eb6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ea4:	f7fe fe6a 	bl	8000b7c <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d901      	bls.n	8001eb6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e020      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eb6:	4b12      	ldr	r3, [pc, #72]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d1f0      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x498>
 8001ec2:	e018      	b.n	8001ef6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	69db      	ldr	r3, [r3, #28]
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d101      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e013      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ed0:	4b0b      	ldr	r3, [pc, #44]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6a1b      	ldr	r3, [r3, #32]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d106      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d001      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e000      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001ef6:	2300      	movs	r3, #0
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3718      	adds	r7, #24
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	40021000 	.word	0x40021000
 8001f04:	40007000 	.word	0x40007000
 8001f08:	42420060 	.word	0x42420060

08001f0c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d101      	bne.n	8001f20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e0d0      	b.n	80020c2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f20:	4b6a      	ldr	r3, [pc, #424]	; (80020cc <HAL_RCC_ClockConfig+0x1c0>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0307 	and.w	r3, r3, #7
 8001f28:	683a      	ldr	r2, [r7, #0]
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d910      	bls.n	8001f50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f2e:	4b67      	ldr	r3, [pc, #412]	; (80020cc <HAL_RCC_ClockConfig+0x1c0>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f023 0207 	bic.w	r2, r3, #7
 8001f36:	4965      	ldr	r1, [pc, #404]	; (80020cc <HAL_RCC_ClockConfig+0x1c0>)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f3e:	4b63      	ldr	r3, [pc, #396]	; (80020cc <HAL_RCC_ClockConfig+0x1c0>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0307 	and.w	r3, r3, #7
 8001f46:	683a      	ldr	r2, [r7, #0]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d001      	beq.n	8001f50 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e0b8      	b.n	80020c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0302 	and.w	r3, r3, #2
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d020      	beq.n	8001f9e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0304 	and.w	r3, r3, #4
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d005      	beq.n	8001f74 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f68:	4b59      	ldr	r3, [pc, #356]	; (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	4a58      	ldr	r2, [pc, #352]	; (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f6e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f72:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0308 	and.w	r3, r3, #8
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d005      	beq.n	8001f8c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f80:	4b53      	ldr	r3, [pc, #332]	; (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	4a52      	ldr	r2, [pc, #328]	; (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f86:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f8a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f8c:	4b50      	ldr	r3, [pc, #320]	; (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	494d      	ldr	r1, [pc, #308]	; (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d040      	beq.n	800202c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d107      	bne.n	8001fc2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fb2:	4b47      	ldr	r3, [pc, #284]	; (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d115      	bne.n	8001fea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e07f      	b.n	80020c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	d107      	bne.n	8001fda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fca:	4b41      	ldr	r3, [pc, #260]	; (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d109      	bne.n	8001fea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e073      	b.n	80020c2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fda:	4b3d      	ldr	r3, [pc, #244]	; (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0302 	and.w	r3, r3, #2
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d101      	bne.n	8001fea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e06b      	b.n	80020c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fea:	4b39      	ldr	r3, [pc, #228]	; (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f023 0203 	bic.w	r2, r3, #3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	4936      	ldr	r1, [pc, #216]	; (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ffc:	f7fe fdbe 	bl	8000b7c <HAL_GetTick>
 8002000:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002002:	e00a      	b.n	800201a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002004:	f7fe fdba 	bl	8000b7c <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002012:	4293      	cmp	r3, r2
 8002014:	d901      	bls.n	800201a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e053      	b.n	80020c2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800201a:	4b2d      	ldr	r3, [pc, #180]	; (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f003 020c 	and.w	r2, r3, #12
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	429a      	cmp	r2, r3
 800202a:	d1eb      	bne.n	8002004 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800202c:	4b27      	ldr	r3, [pc, #156]	; (80020cc <HAL_RCC_ClockConfig+0x1c0>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0307 	and.w	r3, r3, #7
 8002034:	683a      	ldr	r2, [r7, #0]
 8002036:	429a      	cmp	r2, r3
 8002038:	d210      	bcs.n	800205c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800203a:	4b24      	ldr	r3, [pc, #144]	; (80020cc <HAL_RCC_ClockConfig+0x1c0>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f023 0207 	bic.w	r2, r3, #7
 8002042:	4922      	ldr	r1, [pc, #136]	; (80020cc <HAL_RCC_ClockConfig+0x1c0>)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	4313      	orrs	r3, r2
 8002048:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800204a:	4b20      	ldr	r3, [pc, #128]	; (80020cc <HAL_RCC_ClockConfig+0x1c0>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0307 	and.w	r3, r3, #7
 8002052:	683a      	ldr	r2, [r7, #0]
 8002054:	429a      	cmp	r2, r3
 8002056:	d001      	beq.n	800205c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e032      	b.n	80020c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0304 	and.w	r3, r3, #4
 8002064:	2b00      	cmp	r3, #0
 8002066:	d008      	beq.n	800207a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002068:	4b19      	ldr	r3, [pc, #100]	; (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	4916      	ldr	r1, [pc, #88]	; (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002076:	4313      	orrs	r3, r2
 8002078:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0308 	and.w	r3, r3, #8
 8002082:	2b00      	cmp	r3, #0
 8002084:	d009      	beq.n	800209a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002086:	4b12      	ldr	r3, [pc, #72]	; (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	691b      	ldr	r3, [r3, #16]
 8002092:	00db      	lsls	r3, r3, #3
 8002094:	490e      	ldr	r1, [pc, #56]	; (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002096:	4313      	orrs	r3, r2
 8002098:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800209a:	f000 f821 	bl	80020e0 <HAL_RCC_GetSysClockFreq>
 800209e:	4601      	mov	r1, r0
 80020a0:	4b0b      	ldr	r3, [pc, #44]	; (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	091b      	lsrs	r3, r3, #4
 80020a6:	f003 030f 	and.w	r3, r3, #15
 80020aa:	4a0a      	ldr	r2, [pc, #40]	; (80020d4 <HAL_RCC_ClockConfig+0x1c8>)
 80020ac:	5cd3      	ldrb	r3, [r2, r3]
 80020ae:	fa21 f303 	lsr.w	r3, r1, r3
 80020b2:	4a09      	ldr	r2, [pc, #36]	; (80020d8 <HAL_RCC_ClockConfig+0x1cc>)
 80020b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80020b6:	4b09      	ldr	r3, [pc, #36]	; (80020dc <HAL_RCC_ClockConfig+0x1d0>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7fe fd1c 	bl	8000af8 <HAL_InitTick>

  return HAL_OK;
 80020c0:	2300      	movs	r3, #0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3710      	adds	r7, #16
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	40022000 	.word	0x40022000
 80020d0:	40021000 	.word	0x40021000
 80020d4:	08003868 	.word	0x08003868
 80020d8:	20000004 	.word	0x20000004
 80020dc:	20000008 	.word	0x20000008

080020e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020e0:	b490      	push	{r4, r7}
 80020e2:	b08a      	sub	sp, #40	; 0x28
 80020e4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80020e6:	4b2a      	ldr	r3, [pc, #168]	; (8002190 <HAL_RCC_GetSysClockFreq+0xb0>)
 80020e8:	1d3c      	adds	r4, r7, #4
 80020ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80020f0:	4b28      	ldr	r3, [pc, #160]	; (8002194 <HAL_RCC_GetSysClockFreq+0xb4>)
 80020f2:	881b      	ldrh	r3, [r3, #0]
 80020f4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80020f6:	2300      	movs	r3, #0
 80020f8:	61fb      	str	r3, [r7, #28]
 80020fa:	2300      	movs	r3, #0
 80020fc:	61bb      	str	r3, [r7, #24]
 80020fe:	2300      	movs	r3, #0
 8002100:	627b      	str	r3, [r7, #36]	; 0x24
 8002102:	2300      	movs	r3, #0
 8002104:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002106:	2300      	movs	r3, #0
 8002108:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800210a:	4b23      	ldr	r3, [pc, #140]	; (8002198 <HAL_RCC_GetSysClockFreq+0xb8>)
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	f003 030c 	and.w	r3, r3, #12
 8002116:	2b04      	cmp	r3, #4
 8002118:	d002      	beq.n	8002120 <HAL_RCC_GetSysClockFreq+0x40>
 800211a:	2b08      	cmp	r3, #8
 800211c:	d003      	beq.n	8002126 <HAL_RCC_GetSysClockFreq+0x46>
 800211e:	e02d      	b.n	800217c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002120:	4b1e      	ldr	r3, [pc, #120]	; (800219c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002122:	623b      	str	r3, [r7, #32]
      break;
 8002124:	e02d      	b.n	8002182 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	0c9b      	lsrs	r3, r3, #18
 800212a:	f003 030f 	and.w	r3, r3, #15
 800212e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002132:	4413      	add	r3, r2
 8002134:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002138:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002140:	2b00      	cmp	r3, #0
 8002142:	d013      	beq.n	800216c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002144:	4b14      	ldr	r3, [pc, #80]	; (8002198 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	0c5b      	lsrs	r3, r3, #17
 800214a:	f003 0301 	and.w	r3, r3, #1
 800214e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002152:	4413      	add	r3, r2
 8002154:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002158:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	4a0f      	ldr	r2, [pc, #60]	; (800219c <HAL_RCC_GetSysClockFreq+0xbc>)
 800215e:	fb02 f203 	mul.w	r2, r2, r3
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	fbb2 f3f3 	udiv	r3, r2, r3
 8002168:	627b      	str	r3, [r7, #36]	; 0x24
 800216a:	e004      	b.n	8002176 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	4a0c      	ldr	r2, [pc, #48]	; (80021a0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002170:	fb02 f303 	mul.w	r3, r2, r3
 8002174:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002178:	623b      	str	r3, [r7, #32]
      break;
 800217a:	e002      	b.n	8002182 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800217c:	4b07      	ldr	r3, [pc, #28]	; (800219c <HAL_RCC_GetSysClockFreq+0xbc>)
 800217e:	623b      	str	r3, [r7, #32]
      break;
 8002180:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002182:	6a3b      	ldr	r3, [r7, #32]
}
 8002184:	4618      	mov	r0, r3
 8002186:	3728      	adds	r7, #40	; 0x28
 8002188:	46bd      	mov	sp, r7
 800218a:	bc90      	pop	{r4, r7}
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	08003830 	.word	0x08003830
 8002194:	08003840 	.word	0x08003840
 8002198:	40021000 	.word	0x40021000
 800219c:	007a1200 	.word	0x007a1200
 80021a0:	003d0900 	.word	0x003d0900

080021a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021a8:	4b02      	ldr	r3, [pc, #8]	; (80021b4 <HAL_RCC_GetHCLKFreq+0x10>)
 80021aa:	681b      	ldr	r3, [r3, #0]
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bc80      	pop	{r7}
 80021b2:	4770      	bx	lr
 80021b4:	20000004 	.word	0x20000004

080021b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80021bc:	f7ff fff2 	bl	80021a4 <HAL_RCC_GetHCLKFreq>
 80021c0:	4601      	mov	r1, r0
 80021c2:	4b05      	ldr	r3, [pc, #20]	; (80021d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	0a1b      	lsrs	r3, r3, #8
 80021c8:	f003 0307 	and.w	r3, r3, #7
 80021cc:	4a03      	ldr	r2, [pc, #12]	; (80021dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80021ce:	5cd3      	ldrb	r3, [r2, r3]
 80021d0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	40021000 	.word	0x40021000
 80021dc:	08003878 	.word	0x08003878

080021e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80021e4:	f7ff ffde 	bl	80021a4 <HAL_RCC_GetHCLKFreq>
 80021e8:	4601      	mov	r1, r0
 80021ea:	4b05      	ldr	r3, [pc, #20]	; (8002200 <HAL_RCC_GetPCLK2Freq+0x20>)
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	0adb      	lsrs	r3, r3, #11
 80021f0:	f003 0307 	and.w	r3, r3, #7
 80021f4:	4a03      	ldr	r2, [pc, #12]	; (8002204 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021f6:	5cd3      	ldrb	r3, [r2, r3]
 80021f8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	40021000 	.word	0x40021000
 8002204:	08003878 	.word	0x08003878

08002208 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002208:	b480      	push	{r7}
 800220a:	b085      	sub	sp, #20
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002210:	4b0a      	ldr	r3, [pc, #40]	; (800223c <RCC_Delay+0x34>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a0a      	ldr	r2, [pc, #40]	; (8002240 <RCC_Delay+0x38>)
 8002216:	fba2 2303 	umull	r2, r3, r2, r3
 800221a:	0a5b      	lsrs	r3, r3, #9
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	fb02 f303 	mul.w	r3, r2, r3
 8002222:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002224:	bf00      	nop
  }
  while (Delay --);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	1e5a      	subs	r2, r3, #1
 800222a:	60fa      	str	r2, [r7, #12]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d1f9      	bne.n	8002224 <RCC_Delay+0x1c>
}
 8002230:	bf00      	nop
 8002232:	3714      	adds	r7, #20
 8002234:	46bd      	mov	sp, r7
 8002236:	bc80      	pop	{r7}
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	20000004 	.word	0x20000004
 8002240:	10624dd3 	.word	0x10624dd3

08002244 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d101      	bne.n	8002256 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e076      	b.n	8002344 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225a:	2b00      	cmp	r3, #0
 800225c:	d108      	bne.n	8002270 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002266:	d009      	beq.n	800227c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2200      	movs	r2, #0
 800226c:	61da      	str	r2, [r3, #28]
 800226e:	e005      	b.n	800227c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2200      	movs	r2, #0
 8002274:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2200      	movs	r2, #0
 8002280:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002288:	b2db      	uxtb	r3, r3
 800228a:	2b00      	cmp	r3, #0
 800228c:	d106      	bne.n	800229c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f7fe f966 	bl	8000568 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2202      	movs	r2, #2
 80022a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022b2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80022c4:	431a      	orrs	r2, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	68db      	ldr	r3, [r3, #12]
 80022ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022ce:	431a      	orrs	r2, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	691b      	ldr	r3, [r3, #16]
 80022d4:	f003 0302 	and.w	r3, r3, #2
 80022d8:	431a      	orrs	r2, r3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	695b      	ldr	r3, [r3, #20]
 80022de:	f003 0301 	and.w	r3, r3, #1
 80022e2:	431a      	orrs	r2, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	699b      	ldr	r3, [r3, #24]
 80022e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022ec:	431a      	orrs	r2, r3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	69db      	ldr	r3, [r3, #28]
 80022f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80022f6:	431a      	orrs	r2, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6a1b      	ldr	r3, [r3, #32]
 80022fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002300:	ea42 0103 	orr.w	r1, r2, r3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002308:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	430a      	orrs	r2, r1
 8002312:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	699b      	ldr	r3, [r3, #24]
 8002318:	0c1a      	lsrs	r2, r3, #16
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f002 0204 	and.w	r2, r2, #4
 8002322:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	69da      	ldr	r2, [r3, #28]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002332:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2200      	movs	r2, #0
 8002338:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2201      	movs	r2, #1
 800233e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002342:	2300      	movs	r3, #0
}
 8002344:	4618      	mov	r0, r3
 8002346:	3708      	adds	r7, #8
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}

0800234c <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b086      	sub	sp, #24
 8002350:	af00      	add	r7, sp, #0
 8002352:	60f8      	str	r0, [r7, #12]
 8002354:	60b9      	str	r1, [r7, #8]
 8002356:	607a      	str	r2, [r7, #4]
 8002358:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800235a:	2300      	movs	r3, #0
 800235c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002364:	2b01      	cmp	r3, #1
 8002366:	d101      	bne.n	800236c <HAL_SPI_TransmitReceive_DMA+0x20>
 8002368:	2302      	movs	r3, #2
 800236a:	e0e3      	b.n	8002534 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2201      	movs	r2, #1
 8002370:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800237a:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8002382:	7dbb      	ldrb	r3, [r7, #22]
 8002384:	2b01      	cmp	r3, #1
 8002386:	d00d      	beq.n	80023a4 <HAL_SPI_TransmitReceive_DMA+0x58>
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800238e:	d106      	bne.n	800239e <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d102      	bne.n	800239e <HAL_SPI_TransmitReceive_DMA+0x52>
 8002398:	7dbb      	ldrb	r3, [r7, #22]
 800239a:	2b04      	cmp	r3, #4
 800239c:	d002      	beq.n	80023a4 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800239e:	2302      	movs	r3, #2
 80023a0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80023a2:	e0c2      	b.n	800252a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d005      	beq.n	80023b6 <HAL_SPI_TransmitReceive_DMA+0x6a>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d002      	beq.n	80023b6 <HAL_SPI_TransmitReceive_DMA+0x6a>
 80023b0:	887b      	ldrh	r3, [r7, #2]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d102      	bne.n	80023bc <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80023ba:	e0b6      	b.n	800252a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	2b04      	cmp	r3, #4
 80023c6:	d003      	beq.n	80023d0 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2205      	movs	r2, #5
 80023cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2200      	movs	r2, #0
 80023d4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	68ba      	ldr	r2, [r7, #8]
 80023da:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	887a      	ldrh	r2, [r7, #2]
 80023e0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	887a      	ldrh	r2, [r7, #2]
 80023e6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	887a      	ldrh	r2, [r7, #2]
 80023f2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	887a      	ldrh	r2, [r7, #2]
 80023f8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2200      	movs	r2, #0
 80023fe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2200      	movs	r2, #0
 8002404:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800240c:	b2db      	uxtb	r3, r3
 800240e:	2b04      	cmp	r3, #4
 8002410:	d108      	bne.n	8002424 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002416:	4a49      	ldr	r2, [pc, #292]	; (800253c <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8002418:	62da      	str	r2, [r3, #44]	; 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800241e:	4a48      	ldr	r2, [pc, #288]	; (8002540 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8002420:	629a      	str	r2, [r3, #40]	; 0x28
 8002422:	e007      	b.n	8002434 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002428:	4a46      	ldr	r2, [pc, #280]	; (8002544 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 800242a:	62da      	str	r2, [r3, #44]	; 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002430:	4a45      	ldr	r2, [pc, #276]	; (8002548 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 8002432:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002438:	4a44      	ldr	r2, [pc, #272]	; (800254c <HAL_SPI_TransmitReceive_DMA+0x200>)
 800243a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002440:	2200      	movs	r2, #0
 8002442:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	330c      	adds	r3, #12
 800244e:	4619      	mov	r1, r3
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002454:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800245a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800245c:	f7fe fd3e 	bl	8000edc <HAL_DMA_Start_IT>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d00c      	beq.n	8002480 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800246a:	f043 0210 	orr.w	r2, r3, #16
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2201      	movs	r2, #1
 800247a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800247e:	e054      	b.n	800252a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	685a      	ldr	r2, [r3, #4]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f042 0201 	orr.w	r2, r2, #1
 800248e:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002494:	2200      	movs	r2, #0
 8002496:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferCpltCallback     = NULL;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800249c:	2200      	movs	r2, #0
 800249e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->hdmatx->XferErrorCallback    = NULL;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024a4:	2200      	movs	r2, #0
 80024a6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferAbortCallback    = NULL;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024ac:	2200      	movs	r2, #0
 80024ae:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b8:	4619      	mov	r1, r3
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	330c      	adds	r3, #12
 80024c0:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024c6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80024c8:	f7fe fd08 	bl	8000edc <HAL_DMA_Start_IT>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d00c      	beq.n	80024ec <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024d6:	f043 0210 	orr.w	r2, r3, #16
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2201      	movs	r2, #1
 80024e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80024ea:	e01e      	b.n	800252a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024f6:	2b40      	cmp	r3, #64	; 0x40
 80024f8:	d007      	beq.n	800250a <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002508:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	685a      	ldr	r2, [r3, #4]
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f042 0220 	orr.w	r2, r2, #32
 8002518:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	685a      	ldr	r2, [r3, #4]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f042 0202 	orr.w	r2, r2, #2
 8002528:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2200      	movs	r2, #0
 800252e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002532:	7dfb      	ldrb	r3, [r7, #23]
}
 8002534:	4618      	mov	r0, r3
 8002536:	3718      	adds	r7, #24
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	0800292f 	.word	0x0800292f
 8002540:	080027fb 	.word	0x080027fb
 8002544:	0800294b 	.word	0x0800294b
 8002548:	080028a1 	.word	0x080028a1
 800254c:	08002967 	.word	0x08002967

08002550 <HAL_SPI_DMAStop>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAStop(SPI_HandleTypeDef *hspi)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002558:	2300      	movs	r3, #0
 800255a:	73fb      	strb	r3, [r7, #15]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_SPI_TxCpltCallback() or HAL_SPI_RxCpltCallback() or HAL_SPI_TxRxCpltCallback()
     */

  /* Abort the SPI DMA tx Stream/Channel  */
  if (hspi->hdmatx != NULL)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002560:	2b00      	cmp	r3, #0
 8002562:	d00f      	beq.n	8002584 <HAL_SPI_DMAStop+0x34>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmatx))
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002568:	4618      	mov	r0, r3
 800256a:	f7fe fd16 	bl	8000f9a <HAL_DMA_Abort>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d007      	beq.n	8002584 <HAL_SPI_DMAStop+0x34>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002578:	f043 0210 	orr.w	r2, r3, #16
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	73fb      	strb	r3, [r7, #15]
    }
  }
  /* Abort the SPI DMA rx Stream/Channel  */
  if (hspi->hdmarx != NULL)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002588:	2b00      	cmp	r3, #0
 800258a:	d00f      	beq.n	80025ac <HAL_SPI_DMAStop+0x5c>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmarx))
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002590:	4618      	mov	r0, r3
 8002592:	f7fe fd02 	bl	8000f9a <HAL_DMA_Abort>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d007      	beq.n	80025ac <HAL_SPI_DMAStop+0x5c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025a0:	f043 0210 	orr.w	r2, r3, #16
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	685a      	ldr	r2, [r3, #4]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f022 0203 	bic.w	r2, r2, #3
 80025ba:	605a      	str	r2, [r3, #4]
  hspi->State = HAL_SPI_STATE_READY;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2201      	movs	r2, #1
 80025c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  return errorcode;
 80025c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3710      	adds	r7, #16
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
	...

080025d0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b088      	sub	sp, #32
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80025e8:	69bb      	ldr	r3, [r7, #24]
 80025ea:	099b      	lsrs	r3, r3, #6
 80025ec:	f003 0301 	and.w	r3, r3, #1
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d10f      	bne.n	8002614 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d00a      	beq.n	8002614 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	099b      	lsrs	r3, r3, #6
 8002602:	f003 0301 	and.w	r3, r3, #1
 8002606:	2b00      	cmp	r3, #0
 8002608:	d004      	beq.n	8002614 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	4798      	blx	r3
    return;
 8002612:	e0bf      	b.n	8002794 <HAL_SPI_IRQHandler+0x1c4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002614:	69bb      	ldr	r3, [r7, #24]
 8002616:	085b      	lsrs	r3, r3, #1
 8002618:	f003 0301 	and.w	r3, r3, #1
 800261c:	2b00      	cmp	r3, #0
 800261e:	d00a      	beq.n	8002636 <HAL_SPI_IRQHandler+0x66>
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	09db      	lsrs	r3, r3, #7
 8002624:	f003 0301 	and.w	r3, r3, #1
 8002628:	2b00      	cmp	r3, #0
 800262a:	d004      	beq.n	8002636 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	4798      	blx	r3
    return;
 8002634:	e0ae      	b.n	8002794 <HAL_SPI_IRQHandler+0x1c4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8002636:	69bb      	ldr	r3, [r7, #24]
 8002638:	095b      	lsrs	r3, r3, #5
 800263a:	f003 0301 	and.w	r3, r3, #1
 800263e:	2b00      	cmp	r3, #0
 8002640:	d106      	bne.n	8002650 <HAL_SPI_IRQHandler+0x80>
 8002642:	69bb      	ldr	r3, [r7, #24]
 8002644:	099b      	lsrs	r3, r3, #6
 8002646:	f003 0301 	and.w	r3, r3, #1
 800264a:	2b00      	cmp	r3, #0
 800264c:	f000 80a2 	beq.w	8002794 <HAL_SPI_IRQHandler+0x1c4>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	095b      	lsrs	r3, r3, #5
 8002654:	f003 0301 	and.w	r3, r3, #1
 8002658:	2b00      	cmp	r3, #0
 800265a:	f000 809b 	beq.w	8002794 <HAL_SPI_IRQHandler+0x1c4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800265e:	69bb      	ldr	r3, [r7, #24]
 8002660:	099b      	lsrs	r3, r3, #6
 8002662:	f003 0301 	and.w	r3, r3, #1
 8002666:	2b00      	cmp	r3, #0
 8002668:	d023      	beq.n	80026b2 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002670:	b2db      	uxtb	r3, r3
 8002672:	2b03      	cmp	r3, #3
 8002674:	d011      	beq.n	800269a <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800267a:	f043 0204 	orr.w	r2, r3, #4
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002682:	2300      	movs	r3, #0
 8002684:	617b      	str	r3, [r7, #20]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	617b      	str	r3, [r7, #20]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	617b      	str	r3, [r7, #20]
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	e00b      	b.n	80026b2 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800269a:	2300      	movs	r3, #0
 800269c:	613b      	str	r3, [r7, #16]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	613b      	str	r3, [r7, #16]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	613b      	str	r3, [r7, #16]
 80026ae:	693b      	ldr	r3, [r7, #16]
        return;
 80026b0:	e070      	b.n	8002794 <HAL_SPI_IRQHandler+0x1c4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	095b      	lsrs	r3, r3, #5
 80026b6:	f003 0301 	and.w	r3, r3, #1
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d014      	beq.n	80026e8 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026c2:	f043 0201 	orr.w	r2, r3, #1
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80026ca:	2300      	movs	r3, #0
 80026cc:	60fb      	str	r3, [r7, #12]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	60fb      	str	r3, [r7, #12]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026e4:	601a      	str	r2, [r3, #0]
 80026e6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d050      	beq.n	8002792 <HAL_SPI_IRQHandler+0x1c2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	685a      	ldr	r2, [r3, #4]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80026fe:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2201      	movs	r2, #1
 8002704:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	f003 0302 	and.w	r3, r3, #2
 800270e:	2b00      	cmp	r3, #0
 8002710:	d104      	bne.n	800271c <HAL_SPI_IRQHandler+0x14c>
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	f003 0301 	and.w	r3, r3, #1
 8002718:	2b00      	cmp	r3, #0
 800271a:	d034      	beq.n	8002786 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	685a      	ldr	r2, [r3, #4]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f022 0203 	bic.w	r2, r2, #3
 800272a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002730:	2b00      	cmp	r3, #0
 8002732:	d011      	beq.n	8002758 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002738:	4a18      	ldr	r2, [pc, #96]	; (800279c <HAL_SPI_IRQHandler+0x1cc>)
 800273a:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002740:	4618      	mov	r0, r3
 8002742:	f7fe fc65 	bl	8001010 <HAL_DMA_Abort_IT>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d005      	beq.n	8002758 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002750:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800275c:	2b00      	cmp	r3, #0
 800275e:	d016      	beq.n	800278e <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002764:	4a0d      	ldr	r2, [pc, #52]	; (800279c <HAL_SPI_IRQHandler+0x1cc>)
 8002766:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800276c:	4618      	mov	r0, r3
 800276e:	f7fe fc4f 	bl	8001010 <HAL_DMA_Abort_IT>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d00a      	beq.n	800278e <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800277c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8002784:	e003      	b.n	800278e <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f000 f82e 	bl	80027e8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800278c:	e000      	b.n	8002790 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 800278e:	bf00      	nop
    return;
 8002790:	bf00      	nop
 8002792:	bf00      	nop
  }
}
 8002794:	3720      	adds	r7, #32
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	080029a7 	.word	0x080029a7

080027a0 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80027a8:	bf00      	nop
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bc80      	pop	{r7}
 80027b0:	4770      	bx	lr

080027b2 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80027b2:	b480      	push	{r7}
 80027b4:	b083      	sub	sp, #12
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80027ba:	bf00      	nop
 80027bc:	370c      	adds	r7, #12
 80027be:	46bd      	mov	sp, r7
 80027c0:	bc80      	pop	{r7}
 80027c2:	4770      	bx	lr

080027c4 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80027cc:	bf00      	nop
 80027ce:	370c      	adds	r7, #12
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bc80      	pop	{r7}
 80027d4:	4770      	bx	lr

080027d6 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80027d6:	b480      	push	{r7}
 80027d8:	b083      	sub	sp, #12
 80027da:	af00      	add	r7, sp, #0
 80027dc:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80027de:	bf00      	nop
 80027e0:	370c      	adds	r7, #12
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bc80      	pop	{r7}
 80027e6:	4770      	bx	lr

080027e8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80027f0:	bf00      	nop
 80027f2:	370c      	adds	r7, #12
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bc80      	pop	{r7}
 80027f8:	4770      	bx	lr

080027fa <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80027fa:	b580      	push	{r7, lr}
 80027fc:	b084      	sub	sp, #16
 80027fe:	af00      	add	r7, sp, #0
 8002800:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002806:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002808:	f7fe f9b8 	bl	8000b7c <HAL_GetTick>
 800280c:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0320 	and.w	r3, r3, #32
 8002818:	2b20      	cmp	r3, #32
 800281a:	d03b      	beq.n	8002894 <SPI_DMAReceiveCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	685a      	ldr	r2, [r3, #4]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f022 0220 	bic.w	r2, r2, #32
 800282a:	605a      	str	r2, [r3, #4]
      READ_REG(hspi->Instance->DR);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d10d      	bne.n	8002850 <SPI_DMAReceiveCplt+0x56>
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800283c:	d108      	bne.n	8002850 <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	685a      	ldr	r2, [r3, #4]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f022 0203 	bic.w	r2, r2, #3
 800284c:	605a      	str	r2, [r3, #4]
 800284e:	e007      	b.n	8002860 <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	685a      	ldr	r2, [r3, #4]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f022 0201 	bic.w	r2, r2, #1
 800285e:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002860:	68ba      	ldr	r2, [r7, #8]
 8002862:	2164      	movs	r1, #100	; 0x64
 8002864:	68f8      	ldr	r0, [r7, #12]
 8002866:	f000 f93b 	bl	8002ae0 <SPI_EndRxTransaction>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d002      	beq.n	8002876 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2220      	movs	r2, #32
 8002874:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2200      	movs	r2, #0
 800287a:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2201      	movs	r2, #1
 8002880:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
      }
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002888:	2b00      	cmp	r3, #0
 800288a:	d003      	beq.n	8002894 <SPI_DMAReceiveCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800288c:	68f8      	ldr	r0, [r7, #12]
 800288e:	f7ff ffab 	bl	80027e8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8002892:	e002      	b.n	800289a <SPI_DMAReceiveCplt+0xa0>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8002894:	68f8      	ldr	r0, [r7, #12]
 8002896:	f7ff ff83 	bl	80027a0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800289a:	3710      	adds	r7, #16
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}

080028a0 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b084      	sub	sp, #16
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ac:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80028ae:	f7fe f965 	bl	8000b7c <HAL_GetTick>
 80028b2:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0320 	and.w	r3, r3, #32
 80028be:	2b20      	cmp	r3, #32
 80028c0:	d02f      	beq.n	8002922 <SPI_DMATransmitReceiveCplt+0x82>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	685a      	ldr	r2, [r3, #4]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f022 0220 	bic.w	r2, r2, #32
 80028d0:	605a      	str	r2, [r3, #4]
      READ_REG(hspi->Instance->DR);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80028d2:	68ba      	ldr	r2, [r7, #8]
 80028d4:	2164      	movs	r1, #100	; 0x64
 80028d6:	68f8      	ldr	r0, [r7, #12]
 80028d8:	f000 f954 	bl	8002b84 <SPI_EndRxTxTransaction>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d005      	beq.n	80028ee <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028e6:	f043 0220 	orr.w	r2, r3, #32
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	685a      	ldr	r2, [r3, #4]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f022 0203 	bic.w	r2, r2, #3
 80028fc:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2200      	movs	r2, #0
 8002902:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2200      	movs	r2, #0
 8002908:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2201      	movs	r2, #1
 800290e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
      }
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002916:	2b00      	cmp	r3, #0
 8002918:	d003      	beq.n	8002922 <SPI_DMATransmitReceiveCplt+0x82>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800291a:	68f8      	ldr	r0, [r7, #12]
 800291c:	f7ff ff64 	bl	80027e8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8002920:	e002      	b.n	8002928 <SPI_DMATransmitReceiveCplt+0x88>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8002922:	68f8      	ldr	r0, [r7, #12]
 8002924:	f7ff ff45 	bl	80027b2 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002928:	3710      	adds	r7, #16
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}

0800292e <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800292e:	b580      	push	{r7, lr}
 8002930:	b084      	sub	sp, #16
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293a:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800293c:	68f8      	ldr	r0, [r7, #12]
 800293e:	f7ff ff41 	bl	80027c4 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002942:	bf00      	nop
 8002944:	3710      	adds	r7, #16
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}

0800294a <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800294a:	b580      	push	{r7, lr}
 800294c:	b084      	sub	sp, #16
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002956:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8002958:	68f8      	ldr	r0, [r7, #12]
 800295a:	f7ff ff3c 	bl	80027d6 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800295e:	bf00      	nop
 8002960:	3710      	adds	r7, #16
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}

08002966 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8002966:	b580      	push	{r7, lr}
 8002968:	b084      	sub	sp, #16
 800296a:	af00      	add	r7, sp, #0
 800296c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002972:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	685a      	ldr	r2, [r3, #4]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f022 0203 	bic.w	r2, r2, #3
 8002982:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002988:	f043 0210 	orr.w	r2, r3, #16
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2201      	movs	r2, #1
 8002994:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002998:	68f8      	ldr	r0, [r7, #12]
 800299a:	f7ff ff25 	bl	80027e8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800299e:	bf00      	nop
 80029a0:	3710      	adds	r7, #16
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}

080029a6 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80029a6:	b580      	push	{r7, lr}
 80029a8:	b084      	sub	sp, #16
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b2:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2200      	movs	r2, #0
 80029b8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2200      	movs	r2, #0
 80029be:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80029c0:	68f8      	ldr	r0, [r7, #12]
 80029c2:	f7ff ff11 	bl	80027e8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80029c6:	bf00      	nop
 80029c8:	3710      	adds	r7, #16
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
	...

080029d0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b088      	sub	sp, #32
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	60f8      	str	r0, [r7, #12]
 80029d8:	60b9      	str	r1, [r7, #8]
 80029da:	603b      	str	r3, [r7, #0]
 80029dc:	4613      	mov	r3, r2
 80029de:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80029e0:	f7fe f8cc 	bl	8000b7c <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029e8:	1a9b      	subs	r3, r3, r2
 80029ea:	683a      	ldr	r2, [r7, #0]
 80029ec:	4413      	add	r3, r2
 80029ee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80029f0:	f7fe f8c4 	bl	8000b7c <HAL_GetTick>
 80029f4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80029f6:	4b39      	ldr	r3, [pc, #228]	; (8002adc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	015b      	lsls	r3, r3, #5
 80029fc:	0d1b      	lsrs	r3, r3, #20
 80029fe:	69fa      	ldr	r2, [r7, #28]
 8002a00:	fb02 f303 	mul.w	r3, r2, r3
 8002a04:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a06:	e054      	b.n	8002ab2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a0e:	d050      	beq.n	8002ab2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002a10:	f7fe f8b4 	bl	8000b7c <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	69bb      	ldr	r3, [r7, #24]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	69fa      	ldr	r2, [r7, #28]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d902      	bls.n	8002a26 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d13d      	bne.n	8002aa2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	685a      	ldr	r2, [r3, #4]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002a34:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a3e:	d111      	bne.n	8002a64 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a48:	d004      	beq.n	8002a54 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a52:	d107      	bne.n	8002a64 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a62:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a6c:	d10f      	bne.n	8002a8e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a7c:	601a      	str	r2, [r3, #0]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a8c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2201      	movs	r2, #1
 8002a92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e017      	b.n	8002ad2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d101      	bne.n	8002aac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	3b01      	subs	r3, #1
 8002ab0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	689a      	ldr	r2, [r3, #8]
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	4013      	ands	r3, r2
 8002abc:	68ba      	ldr	r2, [r7, #8]
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	bf0c      	ite	eq
 8002ac2:	2301      	moveq	r3, #1
 8002ac4:	2300      	movne	r3, #0
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	461a      	mov	r2, r3
 8002aca:	79fb      	ldrb	r3, [r7, #7]
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d19b      	bne.n	8002a08 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002ad0:	2300      	movs	r3, #0
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3720      	adds	r7, #32
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	20000004 	.word	0x20000004

08002ae0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b086      	sub	sp, #24
 8002ae4:	af02      	add	r7, sp, #8
 8002ae6:	60f8      	str	r0, [r7, #12]
 8002ae8:	60b9      	str	r1, [r7, #8]
 8002aea:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002af4:	d111      	bne.n	8002b1a <SPI_EndRxTransaction+0x3a>
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002afe:	d004      	beq.n	8002b0a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b08:	d107      	bne.n	8002b1a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b18:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b22:	d117      	bne.n	8002b54 <SPI_EndRxTransaction+0x74>
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b2c:	d112      	bne.n	8002b54 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	9300      	str	r3, [sp, #0]
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	2200      	movs	r2, #0
 8002b36:	2101      	movs	r1, #1
 8002b38:	68f8      	ldr	r0, [r7, #12]
 8002b3a:	f7ff ff49 	bl	80029d0 <SPI_WaitFlagStateUntilTimeout>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d01a      	beq.n	8002b7a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b48:	f043 0220 	orr.w	r2, r3, #32
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002b50:	2303      	movs	r3, #3
 8002b52:	e013      	b.n	8002b7c <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	9300      	str	r3, [sp, #0]
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	2180      	movs	r1, #128	; 0x80
 8002b5e:	68f8      	ldr	r0, [r7, #12]
 8002b60:	f7ff ff36 	bl	80029d0 <SPI_WaitFlagStateUntilTimeout>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d007      	beq.n	8002b7a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b6e:	f043 0220 	orr.w	r2, r3, #32
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	e000      	b.n	8002b7c <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8002b7a:	2300      	movs	r3, #0
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3710      	adds	r7, #16
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}

08002b84 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b086      	sub	sp, #24
 8002b88:	af02      	add	r7, sp, #8
 8002b8a:	60f8      	str	r0, [r7, #12]
 8002b8c:	60b9      	str	r1, [r7, #8]
 8002b8e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	9300      	str	r3, [sp, #0]
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	2200      	movs	r2, #0
 8002b98:	2180      	movs	r1, #128	; 0x80
 8002b9a:	68f8      	ldr	r0, [r7, #12]
 8002b9c:	f7ff ff18 	bl	80029d0 <SPI_WaitFlagStateUntilTimeout>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d007      	beq.n	8002bb6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002baa:	f043 0220 	orr.w	r2, r3, #32
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e000      	b.n	8002bb8 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002bb6:	2300      	movs	r3, #0
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3710      	adds	r7, #16
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}

08002bc0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b082      	sub	sp, #8
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d101      	bne.n	8002bd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e03f      	b.n	8002c52 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d106      	bne.n	8002bec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2200      	movs	r2, #0
 8002be2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f7fd fe60 	bl	80008ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2224      	movs	r2, #36	; 0x24
 8002bf0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	68da      	ldr	r2, [r3, #12]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c02:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f000 f905 	bl	8002e14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	691a      	ldr	r2, [r3, #16]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c18:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	695a      	ldr	r2, [r3, #20]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c28:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	68da      	ldr	r2, [r3, #12]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c38:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2220      	movs	r2, #32
 8002c44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2220      	movs	r2, #32
 8002c4c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002c50:	2300      	movs	r3, #0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3708      	adds	r7, #8
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}

08002c5a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c5a:	b580      	push	{r7, lr}
 8002c5c:	b08a      	sub	sp, #40	; 0x28
 8002c5e:	af02      	add	r7, sp, #8
 8002c60:	60f8      	str	r0, [r7, #12]
 8002c62:	60b9      	str	r1, [r7, #8]
 8002c64:	603b      	str	r3, [r7, #0]
 8002c66:	4613      	mov	r3, r2
 8002c68:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	2b20      	cmp	r3, #32
 8002c78:	d17c      	bne.n	8002d74 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d002      	beq.n	8002c86 <HAL_UART_Transmit+0x2c>
 8002c80:	88fb      	ldrh	r3, [r7, #6]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d101      	bne.n	8002c8a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e075      	b.n	8002d76 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d101      	bne.n	8002c98 <HAL_UART_Transmit+0x3e>
 8002c94:	2302      	movs	r3, #2
 8002c96:	e06e      	b.n	8002d76 <HAL_UART_Transmit+0x11c>
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2221      	movs	r2, #33	; 0x21
 8002caa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002cae:	f7fd ff65 	bl	8000b7c <HAL_GetTick>
 8002cb2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	88fa      	ldrh	r2, [r7, #6]
 8002cb8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	88fa      	ldrh	r2, [r7, #6]
 8002cbe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cc8:	d108      	bne.n	8002cdc <HAL_UART_Transmit+0x82>
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	691b      	ldr	r3, [r3, #16]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d104      	bne.n	8002cdc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	61bb      	str	r3, [r7, #24]
 8002cda:	e003      	b.n	8002ce4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002cec:	e02a      	b.n	8002d44 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	9300      	str	r3, [sp, #0]
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	2180      	movs	r1, #128	; 0x80
 8002cf8:	68f8      	ldr	r0, [r7, #12]
 8002cfa:	f000 f840 	bl	8002d7e <UART_WaitOnFlagUntilTimeout>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d001      	beq.n	8002d08 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002d04:	2303      	movs	r3, #3
 8002d06:	e036      	b.n	8002d76 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d10b      	bne.n	8002d26 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	881b      	ldrh	r3, [r3, #0]
 8002d12:	461a      	mov	r2, r3
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d1c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002d1e:	69bb      	ldr	r3, [r7, #24]
 8002d20:	3302      	adds	r3, #2
 8002d22:	61bb      	str	r3, [r7, #24]
 8002d24:	e007      	b.n	8002d36 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	781a      	ldrb	r2, [r3, #0]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	3301      	adds	r3, #1
 8002d34:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	3b01      	subs	r3, #1
 8002d3e:	b29a      	uxth	r2, r3
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d1cf      	bne.n	8002cee <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	9300      	str	r3, [sp, #0]
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	2200      	movs	r2, #0
 8002d56:	2140      	movs	r1, #64	; 0x40
 8002d58:	68f8      	ldr	r0, [r7, #12]
 8002d5a:	f000 f810 	bl	8002d7e <UART_WaitOnFlagUntilTimeout>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d001      	beq.n	8002d68 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002d64:	2303      	movs	r3, #3
 8002d66:	e006      	b.n	8002d76 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2220      	movs	r2, #32
 8002d6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002d70:	2300      	movs	r3, #0
 8002d72:	e000      	b.n	8002d76 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002d74:	2302      	movs	r3, #2
  }
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3720      	adds	r7, #32
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}

08002d7e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002d7e:	b580      	push	{r7, lr}
 8002d80:	b084      	sub	sp, #16
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	60f8      	str	r0, [r7, #12]
 8002d86:	60b9      	str	r1, [r7, #8]
 8002d88:	603b      	str	r3, [r7, #0]
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d8e:	e02c      	b.n	8002dea <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d90:	69bb      	ldr	r3, [r7, #24]
 8002d92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d96:	d028      	beq.n	8002dea <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d007      	beq.n	8002dae <UART_WaitOnFlagUntilTimeout+0x30>
 8002d9e:	f7fd feed 	bl	8000b7c <HAL_GetTick>
 8002da2:	4602      	mov	r2, r0
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	1ad3      	subs	r3, r2, r3
 8002da8:	69ba      	ldr	r2, [r7, #24]
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d21d      	bcs.n	8002dea <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	68da      	ldr	r2, [r3, #12]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002dbc:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	695a      	ldr	r2, [r3, #20]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f022 0201 	bic.w	r2, r2, #1
 8002dcc:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2220      	movs	r2, #32
 8002dd2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2220      	movs	r2, #32
 8002dda:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2200      	movs	r2, #0
 8002de2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e00f      	b.n	8002e0a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	4013      	ands	r3, r2
 8002df4:	68ba      	ldr	r2, [r7, #8]
 8002df6:	429a      	cmp	r2, r3
 8002df8:	bf0c      	ite	eq
 8002dfa:	2301      	moveq	r3, #1
 8002dfc:	2300      	movne	r3, #0
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	461a      	mov	r2, r3
 8002e02:	79fb      	ldrb	r3, [r7, #7]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d0c3      	beq.n	8002d90 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3710      	adds	r7, #16
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
	...

08002e14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b084      	sub	sp, #16
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	691b      	ldr	r3, [r3, #16]
 8002e22:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	68da      	ldr	r2, [r3, #12]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	430a      	orrs	r2, r1
 8002e30:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	689a      	ldr	r2, [r3, #8]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	691b      	ldr	r3, [r3, #16]
 8002e3a:	431a      	orrs	r2, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	695b      	ldr	r3, [r3, #20]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002e4e:	f023 030c 	bic.w	r3, r3, #12
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	6812      	ldr	r2, [r2, #0]
 8002e56:	68b9      	ldr	r1, [r7, #8]
 8002e58:	430b      	orrs	r3, r1
 8002e5a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	695b      	ldr	r3, [r3, #20]
 8002e62:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	699a      	ldr	r2, [r3, #24]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	430a      	orrs	r2, r1
 8002e70:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a2c      	ldr	r2, [pc, #176]	; (8002f28 <UART_SetConfig+0x114>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d103      	bne.n	8002e84 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002e7c:	f7ff f9b0 	bl	80021e0 <HAL_RCC_GetPCLK2Freq>
 8002e80:	60f8      	str	r0, [r7, #12]
 8002e82:	e002      	b.n	8002e8a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002e84:	f7ff f998 	bl	80021b8 <HAL_RCC_GetPCLK1Freq>
 8002e88:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e8a:	68fa      	ldr	r2, [r7, #12]
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	4413      	add	r3, r2
 8002e92:	009a      	lsls	r2, r3, #2
 8002e94:	441a      	add	r2, r3
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ea0:	4a22      	ldr	r2, [pc, #136]	; (8002f2c <UART_SetConfig+0x118>)
 8002ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ea6:	095b      	lsrs	r3, r3, #5
 8002ea8:	0119      	lsls	r1, r3, #4
 8002eaa:	68fa      	ldr	r2, [r7, #12]
 8002eac:	4613      	mov	r3, r2
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	4413      	add	r3, r2
 8002eb2:	009a      	lsls	r2, r3, #2
 8002eb4:	441a      	add	r2, r3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ec0:	4b1a      	ldr	r3, [pc, #104]	; (8002f2c <UART_SetConfig+0x118>)
 8002ec2:	fba3 0302 	umull	r0, r3, r3, r2
 8002ec6:	095b      	lsrs	r3, r3, #5
 8002ec8:	2064      	movs	r0, #100	; 0x64
 8002eca:	fb00 f303 	mul.w	r3, r0, r3
 8002ece:	1ad3      	subs	r3, r2, r3
 8002ed0:	011b      	lsls	r3, r3, #4
 8002ed2:	3332      	adds	r3, #50	; 0x32
 8002ed4:	4a15      	ldr	r2, [pc, #84]	; (8002f2c <UART_SetConfig+0x118>)
 8002ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eda:	095b      	lsrs	r3, r3, #5
 8002edc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ee0:	4419      	add	r1, r3
 8002ee2:	68fa      	ldr	r2, [r7, #12]
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	4413      	add	r3, r2
 8002eea:	009a      	lsls	r2, r3, #2
 8002eec:	441a      	add	r2, r3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ef8:	4b0c      	ldr	r3, [pc, #48]	; (8002f2c <UART_SetConfig+0x118>)
 8002efa:	fba3 0302 	umull	r0, r3, r3, r2
 8002efe:	095b      	lsrs	r3, r3, #5
 8002f00:	2064      	movs	r0, #100	; 0x64
 8002f02:	fb00 f303 	mul.w	r3, r0, r3
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	011b      	lsls	r3, r3, #4
 8002f0a:	3332      	adds	r3, #50	; 0x32
 8002f0c:	4a07      	ldr	r2, [pc, #28]	; (8002f2c <UART_SetConfig+0x118>)
 8002f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f12:	095b      	lsrs	r3, r3, #5
 8002f14:	f003 020f 	and.w	r2, r3, #15
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	440a      	add	r2, r1
 8002f1e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002f20:	bf00      	nop
 8002f22:	3710      	adds	r7, #16
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	40013800 	.word	0x40013800
 8002f2c:	51eb851f 	.word	0x51eb851f

08002f30 <__errno>:
 8002f30:	4b01      	ldr	r3, [pc, #4]	; (8002f38 <__errno+0x8>)
 8002f32:	6818      	ldr	r0, [r3, #0]
 8002f34:	4770      	bx	lr
 8002f36:	bf00      	nop
 8002f38:	20000010 	.word	0x20000010

08002f3c <__libc_init_array>:
 8002f3c:	b570      	push	{r4, r5, r6, lr}
 8002f3e:	2500      	movs	r5, #0
 8002f40:	4e0c      	ldr	r6, [pc, #48]	; (8002f74 <__libc_init_array+0x38>)
 8002f42:	4c0d      	ldr	r4, [pc, #52]	; (8002f78 <__libc_init_array+0x3c>)
 8002f44:	1ba4      	subs	r4, r4, r6
 8002f46:	10a4      	asrs	r4, r4, #2
 8002f48:	42a5      	cmp	r5, r4
 8002f4a:	d109      	bne.n	8002f60 <__libc_init_array+0x24>
 8002f4c:	f000 fc36 	bl	80037bc <_init>
 8002f50:	2500      	movs	r5, #0
 8002f52:	4e0a      	ldr	r6, [pc, #40]	; (8002f7c <__libc_init_array+0x40>)
 8002f54:	4c0a      	ldr	r4, [pc, #40]	; (8002f80 <__libc_init_array+0x44>)
 8002f56:	1ba4      	subs	r4, r4, r6
 8002f58:	10a4      	asrs	r4, r4, #2
 8002f5a:	42a5      	cmp	r5, r4
 8002f5c:	d105      	bne.n	8002f6a <__libc_init_array+0x2e>
 8002f5e:	bd70      	pop	{r4, r5, r6, pc}
 8002f60:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002f64:	4798      	blx	r3
 8002f66:	3501      	adds	r5, #1
 8002f68:	e7ee      	b.n	8002f48 <__libc_init_array+0xc>
 8002f6a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002f6e:	4798      	blx	r3
 8002f70:	3501      	adds	r5, #1
 8002f72:	e7f2      	b.n	8002f5a <__libc_init_array+0x1e>
 8002f74:	080038b4 	.word	0x080038b4
 8002f78:	080038b4 	.word	0x080038b4
 8002f7c:	080038b4 	.word	0x080038b4
 8002f80:	080038b8 	.word	0x080038b8

08002f84 <memcpy>:
 8002f84:	b510      	push	{r4, lr}
 8002f86:	1e43      	subs	r3, r0, #1
 8002f88:	440a      	add	r2, r1
 8002f8a:	4291      	cmp	r1, r2
 8002f8c:	d100      	bne.n	8002f90 <memcpy+0xc>
 8002f8e:	bd10      	pop	{r4, pc}
 8002f90:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002f94:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002f98:	e7f7      	b.n	8002f8a <memcpy+0x6>

08002f9a <memset>:
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	4402      	add	r2, r0
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d100      	bne.n	8002fa4 <memset+0xa>
 8002fa2:	4770      	bx	lr
 8002fa4:	f803 1b01 	strb.w	r1, [r3], #1
 8002fa8:	e7f9      	b.n	8002f9e <memset+0x4>
	...

08002fac <_vsiprintf_r>:
 8002fac:	b500      	push	{lr}
 8002fae:	b09b      	sub	sp, #108	; 0x6c
 8002fb0:	9100      	str	r1, [sp, #0]
 8002fb2:	9104      	str	r1, [sp, #16]
 8002fb4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002fb8:	9105      	str	r1, [sp, #20]
 8002fba:	9102      	str	r1, [sp, #8]
 8002fbc:	4905      	ldr	r1, [pc, #20]	; (8002fd4 <_vsiprintf_r+0x28>)
 8002fbe:	9103      	str	r1, [sp, #12]
 8002fc0:	4669      	mov	r1, sp
 8002fc2:	f000 f86d 	bl	80030a0 <_svfiprintf_r>
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	9b00      	ldr	r3, [sp, #0]
 8002fca:	701a      	strb	r2, [r3, #0]
 8002fcc:	b01b      	add	sp, #108	; 0x6c
 8002fce:	f85d fb04 	ldr.w	pc, [sp], #4
 8002fd2:	bf00      	nop
 8002fd4:	ffff0208 	.word	0xffff0208

08002fd8 <vsiprintf>:
 8002fd8:	4613      	mov	r3, r2
 8002fda:	460a      	mov	r2, r1
 8002fdc:	4601      	mov	r1, r0
 8002fde:	4802      	ldr	r0, [pc, #8]	; (8002fe8 <vsiprintf+0x10>)
 8002fe0:	6800      	ldr	r0, [r0, #0]
 8002fe2:	f7ff bfe3 	b.w	8002fac <_vsiprintf_r>
 8002fe6:	bf00      	nop
 8002fe8:	20000010 	.word	0x20000010

08002fec <__ssputs_r>:
 8002fec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ff0:	688e      	ldr	r6, [r1, #8]
 8002ff2:	4682      	mov	sl, r0
 8002ff4:	429e      	cmp	r6, r3
 8002ff6:	460c      	mov	r4, r1
 8002ff8:	4690      	mov	r8, r2
 8002ffa:	4699      	mov	r9, r3
 8002ffc:	d837      	bhi.n	800306e <__ssputs_r+0x82>
 8002ffe:	898a      	ldrh	r2, [r1, #12]
 8003000:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003004:	d031      	beq.n	800306a <__ssputs_r+0x7e>
 8003006:	2302      	movs	r3, #2
 8003008:	6825      	ldr	r5, [r4, #0]
 800300a:	6909      	ldr	r1, [r1, #16]
 800300c:	1a6f      	subs	r7, r5, r1
 800300e:	6965      	ldr	r5, [r4, #20]
 8003010:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003014:	fb95 f5f3 	sdiv	r5, r5, r3
 8003018:	f109 0301 	add.w	r3, r9, #1
 800301c:	443b      	add	r3, r7
 800301e:	429d      	cmp	r5, r3
 8003020:	bf38      	it	cc
 8003022:	461d      	movcc	r5, r3
 8003024:	0553      	lsls	r3, r2, #21
 8003026:	d530      	bpl.n	800308a <__ssputs_r+0x9e>
 8003028:	4629      	mov	r1, r5
 800302a:	f000 fb2d 	bl	8003688 <_malloc_r>
 800302e:	4606      	mov	r6, r0
 8003030:	b950      	cbnz	r0, 8003048 <__ssputs_r+0x5c>
 8003032:	230c      	movs	r3, #12
 8003034:	f04f 30ff 	mov.w	r0, #4294967295
 8003038:	f8ca 3000 	str.w	r3, [sl]
 800303c:	89a3      	ldrh	r3, [r4, #12]
 800303e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003042:	81a3      	strh	r3, [r4, #12]
 8003044:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003048:	463a      	mov	r2, r7
 800304a:	6921      	ldr	r1, [r4, #16]
 800304c:	f7ff ff9a 	bl	8002f84 <memcpy>
 8003050:	89a3      	ldrh	r3, [r4, #12]
 8003052:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003056:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800305a:	81a3      	strh	r3, [r4, #12]
 800305c:	6126      	str	r6, [r4, #16]
 800305e:	443e      	add	r6, r7
 8003060:	6026      	str	r6, [r4, #0]
 8003062:	464e      	mov	r6, r9
 8003064:	6165      	str	r5, [r4, #20]
 8003066:	1bed      	subs	r5, r5, r7
 8003068:	60a5      	str	r5, [r4, #8]
 800306a:	454e      	cmp	r6, r9
 800306c:	d900      	bls.n	8003070 <__ssputs_r+0x84>
 800306e:	464e      	mov	r6, r9
 8003070:	4632      	mov	r2, r6
 8003072:	4641      	mov	r1, r8
 8003074:	6820      	ldr	r0, [r4, #0]
 8003076:	f000 faa1 	bl	80035bc <memmove>
 800307a:	68a3      	ldr	r3, [r4, #8]
 800307c:	2000      	movs	r0, #0
 800307e:	1b9b      	subs	r3, r3, r6
 8003080:	60a3      	str	r3, [r4, #8]
 8003082:	6823      	ldr	r3, [r4, #0]
 8003084:	441e      	add	r6, r3
 8003086:	6026      	str	r6, [r4, #0]
 8003088:	e7dc      	b.n	8003044 <__ssputs_r+0x58>
 800308a:	462a      	mov	r2, r5
 800308c:	f000 fb56 	bl	800373c <_realloc_r>
 8003090:	4606      	mov	r6, r0
 8003092:	2800      	cmp	r0, #0
 8003094:	d1e2      	bne.n	800305c <__ssputs_r+0x70>
 8003096:	6921      	ldr	r1, [r4, #16]
 8003098:	4650      	mov	r0, sl
 800309a:	f000 faa9 	bl	80035f0 <_free_r>
 800309e:	e7c8      	b.n	8003032 <__ssputs_r+0x46>

080030a0 <_svfiprintf_r>:
 80030a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030a4:	461d      	mov	r5, r3
 80030a6:	898b      	ldrh	r3, [r1, #12]
 80030a8:	b09d      	sub	sp, #116	; 0x74
 80030aa:	061f      	lsls	r7, r3, #24
 80030ac:	4680      	mov	r8, r0
 80030ae:	460c      	mov	r4, r1
 80030b0:	4616      	mov	r6, r2
 80030b2:	d50f      	bpl.n	80030d4 <_svfiprintf_r+0x34>
 80030b4:	690b      	ldr	r3, [r1, #16]
 80030b6:	b96b      	cbnz	r3, 80030d4 <_svfiprintf_r+0x34>
 80030b8:	2140      	movs	r1, #64	; 0x40
 80030ba:	f000 fae5 	bl	8003688 <_malloc_r>
 80030be:	6020      	str	r0, [r4, #0]
 80030c0:	6120      	str	r0, [r4, #16]
 80030c2:	b928      	cbnz	r0, 80030d0 <_svfiprintf_r+0x30>
 80030c4:	230c      	movs	r3, #12
 80030c6:	f8c8 3000 	str.w	r3, [r8]
 80030ca:	f04f 30ff 	mov.w	r0, #4294967295
 80030ce:	e0c8      	b.n	8003262 <_svfiprintf_r+0x1c2>
 80030d0:	2340      	movs	r3, #64	; 0x40
 80030d2:	6163      	str	r3, [r4, #20]
 80030d4:	2300      	movs	r3, #0
 80030d6:	9309      	str	r3, [sp, #36]	; 0x24
 80030d8:	2320      	movs	r3, #32
 80030da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80030de:	2330      	movs	r3, #48	; 0x30
 80030e0:	f04f 0b01 	mov.w	fp, #1
 80030e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80030e8:	9503      	str	r5, [sp, #12]
 80030ea:	4637      	mov	r7, r6
 80030ec:	463d      	mov	r5, r7
 80030ee:	f815 3b01 	ldrb.w	r3, [r5], #1
 80030f2:	b10b      	cbz	r3, 80030f8 <_svfiprintf_r+0x58>
 80030f4:	2b25      	cmp	r3, #37	; 0x25
 80030f6:	d13e      	bne.n	8003176 <_svfiprintf_r+0xd6>
 80030f8:	ebb7 0a06 	subs.w	sl, r7, r6
 80030fc:	d00b      	beq.n	8003116 <_svfiprintf_r+0x76>
 80030fe:	4653      	mov	r3, sl
 8003100:	4632      	mov	r2, r6
 8003102:	4621      	mov	r1, r4
 8003104:	4640      	mov	r0, r8
 8003106:	f7ff ff71 	bl	8002fec <__ssputs_r>
 800310a:	3001      	adds	r0, #1
 800310c:	f000 80a4 	beq.w	8003258 <_svfiprintf_r+0x1b8>
 8003110:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003112:	4453      	add	r3, sl
 8003114:	9309      	str	r3, [sp, #36]	; 0x24
 8003116:	783b      	ldrb	r3, [r7, #0]
 8003118:	2b00      	cmp	r3, #0
 800311a:	f000 809d 	beq.w	8003258 <_svfiprintf_r+0x1b8>
 800311e:	2300      	movs	r3, #0
 8003120:	f04f 32ff 	mov.w	r2, #4294967295
 8003124:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003128:	9304      	str	r3, [sp, #16]
 800312a:	9307      	str	r3, [sp, #28]
 800312c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003130:	931a      	str	r3, [sp, #104]	; 0x68
 8003132:	462f      	mov	r7, r5
 8003134:	2205      	movs	r2, #5
 8003136:	f817 1b01 	ldrb.w	r1, [r7], #1
 800313a:	4850      	ldr	r0, [pc, #320]	; (800327c <_svfiprintf_r+0x1dc>)
 800313c:	f000 fa30 	bl	80035a0 <memchr>
 8003140:	9b04      	ldr	r3, [sp, #16]
 8003142:	b9d0      	cbnz	r0, 800317a <_svfiprintf_r+0xda>
 8003144:	06d9      	lsls	r1, r3, #27
 8003146:	bf44      	itt	mi
 8003148:	2220      	movmi	r2, #32
 800314a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800314e:	071a      	lsls	r2, r3, #28
 8003150:	bf44      	itt	mi
 8003152:	222b      	movmi	r2, #43	; 0x2b
 8003154:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003158:	782a      	ldrb	r2, [r5, #0]
 800315a:	2a2a      	cmp	r2, #42	; 0x2a
 800315c:	d015      	beq.n	800318a <_svfiprintf_r+0xea>
 800315e:	462f      	mov	r7, r5
 8003160:	2000      	movs	r0, #0
 8003162:	250a      	movs	r5, #10
 8003164:	9a07      	ldr	r2, [sp, #28]
 8003166:	4639      	mov	r1, r7
 8003168:	f811 3b01 	ldrb.w	r3, [r1], #1
 800316c:	3b30      	subs	r3, #48	; 0x30
 800316e:	2b09      	cmp	r3, #9
 8003170:	d94d      	bls.n	800320e <_svfiprintf_r+0x16e>
 8003172:	b1b8      	cbz	r0, 80031a4 <_svfiprintf_r+0x104>
 8003174:	e00f      	b.n	8003196 <_svfiprintf_r+0xf6>
 8003176:	462f      	mov	r7, r5
 8003178:	e7b8      	b.n	80030ec <_svfiprintf_r+0x4c>
 800317a:	4a40      	ldr	r2, [pc, #256]	; (800327c <_svfiprintf_r+0x1dc>)
 800317c:	463d      	mov	r5, r7
 800317e:	1a80      	subs	r0, r0, r2
 8003180:	fa0b f000 	lsl.w	r0, fp, r0
 8003184:	4318      	orrs	r0, r3
 8003186:	9004      	str	r0, [sp, #16]
 8003188:	e7d3      	b.n	8003132 <_svfiprintf_r+0x92>
 800318a:	9a03      	ldr	r2, [sp, #12]
 800318c:	1d11      	adds	r1, r2, #4
 800318e:	6812      	ldr	r2, [r2, #0]
 8003190:	9103      	str	r1, [sp, #12]
 8003192:	2a00      	cmp	r2, #0
 8003194:	db01      	blt.n	800319a <_svfiprintf_r+0xfa>
 8003196:	9207      	str	r2, [sp, #28]
 8003198:	e004      	b.n	80031a4 <_svfiprintf_r+0x104>
 800319a:	4252      	negs	r2, r2
 800319c:	f043 0302 	orr.w	r3, r3, #2
 80031a0:	9207      	str	r2, [sp, #28]
 80031a2:	9304      	str	r3, [sp, #16]
 80031a4:	783b      	ldrb	r3, [r7, #0]
 80031a6:	2b2e      	cmp	r3, #46	; 0x2e
 80031a8:	d10c      	bne.n	80031c4 <_svfiprintf_r+0x124>
 80031aa:	787b      	ldrb	r3, [r7, #1]
 80031ac:	2b2a      	cmp	r3, #42	; 0x2a
 80031ae:	d133      	bne.n	8003218 <_svfiprintf_r+0x178>
 80031b0:	9b03      	ldr	r3, [sp, #12]
 80031b2:	3702      	adds	r7, #2
 80031b4:	1d1a      	adds	r2, r3, #4
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	9203      	str	r2, [sp, #12]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	bfb8      	it	lt
 80031be:	f04f 33ff 	movlt.w	r3, #4294967295
 80031c2:	9305      	str	r3, [sp, #20]
 80031c4:	4d2e      	ldr	r5, [pc, #184]	; (8003280 <_svfiprintf_r+0x1e0>)
 80031c6:	2203      	movs	r2, #3
 80031c8:	7839      	ldrb	r1, [r7, #0]
 80031ca:	4628      	mov	r0, r5
 80031cc:	f000 f9e8 	bl	80035a0 <memchr>
 80031d0:	b138      	cbz	r0, 80031e2 <_svfiprintf_r+0x142>
 80031d2:	2340      	movs	r3, #64	; 0x40
 80031d4:	1b40      	subs	r0, r0, r5
 80031d6:	fa03 f000 	lsl.w	r0, r3, r0
 80031da:	9b04      	ldr	r3, [sp, #16]
 80031dc:	3701      	adds	r7, #1
 80031de:	4303      	orrs	r3, r0
 80031e0:	9304      	str	r3, [sp, #16]
 80031e2:	7839      	ldrb	r1, [r7, #0]
 80031e4:	2206      	movs	r2, #6
 80031e6:	4827      	ldr	r0, [pc, #156]	; (8003284 <_svfiprintf_r+0x1e4>)
 80031e8:	1c7e      	adds	r6, r7, #1
 80031ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80031ee:	f000 f9d7 	bl	80035a0 <memchr>
 80031f2:	2800      	cmp	r0, #0
 80031f4:	d038      	beq.n	8003268 <_svfiprintf_r+0x1c8>
 80031f6:	4b24      	ldr	r3, [pc, #144]	; (8003288 <_svfiprintf_r+0x1e8>)
 80031f8:	bb13      	cbnz	r3, 8003240 <_svfiprintf_r+0x1a0>
 80031fa:	9b03      	ldr	r3, [sp, #12]
 80031fc:	3307      	adds	r3, #7
 80031fe:	f023 0307 	bic.w	r3, r3, #7
 8003202:	3308      	adds	r3, #8
 8003204:	9303      	str	r3, [sp, #12]
 8003206:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003208:	444b      	add	r3, r9
 800320a:	9309      	str	r3, [sp, #36]	; 0x24
 800320c:	e76d      	b.n	80030ea <_svfiprintf_r+0x4a>
 800320e:	fb05 3202 	mla	r2, r5, r2, r3
 8003212:	2001      	movs	r0, #1
 8003214:	460f      	mov	r7, r1
 8003216:	e7a6      	b.n	8003166 <_svfiprintf_r+0xc6>
 8003218:	2300      	movs	r3, #0
 800321a:	250a      	movs	r5, #10
 800321c:	4619      	mov	r1, r3
 800321e:	3701      	adds	r7, #1
 8003220:	9305      	str	r3, [sp, #20]
 8003222:	4638      	mov	r0, r7
 8003224:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003228:	3a30      	subs	r2, #48	; 0x30
 800322a:	2a09      	cmp	r2, #9
 800322c:	d903      	bls.n	8003236 <_svfiprintf_r+0x196>
 800322e:	2b00      	cmp	r3, #0
 8003230:	d0c8      	beq.n	80031c4 <_svfiprintf_r+0x124>
 8003232:	9105      	str	r1, [sp, #20]
 8003234:	e7c6      	b.n	80031c4 <_svfiprintf_r+0x124>
 8003236:	fb05 2101 	mla	r1, r5, r1, r2
 800323a:	2301      	movs	r3, #1
 800323c:	4607      	mov	r7, r0
 800323e:	e7f0      	b.n	8003222 <_svfiprintf_r+0x182>
 8003240:	ab03      	add	r3, sp, #12
 8003242:	9300      	str	r3, [sp, #0]
 8003244:	4622      	mov	r2, r4
 8003246:	4b11      	ldr	r3, [pc, #68]	; (800328c <_svfiprintf_r+0x1ec>)
 8003248:	a904      	add	r1, sp, #16
 800324a:	4640      	mov	r0, r8
 800324c:	f3af 8000 	nop.w
 8003250:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003254:	4681      	mov	r9, r0
 8003256:	d1d6      	bne.n	8003206 <_svfiprintf_r+0x166>
 8003258:	89a3      	ldrh	r3, [r4, #12]
 800325a:	065b      	lsls	r3, r3, #25
 800325c:	f53f af35 	bmi.w	80030ca <_svfiprintf_r+0x2a>
 8003260:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003262:	b01d      	add	sp, #116	; 0x74
 8003264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003268:	ab03      	add	r3, sp, #12
 800326a:	9300      	str	r3, [sp, #0]
 800326c:	4622      	mov	r2, r4
 800326e:	4b07      	ldr	r3, [pc, #28]	; (800328c <_svfiprintf_r+0x1ec>)
 8003270:	a904      	add	r1, sp, #16
 8003272:	4640      	mov	r0, r8
 8003274:	f000 f882 	bl	800337c <_printf_i>
 8003278:	e7ea      	b.n	8003250 <_svfiprintf_r+0x1b0>
 800327a:	bf00      	nop
 800327c:	08003880 	.word	0x08003880
 8003280:	08003886 	.word	0x08003886
 8003284:	0800388a 	.word	0x0800388a
 8003288:	00000000 	.word	0x00000000
 800328c:	08002fed 	.word	0x08002fed

08003290 <_printf_common>:
 8003290:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003294:	4691      	mov	r9, r2
 8003296:	461f      	mov	r7, r3
 8003298:	688a      	ldr	r2, [r1, #8]
 800329a:	690b      	ldr	r3, [r1, #16]
 800329c:	4606      	mov	r6, r0
 800329e:	4293      	cmp	r3, r2
 80032a0:	bfb8      	it	lt
 80032a2:	4613      	movlt	r3, r2
 80032a4:	f8c9 3000 	str.w	r3, [r9]
 80032a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80032ac:	460c      	mov	r4, r1
 80032ae:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80032b2:	b112      	cbz	r2, 80032ba <_printf_common+0x2a>
 80032b4:	3301      	adds	r3, #1
 80032b6:	f8c9 3000 	str.w	r3, [r9]
 80032ba:	6823      	ldr	r3, [r4, #0]
 80032bc:	0699      	lsls	r1, r3, #26
 80032be:	bf42      	ittt	mi
 80032c0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80032c4:	3302      	addmi	r3, #2
 80032c6:	f8c9 3000 	strmi.w	r3, [r9]
 80032ca:	6825      	ldr	r5, [r4, #0]
 80032cc:	f015 0506 	ands.w	r5, r5, #6
 80032d0:	d107      	bne.n	80032e2 <_printf_common+0x52>
 80032d2:	f104 0a19 	add.w	sl, r4, #25
 80032d6:	68e3      	ldr	r3, [r4, #12]
 80032d8:	f8d9 2000 	ldr.w	r2, [r9]
 80032dc:	1a9b      	subs	r3, r3, r2
 80032de:	42ab      	cmp	r3, r5
 80032e0:	dc29      	bgt.n	8003336 <_printf_common+0xa6>
 80032e2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80032e6:	6822      	ldr	r2, [r4, #0]
 80032e8:	3300      	adds	r3, #0
 80032ea:	bf18      	it	ne
 80032ec:	2301      	movne	r3, #1
 80032ee:	0692      	lsls	r2, r2, #26
 80032f0:	d42e      	bmi.n	8003350 <_printf_common+0xc0>
 80032f2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80032f6:	4639      	mov	r1, r7
 80032f8:	4630      	mov	r0, r6
 80032fa:	47c0      	blx	r8
 80032fc:	3001      	adds	r0, #1
 80032fe:	d021      	beq.n	8003344 <_printf_common+0xb4>
 8003300:	6823      	ldr	r3, [r4, #0]
 8003302:	68e5      	ldr	r5, [r4, #12]
 8003304:	f003 0306 	and.w	r3, r3, #6
 8003308:	2b04      	cmp	r3, #4
 800330a:	bf18      	it	ne
 800330c:	2500      	movne	r5, #0
 800330e:	f8d9 2000 	ldr.w	r2, [r9]
 8003312:	f04f 0900 	mov.w	r9, #0
 8003316:	bf08      	it	eq
 8003318:	1aad      	subeq	r5, r5, r2
 800331a:	68a3      	ldr	r3, [r4, #8]
 800331c:	6922      	ldr	r2, [r4, #16]
 800331e:	bf08      	it	eq
 8003320:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003324:	4293      	cmp	r3, r2
 8003326:	bfc4      	itt	gt
 8003328:	1a9b      	subgt	r3, r3, r2
 800332a:	18ed      	addgt	r5, r5, r3
 800332c:	341a      	adds	r4, #26
 800332e:	454d      	cmp	r5, r9
 8003330:	d11a      	bne.n	8003368 <_printf_common+0xd8>
 8003332:	2000      	movs	r0, #0
 8003334:	e008      	b.n	8003348 <_printf_common+0xb8>
 8003336:	2301      	movs	r3, #1
 8003338:	4652      	mov	r2, sl
 800333a:	4639      	mov	r1, r7
 800333c:	4630      	mov	r0, r6
 800333e:	47c0      	blx	r8
 8003340:	3001      	adds	r0, #1
 8003342:	d103      	bne.n	800334c <_printf_common+0xbc>
 8003344:	f04f 30ff 	mov.w	r0, #4294967295
 8003348:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800334c:	3501      	adds	r5, #1
 800334e:	e7c2      	b.n	80032d6 <_printf_common+0x46>
 8003350:	2030      	movs	r0, #48	; 0x30
 8003352:	18e1      	adds	r1, r4, r3
 8003354:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003358:	1c5a      	adds	r2, r3, #1
 800335a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800335e:	4422      	add	r2, r4
 8003360:	3302      	adds	r3, #2
 8003362:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003366:	e7c4      	b.n	80032f2 <_printf_common+0x62>
 8003368:	2301      	movs	r3, #1
 800336a:	4622      	mov	r2, r4
 800336c:	4639      	mov	r1, r7
 800336e:	4630      	mov	r0, r6
 8003370:	47c0      	blx	r8
 8003372:	3001      	adds	r0, #1
 8003374:	d0e6      	beq.n	8003344 <_printf_common+0xb4>
 8003376:	f109 0901 	add.w	r9, r9, #1
 800337a:	e7d8      	b.n	800332e <_printf_common+0x9e>

0800337c <_printf_i>:
 800337c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003380:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003384:	460c      	mov	r4, r1
 8003386:	7e09      	ldrb	r1, [r1, #24]
 8003388:	b085      	sub	sp, #20
 800338a:	296e      	cmp	r1, #110	; 0x6e
 800338c:	4617      	mov	r7, r2
 800338e:	4606      	mov	r6, r0
 8003390:	4698      	mov	r8, r3
 8003392:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003394:	f000 80b3 	beq.w	80034fe <_printf_i+0x182>
 8003398:	d822      	bhi.n	80033e0 <_printf_i+0x64>
 800339a:	2963      	cmp	r1, #99	; 0x63
 800339c:	d036      	beq.n	800340c <_printf_i+0x90>
 800339e:	d80a      	bhi.n	80033b6 <_printf_i+0x3a>
 80033a0:	2900      	cmp	r1, #0
 80033a2:	f000 80b9 	beq.w	8003518 <_printf_i+0x19c>
 80033a6:	2958      	cmp	r1, #88	; 0x58
 80033a8:	f000 8083 	beq.w	80034b2 <_printf_i+0x136>
 80033ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80033b0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80033b4:	e032      	b.n	800341c <_printf_i+0xa0>
 80033b6:	2964      	cmp	r1, #100	; 0x64
 80033b8:	d001      	beq.n	80033be <_printf_i+0x42>
 80033ba:	2969      	cmp	r1, #105	; 0x69
 80033bc:	d1f6      	bne.n	80033ac <_printf_i+0x30>
 80033be:	6820      	ldr	r0, [r4, #0]
 80033c0:	6813      	ldr	r3, [r2, #0]
 80033c2:	0605      	lsls	r5, r0, #24
 80033c4:	f103 0104 	add.w	r1, r3, #4
 80033c8:	d52a      	bpl.n	8003420 <_printf_i+0xa4>
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	6011      	str	r1, [r2, #0]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	da03      	bge.n	80033da <_printf_i+0x5e>
 80033d2:	222d      	movs	r2, #45	; 0x2d
 80033d4:	425b      	negs	r3, r3
 80033d6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80033da:	486f      	ldr	r0, [pc, #444]	; (8003598 <_printf_i+0x21c>)
 80033dc:	220a      	movs	r2, #10
 80033de:	e039      	b.n	8003454 <_printf_i+0xd8>
 80033e0:	2973      	cmp	r1, #115	; 0x73
 80033e2:	f000 809d 	beq.w	8003520 <_printf_i+0x1a4>
 80033e6:	d808      	bhi.n	80033fa <_printf_i+0x7e>
 80033e8:	296f      	cmp	r1, #111	; 0x6f
 80033ea:	d020      	beq.n	800342e <_printf_i+0xb2>
 80033ec:	2970      	cmp	r1, #112	; 0x70
 80033ee:	d1dd      	bne.n	80033ac <_printf_i+0x30>
 80033f0:	6823      	ldr	r3, [r4, #0]
 80033f2:	f043 0320 	orr.w	r3, r3, #32
 80033f6:	6023      	str	r3, [r4, #0]
 80033f8:	e003      	b.n	8003402 <_printf_i+0x86>
 80033fa:	2975      	cmp	r1, #117	; 0x75
 80033fc:	d017      	beq.n	800342e <_printf_i+0xb2>
 80033fe:	2978      	cmp	r1, #120	; 0x78
 8003400:	d1d4      	bne.n	80033ac <_printf_i+0x30>
 8003402:	2378      	movs	r3, #120	; 0x78
 8003404:	4865      	ldr	r0, [pc, #404]	; (800359c <_printf_i+0x220>)
 8003406:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800340a:	e055      	b.n	80034b8 <_printf_i+0x13c>
 800340c:	6813      	ldr	r3, [r2, #0]
 800340e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003412:	1d19      	adds	r1, r3, #4
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	6011      	str	r1, [r2, #0]
 8003418:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800341c:	2301      	movs	r3, #1
 800341e:	e08c      	b.n	800353a <_printf_i+0x1be>
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003426:	6011      	str	r1, [r2, #0]
 8003428:	bf18      	it	ne
 800342a:	b21b      	sxthne	r3, r3
 800342c:	e7cf      	b.n	80033ce <_printf_i+0x52>
 800342e:	6813      	ldr	r3, [r2, #0]
 8003430:	6825      	ldr	r5, [r4, #0]
 8003432:	1d18      	adds	r0, r3, #4
 8003434:	6010      	str	r0, [r2, #0]
 8003436:	0628      	lsls	r0, r5, #24
 8003438:	d501      	bpl.n	800343e <_printf_i+0xc2>
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	e002      	b.n	8003444 <_printf_i+0xc8>
 800343e:	0668      	lsls	r0, r5, #25
 8003440:	d5fb      	bpl.n	800343a <_printf_i+0xbe>
 8003442:	881b      	ldrh	r3, [r3, #0]
 8003444:	296f      	cmp	r1, #111	; 0x6f
 8003446:	bf14      	ite	ne
 8003448:	220a      	movne	r2, #10
 800344a:	2208      	moveq	r2, #8
 800344c:	4852      	ldr	r0, [pc, #328]	; (8003598 <_printf_i+0x21c>)
 800344e:	2100      	movs	r1, #0
 8003450:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003454:	6865      	ldr	r5, [r4, #4]
 8003456:	2d00      	cmp	r5, #0
 8003458:	60a5      	str	r5, [r4, #8]
 800345a:	f2c0 8095 	blt.w	8003588 <_printf_i+0x20c>
 800345e:	6821      	ldr	r1, [r4, #0]
 8003460:	f021 0104 	bic.w	r1, r1, #4
 8003464:	6021      	str	r1, [r4, #0]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d13d      	bne.n	80034e6 <_printf_i+0x16a>
 800346a:	2d00      	cmp	r5, #0
 800346c:	f040 808e 	bne.w	800358c <_printf_i+0x210>
 8003470:	4665      	mov	r5, ip
 8003472:	2a08      	cmp	r2, #8
 8003474:	d10b      	bne.n	800348e <_printf_i+0x112>
 8003476:	6823      	ldr	r3, [r4, #0]
 8003478:	07db      	lsls	r3, r3, #31
 800347a:	d508      	bpl.n	800348e <_printf_i+0x112>
 800347c:	6923      	ldr	r3, [r4, #16]
 800347e:	6862      	ldr	r2, [r4, #4]
 8003480:	429a      	cmp	r2, r3
 8003482:	bfde      	ittt	le
 8003484:	2330      	movle	r3, #48	; 0x30
 8003486:	f805 3c01 	strble.w	r3, [r5, #-1]
 800348a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800348e:	ebac 0305 	sub.w	r3, ip, r5
 8003492:	6123      	str	r3, [r4, #16]
 8003494:	f8cd 8000 	str.w	r8, [sp]
 8003498:	463b      	mov	r3, r7
 800349a:	aa03      	add	r2, sp, #12
 800349c:	4621      	mov	r1, r4
 800349e:	4630      	mov	r0, r6
 80034a0:	f7ff fef6 	bl	8003290 <_printf_common>
 80034a4:	3001      	adds	r0, #1
 80034a6:	d14d      	bne.n	8003544 <_printf_i+0x1c8>
 80034a8:	f04f 30ff 	mov.w	r0, #4294967295
 80034ac:	b005      	add	sp, #20
 80034ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80034b2:	4839      	ldr	r0, [pc, #228]	; (8003598 <_printf_i+0x21c>)
 80034b4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80034b8:	6813      	ldr	r3, [r2, #0]
 80034ba:	6821      	ldr	r1, [r4, #0]
 80034bc:	1d1d      	adds	r5, r3, #4
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	6015      	str	r5, [r2, #0]
 80034c2:	060a      	lsls	r2, r1, #24
 80034c4:	d50b      	bpl.n	80034de <_printf_i+0x162>
 80034c6:	07ca      	lsls	r2, r1, #31
 80034c8:	bf44      	itt	mi
 80034ca:	f041 0120 	orrmi.w	r1, r1, #32
 80034ce:	6021      	strmi	r1, [r4, #0]
 80034d0:	b91b      	cbnz	r3, 80034da <_printf_i+0x15e>
 80034d2:	6822      	ldr	r2, [r4, #0]
 80034d4:	f022 0220 	bic.w	r2, r2, #32
 80034d8:	6022      	str	r2, [r4, #0]
 80034da:	2210      	movs	r2, #16
 80034dc:	e7b7      	b.n	800344e <_printf_i+0xd2>
 80034de:	064d      	lsls	r5, r1, #25
 80034e0:	bf48      	it	mi
 80034e2:	b29b      	uxthmi	r3, r3
 80034e4:	e7ef      	b.n	80034c6 <_printf_i+0x14a>
 80034e6:	4665      	mov	r5, ip
 80034e8:	fbb3 f1f2 	udiv	r1, r3, r2
 80034ec:	fb02 3311 	mls	r3, r2, r1, r3
 80034f0:	5cc3      	ldrb	r3, [r0, r3]
 80034f2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80034f6:	460b      	mov	r3, r1
 80034f8:	2900      	cmp	r1, #0
 80034fa:	d1f5      	bne.n	80034e8 <_printf_i+0x16c>
 80034fc:	e7b9      	b.n	8003472 <_printf_i+0xf6>
 80034fe:	6813      	ldr	r3, [r2, #0]
 8003500:	6825      	ldr	r5, [r4, #0]
 8003502:	1d18      	adds	r0, r3, #4
 8003504:	6961      	ldr	r1, [r4, #20]
 8003506:	6010      	str	r0, [r2, #0]
 8003508:	0628      	lsls	r0, r5, #24
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	d501      	bpl.n	8003512 <_printf_i+0x196>
 800350e:	6019      	str	r1, [r3, #0]
 8003510:	e002      	b.n	8003518 <_printf_i+0x19c>
 8003512:	066a      	lsls	r2, r5, #25
 8003514:	d5fb      	bpl.n	800350e <_printf_i+0x192>
 8003516:	8019      	strh	r1, [r3, #0]
 8003518:	2300      	movs	r3, #0
 800351a:	4665      	mov	r5, ip
 800351c:	6123      	str	r3, [r4, #16]
 800351e:	e7b9      	b.n	8003494 <_printf_i+0x118>
 8003520:	6813      	ldr	r3, [r2, #0]
 8003522:	1d19      	adds	r1, r3, #4
 8003524:	6011      	str	r1, [r2, #0]
 8003526:	681d      	ldr	r5, [r3, #0]
 8003528:	6862      	ldr	r2, [r4, #4]
 800352a:	2100      	movs	r1, #0
 800352c:	4628      	mov	r0, r5
 800352e:	f000 f837 	bl	80035a0 <memchr>
 8003532:	b108      	cbz	r0, 8003538 <_printf_i+0x1bc>
 8003534:	1b40      	subs	r0, r0, r5
 8003536:	6060      	str	r0, [r4, #4]
 8003538:	6863      	ldr	r3, [r4, #4]
 800353a:	6123      	str	r3, [r4, #16]
 800353c:	2300      	movs	r3, #0
 800353e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003542:	e7a7      	b.n	8003494 <_printf_i+0x118>
 8003544:	6923      	ldr	r3, [r4, #16]
 8003546:	462a      	mov	r2, r5
 8003548:	4639      	mov	r1, r7
 800354a:	4630      	mov	r0, r6
 800354c:	47c0      	blx	r8
 800354e:	3001      	adds	r0, #1
 8003550:	d0aa      	beq.n	80034a8 <_printf_i+0x12c>
 8003552:	6823      	ldr	r3, [r4, #0]
 8003554:	079b      	lsls	r3, r3, #30
 8003556:	d413      	bmi.n	8003580 <_printf_i+0x204>
 8003558:	68e0      	ldr	r0, [r4, #12]
 800355a:	9b03      	ldr	r3, [sp, #12]
 800355c:	4298      	cmp	r0, r3
 800355e:	bfb8      	it	lt
 8003560:	4618      	movlt	r0, r3
 8003562:	e7a3      	b.n	80034ac <_printf_i+0x130>
 8003564:	2301      	movs	r3, #1
 8003566:	464a      	mov	r2, r9
 8003568:	4639      	mov	r1, r7
 800356a:	4630      	mov	r0, r6
 800356c:	47c0      	blx	r8
 800356e:	3001      	adds	r0, #1
 8003570:	d09a      	beq.n	80034a8 <_printf_i+0x12c>
 8003572:	3501      	adds	r5, #1
 8003574:	68e3      	ldr	r3, [r4, #12]
 8003576:	9a03      	ldr	r2, [sp, #12]
 8003578:	1a9b      	subs	r3, r3, r2
 800357a:	42ab      	cmp	r3, r5
 800357c:	dcf2      	bgt.n	8003564 <_printf_i+0x1e8>
 800357e:	e7eb      	b.n	8003558 <_printf_i+0x1dc>
 8003580:	2500      	movs	r5, #0
 8003582:	f104 0919 	add.w	r9, r4, #25
 8003586:	e7f5      	b.n	8003574 <_printf_i+0x1f8>
 8003588:	2b00      	cmp	r3, #0
 800358a:	d1ac      	bne.n	80034e6 <_printf_i+0x16a>
 800358c:	7803      	ldrb	r3, [r0, #0]
 800358e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003592:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003596:	e76c      	b.n	8003472 <_printf_i+0xf6>
 8003598:	08003891 	.word	0x08003891
 800359c:	080038a2 	.word	0x080038a2

080035a0 <memchr>:
 80035a0:	b510      	push	{r4, lr}
 80035a2:	b2c9      	uxtb	r1, r1
 80035a4:	4402      	add	r2, r0
 80035a6:	4290      	cmp	r0, r2
 80035a8:	4603      	mov	r3, r0
 80035aa:	d101      	bne.n	80035b0 <memchr+0x10>
 80035ac:	2300      	movs	r3, #0
 80035ae:	e003      	b.n	80035b8 <memchr+0x18>
 80035b0:	781c      	ldrb	r4, [r3, #0]
 80035b2:	3001      	adds	r0, #1
 80035b4:	428c      	cmp	r4, r1
 80035b6:	d1f6      	bne.n	80035a6 <memchr+0x6>
 80035b8:	4618      	mov	r0, r3
 80035ba:	bd10      	pop	{r4, pc}

080035bc <memmove>:
 80035bc:	4288      	cmp	r0, r1
 80035be:	b510      	push	{r4, lr}
 80035c0:	eb01 0302 	add.w	r3, r1, r2
 80035c4:	d807      	bhi.n	80035d6 <memmove+0x1a>
 80035c6:	1e42      	subs	r2, r0, #1
 80035c8:	4299      	cmp	r1, r3
 80035ca:	d00a      	beq.n	80035e2 <memmove+0x26>
 80035cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80035d0:	f802 4f01 	strb.w	r4, [r2, #1]!
 80035d4:	e7f8      	b.n	80035c8 <memmove+0xc>
 80035d6:	4283      	cmp	r3, r0
 80035d8:	d9f5      	bls.n	80035c6 <memmove+0xa>
 80035da:	1881      	adds	r1, r0, r2
 80035dc:	1ad2      	subs	r2, r2, r3
 80035de:	42d3      	cmn	r3, r2
 80035e0:	d100      	bne.n	80035e4 <memmove+0x28>
 80035e2:	bd10      	pop	{r4, pc}
 80035e4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80035e8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80035ec:	e7f7      	b.n	80035de <memmove+0x22>
	...

080035f0 <_free_r>:
 80035f0:	b538      	push	{r3, r4, r5, lr}
 80035f2:	4605      	mov	r5, r0
 80035f4:	2900      	cmp	r1, #0
 80035f6:	d043      	beq.n	8003680 <_free_r+0x90>
 80035f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80035fc:	1f0c      	subs	r4, r1, #4
 80035fe:	2b00      	cmp	r3, #0
 8003600:	bfb8      	it	lt
 8003602:	18e4      	addlt	r4, r4, r3
 8003604:	f000 f8d0 	bl	80037a8 <__malloc_lock>
 8003608:	4a1e      	ldr	r2, [pc, #120]	; (8003684 <_free_r+0x94>)
 800360a:	6813      	ldr	r3, [r2, #0]
 800360c:	4610      	mov	r0, r2
 800360e:	b933      	cbnz	r3, 800361e <_free_r+0x2e>
 8003610:	6063      	str	r3, [r4, #4]
 8003612:	6014      	str	r4, [r2, #0]
 8003614:	4628      	mov	r0, r5
 8003616:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800361a:	f000 b8c6 	b.w	80037aa <__malloc_unlock>
 800361e:	42a3      	cmp	r3, r4
 8003620:	d90b      	bls.n	800363a <_free_r+0x4a>
 8003622:	6821      	ldr	r1, [r4, #0]
 8003624:	1862      	adds	r2, r4, r1
 8003626:	4293      	cmp	r3, r2
 8003628:	bf01      	itttt	eq
 800362a:	681a      	ldreq	r2, [r3, #0]
 800362c:	685b      	ldreq	r3, [r3, #4]
 800362e:	1852      	addeq	r2, r2, r1
 8003630:	6022      	streq	r2, [r4, #0]
 8003632:	6063      	str	r3, [r4, #4]
 8003634:	6004      	str	r4, [r0, #0]
 8003636:	e7ed      	b.n	8003614 <_free_r+0x24>
 8003638:	4613      	mov	r3, r2
 800363a:	685a      	ldr	r2, [r3, #4]
 800363c:	b10a      	cbz	r2, 8003642 <_free_r+0x52>
 800363e:	42a2      	cmp	r2, r4
 8003640:	d9fa      	bls.n	8003638 <_free_r+0x48>
 8003642:	6819      	ldr	r1, [r3, #0]
 8003644:	1858      	adds	r0, r3, r1
 8003646:	42a0      	cmp	r0, r4
 8003648:	d10b      	bne.n	8003662 <_free_r+0x72>
 800364a:	6820      	ldr	r0, [r4, #0]
 800364c:	4401      	add	r1, r0
 800364e:	1858      	adds	r0, r3, r1
 8003650:	4282      	cmp	r2, r0
 8003652:	6019      	str	r1, [r3, #0]
 8003654:	d1de      	bne.n	8003614 <_free_r+0x24>
 8003656:	6810      	ldr	r0, [r2, #0]
 8003658:	6852      	ldr	r2, [r2, #4]
 800365a:	4401      	add	r1, r0
 800365c:	6019      	str	r1, [r3, #0]
 800365e:	605a      	str	r2, [r3, #4]
 8003660:	e7d8      	b.n	8003614 <_free_r+0x24>
 8003662:	d902      	bls.n	800366a <_free_r+0x7a>
 8003664:	230c      	movs	r3, #12
 8003666:	602b      	str	r3, [r5, #0]
 8003668:	e7d4      	b.n	8003614 <_free_r+0x24>
 800366a:	6820      	ldr	r0, [r4, #0]
 800366c:	1821      	adds	r1, r4, r0
 800366e:	428a      	cmp	r2, r1
 8003670:	bf01      	itttt	eq
 8003672:	6811      	ldreq	r1, [r2, #0]
 8003674:	6852      	ldreq	r2, [r2, #4]
 8003676:	1809      	addeq	r1, r1, r0
 8003678:	6021      	streq	r1, [r4, #0]
 800367a:	6062      	str	r2, [r4, #4]
 800367c:	605c      	str	r4, [r3, #4]
 800367e:	e7c9      	b.n	8003614 <_free_r+0x24>
 8003680:	bd38      	pop	{r3, r4, r5, pc}
 8003682:	bf00      	nop
 8003684:	20000094 	.word	0x20000094

08003688 <_malloc_r>:
 8003688:	b570      	push	{r4, r5, r6, lr}
 800368a:	1ccd      	adds	r5, r1, #3
 800368c:	f025 0503 	bic.w	r5, r5, #3
 8003690:	3508      	adds	r5, #8
 8003692:	2d0c      	cmp	r5, #12
 8003694:	bf38      	it	cc
 8003696:	250c      	movcc	r5, #12
 8003698:	2d00      	cmp	r5, #0
 800369a:	4606      	mov	r6, r0
 800369c:	db01      	blt.n	80036a2 <_malloc_r+0x1a>
 800369e:	42a9      	cmp	r1, r5
 80036a0:	d903      	bls.n	80036aa <_malloc_r+0x22>
 80036a2:	230c      	movs	r3, #12
 80036a4:	6033      	str	r3, [r6, #0]
 80036a6:	2000      	movs	r0, #0
 80036a8:	bd70      	pop	{r4, r5, r6, pc}
 80036aa:	f000 f87d 	bl	80037a8 <__malloc_lock>
 80036ae:	4a21      	ldr	r2, [pc, #132]	; (8003734 <_malloc_r+0xac>)
 80036b0:	6814      	ldr	r4, [r2, #0]
 80036b2:	4621      	mov	r1, r4
 80036b4:	b991      	cbnz	r1, 80036dc <_malloc_r+0x54>
 80036b6:	4c20      	ldr	r4, [pc, #128]	; (8003738 <_malloc_r+0xb0>)
 80036b8:	6823      	ldr	r3, [r4, #0]
 80036ba:	b91b      	cbnz	r3, 80036c4 <_malloc_r+0x3c>
 80036bc:	4630      	mov	r0, r6
 80036be:	f000 f863 	bl	8003788 <_sbrk_r>
 80036c2:	6020      	str	r0, [r4, #0]
 80036c4:	4629      	mov	r1, r5
 80036c6:	4630      	mov	r0, r6
 80036c8:	f000 f85e 	bl	8003788 <_sbrk_r>
 80036cc:	1c43      	adds	r3, r0, #1
 80036ce:	d124      	bne.n	800371a <_malloc_r+0x92>
 80036d0:	230c      	movs	r3, #12
 80036d2:	4630      	mov	r0, r6
 80036d4:	6033      	str	r3, [r6, #0]
 80036d6:	f000 f868 	bl	80037aa <__malloc_unlock>
 80036da:	e7e4      	b.n	80036a6 <_malloc_r+0x1e>
 80036dc:	680b      	ldr	r3, [r1, #0]
 80036de:	1b5b      	subs	r3, r3, r5
 80036e0:	d418      	bmi.n	8003714 <_malloc_r+0x8c>
 80036e2:	2b0b      	cmp	r3, #11
 80036e4:	d90f      	bls.n	8003706 <_malloc_r+0x7e>
 80036e6:	600b      	str	r3, [r1, #0]
 80036e8:	18cc      	adds	r4, r1, r3
 80036ea:	50cd      	str	r5, [r1, r3]
 80036ec:	4630      	mov	r0, r6
 80036ee:	f000 f85c 	bl	80037aa <__malloc_unlock>
 80036f2:	f104 000b 	add.w	r0, r4, #11
 80036f6:	1d23      	adds	r3, r4, #4
 80036f8:	f020 0007 	bic.w	r0, r0, #7
 80036fc:	1ac3      	subs	r3, r0, r3
 80036fe:	d0d3      	beq.n	80036a8 <_malloc_r+0x20>
 8003700:	425a      	negs	r2, r3
 8003702:	50e2      	str	r2, [r4, r3]
 8003704:	e7d0      	b.n	80036a8 <_malloc_r+0x20>
 8003706:	684b      	ldr	r3, [r1, #4]
 8003708:	428c      	cmp	r4, r1
 800370a:	bf16      	itet	ne
 800370c:	6063      	strne	r3, [r4, #4]
 800370e:	6013      	streq	r3, [r2, #0]
 8003710:	460c      	movne	r4, r1
 8003712:	e7eb      	b.n	80036ec <_malloc_r+0x64>
 8003714:	460c      	mov	r4, r1
 8003716:	6849      	ldr	r1, [r1, #4]
 8003718:	e7cc      	b.n	80036b4 <_malloc_r+0x2c>
 800371a:	1cc4      	adds	r4, r0, #3
 800371c:	f024 0403 	bic.w	r4, r4, #3
 8003720:	42a0      	cmp	r0, r4
 8003722:	d005      	beq.n	8003730 <_malloc_r+0xa8>
 8003724:	1a21      	subs	r1, r4, r0
 8003726:	4630      	mov	r0, r6
 8003728:	f000 f82e 	bl	8003788 <_sbrk_r>
 800372c:	3001      	adds	r0, #1
 800372e:	d0cf      	beq.n	80036d0 <_malloc_r+0x48>
 8003730:	6025      	str	r5, [r4, #0]
 8003732:	e7db      	b.n	80036ec <_malloc_r+0x64>
 8003734:	20000094 	.word	0x20000094
 8003738:	20000098 	.word	0x20000098

0800373c <_realloc_r>:
 800373c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800373e:	4607      	mov	r7, r0
 8003740:	4614      	mov	r4, r2
 8003742:	460e      	mov	r6, r1
 8003744:	b921      	cbnz	r1, 8003750 <_realloc_r+0x14>
 8003746:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800374a:	4611      	mov	r1, r2
 800374c:	f7ff bf9c 	b.w	8003688 <_malloc_r>
 8003750:	b922      	cbnz	r2, 800375c <_realloc_r+0x20>
 8003752:	f7ff ff4d 	bl	80035f0 <_free_r>
 8003756:	4625      	mov	r5, r4
 8003758:	4628      	mov	r0, r5
 800375a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800375c:	f000 f826 	bl	80037ac <_malloc_usable_size_r>
 8003760:	42a0      	cmp	r0, r4
 8003762:	d20f      	bcs.n	8003784 <_realloc_r+0x48>
 8003764:	4621      	mov	r1, r4
 8003766:	4638      	mov	r0, r7
 8003768:	f7ff ff8e 	bl	8003688 <_malloc_r>
 800376c:	4605      	mov	r5, r0
 800376e:	2800      	cmp	r0, #0
 8003770:	d0f2      	beq.n	8003758 <_realloc_r+0x1c>
 8003772:	4631      	mov	r1, r6
 8003774:	4622      	mov	r2, r4
 8003776:	f7ff fc05 	bl	8002f84 <memcpy>
 800377a:	4631      	mov	r1, r6
 800377c:	4638      	mov	r0, r7
 800377e:	f7ff ff37 	bl	80035f0 <_free_r>
 8003782:	e7e9      	b.n	8003758 <_realloc_r+0x1c>
 8003784:	4635      	mov	r5, r6
 8003786:	e7e7      	b.n	8003758 <_realloc_r+0x1c>

08003788 <_sbrk_r>:
 8003788:	b538      	push	{r3, r4, r5, lr}
 800378a:	2300      	movs	r3, #0
 800378c:	4c05      	ldr	r4, [pc, #20]	; (80037a4 <_sbrk_r+0x1c>)
 800378e:	4605      	mov	r5, r0
 8003790:	4608      	mov	r0, r1
 8003792:	6023      	str	r3, [r4, #0]
 8003794:	f7fd f82e 	bl	80007f4 <_sbrk>
 8003798:	1c43      	adds	r3, r0, #1
 800379a:	d102      	bne.n	80037a2 <_sbrk_r+0x1a>
 800379c:	6823      	ldr	r3, [r4, #0]
 800379e:	b103      	cbz	r3, 80037a2 <_sbrk_r+0x1a>
 80037a0:	602b      	str	r3, [r5, #0]
 80037a2:	bd38      	pop	{r3, r4, r5, pc}
 80037a4:	20000214 	.word	0x20000214

080037a8 <__malloc_lock>:
 80037a8:	4770      	bx	lr

080037aa <__malloc_unlock>:
 80037aa:	4770      	bx	lr

080037ac <_malloc_usable_size_r>:
 80037ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80037b0:	1f18      	subs	r0, r3, #4
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	bfbc      	itt	lt
 80037b6:	580b      	ldrlt	r3, [r1, r0]
 80037b8:	18c0      	addlt	r0, r0, r3
 80037ba:	4770      	bx	lr

080037bc <_init>:
 80037bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037be:	bf00      	nop
 80037c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037c2:	bc08      	pop	{r3}
 80037c4:	469e      	mov	lr, r3
 80037c6:	4770      	bx	lr

080037c8 <_fini>:
 80037c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ca:	bf00      	nop
 80037cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037ce:	bc08      	pop	{r3}
 80037d0:	469e      	mov	lr, r3
 80037d2:	4770      	bx	lr
